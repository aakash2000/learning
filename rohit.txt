CREATE OR REPLACE PACKAGE soa_brokersynchronisation IS
  /*****************************************************************************************
      Purpose         : Package to provide  Broker Synchronisation functionalities for Broker.
      Developer       : Ankit Varshney (TCS)
      LATEST_VERSION  : 1.00
  ----------------------------------------------------------------------------------------
  Change History:
  Version   Author          Date        Details
  1.00      Ankit Varshney  05/06/2018  FETR0016324  Original Version
  ---------------------------------------------------------------------------------------- */

  PROCEDURE pr_lending_partner_change(pn_panel_unique_id IN NUMBER,
                                      ps_code            IN VARCHAR2,
                                      ps_extorg_name     IN VARCHAR2,
                                      ps_status          IN VARCHAR2,
                                      pt_addr_dtls       IN soa_tbl_address_dtls);

  PROCEDURE pr_firm_change(pn_firm_id           IN NUMBER,
                           pn_fsa_firm_ref      IN NUMBER,
                           pn_paymentroute_id   IN numtabletype,
                           ps_organisation_name IN VARCHAR2,
                           ps_firm_type         IN VARCHAR2,
                           ps_address1          IN VARCHAR2,
                           ps_address2          IN VARCHAR2,
                           ps_address3          IN VARCHAR2,
                           ps_address4          IN VARCHAR2,
                           ps_address5          IN VARCHAR2,
                           ps_address6          IN VARCHAR2,
                           ps_postcode          IN VARCHAR2,
                           ps_firm_email        IN VARCHAR2,
                           ps_status            IN VARCHAR2,
                           pt_trad_firm_details IN soa_tbl_trad_firm_details);

  PROCEDURE pr_introducer_change(pn_intermediary_id IN NUMBER,
                                 pt_npaddr_dtls     IN soa_tbl_nonpostaladdr_dtls,
                                 ps_title           IN VARCHAR2,
                                 ps_first_name      IN VARCHAR2,
                                 ps_last_name       IN VARCHAR2,
                                 pd_int_dob         IN DATE,
                                 ps_int_user        IN VARCHAR2,
                                 ps_status          IN VARCHAR2,
                                 pn_trading_firm_id IN numtabletype);

END soa_brokersynchronisation;
/
CREATE OR REPLACE PACKAGE BODY soa_brokersynchronisation IS
  /*****************************************************************************************
      Purpose         : Package to provide  Broker Synchronisation functionalities for Broker.
      Developer       : Ankit Varshney (TCS)
      LATEST_VERSION  : 1.00
  ----------------------------------------------------------------------------------------
  Change History:
  Version   Author          Date        Details
  1.00      Ankit Varshney  05/06/2018  FETR0016324  Orginal Version
  ---------------------------------------------------------------------------------------- */

  -- Global constant declaration
  gs_mso_lending_partner CONSTANT VARCHAR2(30) := pack_header.fn_get_global('GS_MSO_BROKER_LENDING_PARTNER');
  gs_mso_firm            CONSTANT VARCHAR2(30) := pack_header.fn_get_global('GS_MSO_BROKER_FIRM');
  gs_mso_trading_firm    CONSTANT VARCHAR2(30) := pack_header.fn_get_global('GS_MSO_BROKER_TRADING_FIRM');
  gs_mso_intermediary    CONSTANT VARCHAR2(30) := pack_header.fn_get_global('GS_MSO_BROKER_INTERMEDIARY');
  gs_created_at          CONSTANT VARCHAR2(8) := 'MSO_CORE';

  -- Exceptions

  exp_param_mandatory   EXCEPTION;
  exp_invalid_parameter EXCEPTION;
  exp_invalid_address   EXCEPTION;
  -- PS_STATUS will use it Later iress needs to check Status Active/InActive 

  PROCEDURE pr_lending_partner_change(pn_panel_unique_id IN NUMBER,
                                      ps_code            IN VARCHAR2,
                                      ps_extorg_name     IN VARCHAR2,
                                      ps_status          IN VARCHAR2,
                                      pt_addr_dtls       IN soa_tbl_address_dtls) IS
  
    /* ******************************************************************************
      Purpose         : This procedure will Insert data in relevant tables for lending partner 
                        if they do not exist in the cross reference table between MSO and Core. 
                        And in case it finds a match on core then that record will be updated
                        ( i.e. managing a payment route). All the updates/manage a payment route
                        may have fewer IN parameters depending on which data needs to be updated.
      Developer       : Rohit Sharma (TCS)
      LATEST_VERSION  : 1.00
    ----------------------------------------------------------------------------------------
    Change History:
    Version   Author          Date        Details
    1.00      Ankit Varshney  05/06/2018  FETR0016324  Original Version
    ---------------------------------------------------------------------------------------- */
  
    --Local Constant declaration for Brand Code
    ls_brand_code CONSTANT lending_partnerships.brand_code%TYPE := 'AML';
  
    --Local constant declaration for hard coded values.
    ls_commission_paid_to CONSTANT lending_partnerships.commission_paid_to%TYPE := 'L';
    ls_lp_type            CONSTANT lending_partnerships.lp_type%TYPE := 'I';
    ln_payment_frequency  CONSTANT lending_partnerships.payment_frequency%TYPE := 7;
    ls_lp_ecomm           CONSTANT lending_partnerships.lp_ecomm%TYPE := 'Y';
    ls_ptytyp_code        CONSTANT parties.ptytyp_code%TYPE := 'INTROD';
    ls_party_ind          CONSTANT parties.party_ind%TYPE := 'E';
    ls_fscs_ineligible    CONSTANT external_organisations.fscs_ineligible%TYPE := 'N';
  
    -- Local variable declaration for FAX,MAIL,TEL,CONTACT for Parties table
    ls_rec_unsol_fax     parties.rec_unsol_fax%TYPE := 'Y';
    ls_rec_unsol_mail    parties.rec_unsol_mail%TYPE := 'Y';
    ls_rec_unsol_tel     parties.rec_unsol_tel%TYPE := 'Y';
    ls_rec_unsol_contact parties.rec_unsol_contact%TYPE := 'Y';
    -- Local variable declaration for postal address
  
    ls_postal_address_line1        postal_addresses.line1%TYPE;
    ls_postal_address_line2        postal_addresses.line2%TYPE;
    ls_postal_address_line3        postal_addresses.line3%TYPE;
    ls_postal_address_line4        postal_addresses.line4%TYPE;
    ls_postal_address_line5        postal_addresses.line5%TYPE;
    ls_postal_address_postcode     VARCHAR2(10);
    ls_postal_address_country_code postal_addresses.cntry_code%TYPE;
    ls_area_code                   postal_addresses.area_code%TYPE;
    ls_district_code               postal_addresses.district_code%TYPE;
    ln_sector_code                 postal_addresses.sector_code%TYPE;
    ls_unit_code                   postal_addresses.unit_code%TYPE;
  
    -- Local variable declaration   
  
    ln_new_party_sysid      parties.sysid%TYPE;
    ln_existing_party_sysid parties.sysid%TYPE;
    ln_lenpnr_sysid         lending_partnerships.sysid%TYPE;
    ln_existing_addr_count  NUMBER;
    ln_index                NUMBER;
    ls_parameter            VARCHAR2(35);
  
  BEGIN
    -- Checking Mandatory parameter.
  
    IF pn_panel_unique_id IS NULL THEN
      ls_parameter := 'Panel Unique ID';
      RAISE exp_param_mandatory;
    END IF;
  
    -- Checking the condition if value exsist in the table for update.
  
    BEGIN
      SELECT crb.attribute_nval
        INTO ln_existing_party_sysid
        FROM cross_reference_external_ids crb
       WHERE crb.source_unique_id = pn_panel_unique_id
         AND crb.attribute_name = gs_mso_lending_partner
         AND crb.ended_date IS NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ln_existing_party_sysid := NULL;
    END;
  
    -- Inserting the Mandatory Data into the cross reference Table. 
  
    IF PS_STATUS = 'Inactive' THEN
      IF ln_existing_party_sysid IS NULL then
        RAISE exp_invalid_parameter;
      END IF;
      pack_mso_xref.pr_update_cross_ref_ext_ids(ps_source_unique_id => pn_panel_unique_id,
                                                ps_source_system    => 'MSO',
                                                ps_attribute_name   => gs_mso_lending_partner,
                                                pd_ended_date       => TRUNC(SYSDATE),
                                                ps_ended_by         => USER);
    ELSIF ln_existing_party_sysid IS NULL THEN
      --Sequence genaration parties sysid  
      ln_new_party_sysid := pack_sequence.fn_next_number('PARTY_SYSID_SEQ');
    
      pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_source_unique_id => pn_panel_unique_id,
                                                ps_source_system    => 'MSO',
                                                ps_attribute_name   => gs_mso_lending_partner,
                                                ps_attribute_type   => 'NUMBER',
                                                ps_attribute_cval   => NULL,
                                                pn_attribute_nval   => ln_new_party_sysid,
                                                pd_attribute_dval   => NULL,
                                                pd_created_date     => TRUNC(SYSDATE),
                                                ps_created_by       => USER);
    END IF;
    -- Inserting the Mandatory Data into the Parties Table.
  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE parties p
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE sysid = ln_existing_party_sysid;
    ELSIF ln_existing_party_sysid IS NULL THEN
      INSERT INTO parties
        (sysid,
         party_ind,
         rec_unsol_fax,
         rec_unsol_mail,
         rec_unsol_tel,
         ptytyp_code,
         trc_ref,
         rec_unsol_contact,
         party_name,
         created_date)
      VALUES
        (ln_new_party_sysid,
         ls_party_ind,
         ls_rec_unsol_fax, --ls_rec_unsol_fax,
         ls_rec_unsol_mail, --ls_rec_unsol_mail,
         ls_rec_unsol_tel, --ls_rec_unsol_tel,
         ls_ptytyp_code,
         NULL,
         ls_rec_unsol_contact, --ls_rec_unsol_contact,
         NULL, --ls_party_name,
         TRUNC(SYSDATE));
    END IF;
  
    -- Inserting the Data into the POSTAL_ADDRESSES Table, ADDRESS_USAGES Table  
  
    IF cardinality(pt_addr_dtls) > 1 THEN
      -- For a payment route, multiple address can not come
      RAISE exp_invalid_parameter;
    END IF;
  
    -- Initializing the index 
    ln_index := 1;
  
    WHILE ln_index <= cardinality(pt_addr_dtls) LOOP
      -- Loop is added as there can be no address in array
      ls_postal_address_line1        := pt_addr_dtls(ln_index).address_line1;
      ls_postal_address_line2        := pt_addr_dtls(ln_index).address_line2;
      ls_postal_address_line3        := pt_addr_dtls(ln_index).address_line3;
      ls_postal_address_line4        := pt_addr_dtls(ln_index).address_line4;
      ls_postal_address_line5        := pt_addr_dtls(ln_index).address_line5;
      ls_postal_address_postcode     := pt_addr_dtls(ln_index).postcode;
      ls_postal_address_country_code := pt_addr_dtls(ln_index).country_code;
      IF ln_existing_party_sysid IS NOT NULL THEN
        /* In case of already existing lending partner, checking new address has come or not
         In case of new address, new insert will be done in postal_addresses and address_usages.
         Also, existing address will be marked as inactive by putting END_DATE in address_usages.
        */
        IF pr_postcode.valid_postcode_format(ls_postal_address_postcode,
                                             ls_area_code,
                                             ls_district_code,
                                             ln_sector_code,
                                             ls_unit_code) THEN
          SELECT COUNT(1)
            INTO ln_existing_addr_count
            FROM postal_addresses pstadd, address_usages adduse
           WHERE adduse.party_sysid = ln_existing_party_sysid
             AND adduse.pstadd_sysid = pstadd.sysid
             AND pstadd.line1 = ls_postal_address_line1
             AND (pstadd.line2 = ls_postal_address_line2 OR
                 (pstadd.line2 IS NULL AND ls_postal_address_line2 IS NULL))
             AND (pstadd.line3 = ls_postal_address_line3 OR
                 (pstadd.line3 IS NULL AND ls_postal_address_line3 IS NULL))
             AND (pstadd.line4 = ls_postal_address_line4 OR
                 (pstadd.line4 IS NULL AND ls_postal_address_line4 IS NULL))
             AND (pstadd.line5 = ls_postal_address_line5 OR
                 (pstadd.line5 IS NULL AND ls_postal_address_line5 IS NULL))
             AND pstadd.area_code = ls_area_code
             AND pstadd.district_code = ls_district_code
             AND pstadd.sector_code = ln_sector_code
             AND pstadd.unit_code = ls_unit_code
             AND NVL(pstadd.cntry_code, 'UK') =
                 NVL(ls_postal_address_country_code, 'UK')
             AND adduse.end_date IS NULL;
        ELSE
          RAISE exp_invalid_address;
        END IF;
      ELSE
        ln_existing_addr_count := 0;
      END IF;
      IF ln_existing_addr_count = 0 THEN
      
        IF ln_existing_party_sysid IS NOT NULL THEN
          UPDATE address_usages adduse
             SET adduse.end_date   = TRUNC(SYSDATE - 1),
                 adduse.ended_by   = USER,
                 adduse.ended_at   = gs_created_at,
                 adduse.ended_date = SYSDATE
           WHERE adduse.party_sysid = ln_existing_party_sysid
             AND adduse.end_date IS NULL;
        END IF;
      
        -- Calling the pack_newacc.pr_create_person_address to insert data with local variables
        pack_newacc.pr_create_person_address(NVL(ln_existing_party_sysid,
                                                 ln_new_party_sysid),
                                             ls_postal_address_line1,
                                             ls_postal_address_line2,
                                             ls_postal_address_line3,
                                             ls_postal_address_line4,
                                             ls_postal_address_line5,
                                             ls_postal_address_postcode,
                                             ls_postal_address_country_code);
      END IF;
      -- Incrementing the index
      ln_index := ln_index + 1;
    
    END LOOP;
    -- Inserting the Data into the external_organisations Table
    IF PS_STATUS = 'Inactive' THEN
      UPDATE external_organisations eo
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE party_sysid = ln_existing_party_sysid;
    
    ELSIF ln_existing_party_sysid IS NOT NULL THEN
      UPDATE external_organisations eo
         SET eo.name = ps_extorg_name
       WHERE eo.party_sysid = ln_existing_party_sysid;
    ELSE
      INSERT INTO external_organisations
        (party_sysid,
         regd_charity_num,
         area_code,
         name,
         extorg_party_sysid,
         closed_date,
         regd_company_num,
         regd_year,
         osl_code,
         created_at,
         created_by,
         created_date,
         ended_at,
         ended_by,
         ended_date,
         extoty_code,
         extost_code,
         lenpnr_sysid,
         iam_code_override,
         fsa_firm_ref,
         prncpl_fsa_firm_ref,
         fee_exemption,
         fscs_ineligible) --mandatory (Y and N)
      VALUES
        (ln_new_party_sysid, --PARTY_SYSID, 
         NULL, --REGD_CHARITY_NUM ,
         NULL, --AREA_CODE,  
         ps_extorg_name, --NAME,  
         NULL, --EXTORG_PARTY_SYSID,  
         NULL, --CLOSED_DATE,  
         NULL, --REGD_COMPANY_NUM,  
         NULL, --REGD_YEAR, 
         NULL, --OSL_CODE, 
         gs_created_at, --CREATED_AT,    
         USER, --CREATED_BY,    
         TRUNC(SYSDATE), --CREATED_DATE,    
         NULL, --ENDED_AT,    
         NULL, --ENDED_BY,    
         NULL, --ENDED_DATE,    
         NULL, --EXTOTY_CODE, 
         NULL, --EXTOST_CODE,  
         NULL, --LENPNR_SYSID,  
         NULL, --IAM_CODE_OVERRIDE,  
         NULL, --FSA_FIRM_REF,  
         NULL, --PRNCPL_FSA_FIRM_REF,  
         NULL, --FEE_EXEMPTION,  
         ls_fscs_ineligible); --FSCS_INELIGIBLE);--mandatory (Y and N)
    
    END IF;
  
    -- Inserting the Mandatory Data into the lending partnership Table.  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE lending_partnerships lp
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE extorg_sysid = ln_existing_party_sysid;
    ELSIF ln_existing_party_sysid IS NOT NULL THEN
      UPDATE lending_partnerships lps
         SET lps.start_date = TRUNC(SYSDATE), -- TO be checked
             lps.code       = ps_code
       WHERE lps.extorg_sysid = ln_existing_party_sysid;
    ELSE
      --Sequence genaration for lending partner sysid
    
      ln_lenpnr_sysid := pack_sequence.fn_next_number('LENPNR_SYSID_SEQ');
    
      INSERT INTO lending_partnerships
        (sysid,
         start_date,
         end_date,
         extorg_sysid,
         code,
         contact_name,
         created_at,
         created_by,
         created_date,
         ended_at,
         ended_by,
         ended_date,
         xml_header_code,
         commission_paid_to,
         lp_type,
         lp_ecomm,
         payment_frequency, --mandatory(7/31)
         payment_end_date,
         brand_code) --mandatory defulted(AML or YBS)
      VALUES
        (ln_lenpnr_sysid, --SYSID,
         trunc(SYSDATE), --START_DATE,
         NULL, --END_DATE,
         ln_new_party_sysid, -- EXTORG_SYSID,
         ps_code, --CODE,
         NULL, --CONTACT_NAME,
         gs_created_at, --CREATED_AT,
         USER, --CREATED_BY,
         TRUNC(SYSDATE), --CREATED_DATE,
         NULL, --ENDED_AT,
         NULL, --ENDED_BY,
         NULL, --ENDED_DATE,
         NULL, --XML_HEADER_CODE,
         ls_commission_paid_to, --COMMISSION_PAID_TO,
         ls_lp_type, --LP_TYPE,
         ls_lp_ecomm, --LP_ECOMM,
         ln_payment_frequency, --PAYMENT_FREQUENCY,
         NULL,
         ls_brand_code); --BRAND_CODE);
    END IF;
  
  EXCEPTION
  
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,
                            'E00013# Mandatory Parameters Missing : ' ||
                            ls_parameter);
    WHEN OTHERS THEN
      ybs_application_error(-20002,
                            'Error in soa_brokersynchronisation.pr_lending_partner_change - ' ||
                            SQLERRM);
    
  END pr_lending_partner_change;

  PROCEDURE pr_firm_change(pn_firm_id           IN NUMBER,
                           pn_fsa_firm_ref      IN NUMBER,
                           pn_paymentroute_id   IN numtabletype,
                           ps_organisation_name IN VARCHAR2,
                           ps_firm_type         IN VARCHAR2,
                           ps_address1          IN VARCHAR2,
                           ps_address2          IN VARCHAR2,
                           ps_address3          IN VARCHAR2,
                           ps_address4          IN VARCHAR2,
                           ps_address5          IN VARCHAR2,
                           ps_address6          IN VARCHAR2,
                           ps_postcode          IN VARCHAR2,
                           ps_firm_email        IN VARCHAR2,
                           ps_status            IN VARCHAR2,
                           pt_trad_firm_details IN soa_tbl_trad_firm_details) IS
  
    /* ******************************************************************************
      Name            : PR_FIRM_CHANGE
      Purpose         : This procedure will populate / update the firms and trading firms data in the
                        relevant tables on CORE based on its existence on cross_reference_external_ids table.
      Developer       : Rohit Sharma (TCS)
      LATEST_VERSION  : 1.00
    ----------------------------------------------------------------------------------------
    Change History:
    Version   Author          Date        Details
    1.00      Ankit Varshney  05/06/2018  FETR0016324  Original Version
    ---------------------------------------------------------------------------------------- */
  
    -- Local variable declaration for postal address
  
    ls_trad_address_line1    postal_addresses.line1%TYPE;
    ls_trad_address_line2    postal_addresses.line2%TYPE;
    ls_trad_address_line3    postal_addresses.line3%TYPE;
    ls_trad_address_line4    postal_addresses.line4%TYPE;
    ls_trad_address_line5    postal_addresses.line5%TYPE;
    ls_trad_address_postcode VARCHAR2(8);
    ls_trad_unique_id        NUMBER;
    ls_trad_extorg_name      external_organisations.name%TYPE;
    ls_trad_area_code        postal_addresses.area_code%TYPE;
    ls_trad_district_code    postal_addresses.district_code%TYPE;
    ln_trad_sector_code      postal_addresses.sector_code%TYPE;
    ls_trad_unit_code        postal_addresses.unit_code%TYPE;
  
    -- Local variable declaration for FAX,MAIL,TEL,CONTACT for Parties table
    ls_rec_unsol_fax     parties.rec_unsol_fax%TYPE := 'Y';
    ls_rec_unsol_mail    parties.rec_unsol_mail%TYPE := 'Y';
    ls_rec_unsol_tel     parties.rec_unsol_tel%TYPE := 'Y';
    ls_rec_unsol_contact parties.rec_unsol_contact%TYPE := 'Y';
  
    --Local variable declaration for hard coded values.
    ls_ptytyp_code     CONSTANT parties.ptytyp_code%TYPE := 'INTROD';
    ls_party_ind       CONSTANT parties.party_ind%TYPE := 'E';
    ls_fscs_ineligible CONSTANT external_organisations.fscs_ineligible%TYPE := 'N';
  
    -- Local variable declaration 
    ln_new_party_sysid       NUMBER;
    ln_existing_party_sysid  NUMBER;
    ln_existing_fsa_firm_ref NUMBER;
    ln_existing_addr_count   NUMBER;
    ln_index                 NUMBER;
    ls_parameter             VARCHAR2(35);
    lb_valid_postcode        BOOLEAN;
  
  BEGIN
  
    -- Checking Mandatory parameter.
  
    IF pn_firm_id IS NULL THEN
      ls_parameter := 'Firm ID';
      RAISE exp_param_mandatory;
    END IF;
  
    -- Checking the condition for Firm id if value exsist in the table for update.
  
    BEGIN
      SELECT crb.attribute_nval
        INTO ln_existing_fsa_firm_ref
        FROM cross_reference_external_ids crb
       WHERE crb.source_unique_id = pn_firm_id
         AND crb.attribute_name = gs_mso_firm
         AND crb.ended_date IS NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ln_existing_fsa_firm_ref := NULL;
    END;
  
    -- Inserting the Mandatory Data into the fsa_register Table.  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE fsa_registers fsa
         SET update_id   = USER,
             update_time = TRUNC(SYSDATE),
             end_date    = TRUNC(SYSDATE)
       WHERE fsa_firm_ref = ln_existing_fsa_firm_ref;
    ELSIF ln_existing_fsa_firm_ref IS NOT NULL THEN
      UPDATE fsa_registers fsa
         SET fsa.organisation_name = ps_organisation_name,
             fsa.firm_type         = ps_firm_type,
             fsa.update_id         = USER,
             fsa.update_time       = TRUNC(SYSDATE),
             fsa.addr1             = ps_address1,
             fsa.addr2             = ps_address2,
             fsa.addr3             = ps_address3,
             fsa.addr4             = ps_address4,
             fsa.addr5             = ps_address5,
             fsa.addr6             = ps_address6,
             fsa.postcode          = ps_postcode
       WHERE fsa_firm_ref = ln_existing_fsa_firm_ref;
    
    ELSE
      INSERT INTO fsa_registers
        (fsa_firm_ref,
         start_date,
         organisation_name,
         authorisation_status,
         firm_type,
         regulated_activity_stat_107,
         regulated_activity_stat_108,
         update_id,
         update_time,
         end_date,
         addr1,
         addr2,
         addr3,
         addr4,
         addr5,
         addr6,
         postcode,
         notes)
      VALUES
        (pn_fsa_firm_ref, --FSA_FIRM_REF,  
         SYSDATE, --START_DATE,  
         ps_organisation_name, --ORGANISATION_NAME,  
         'AUTHORISED', --AUTHORISATION_STATUS,
         ps_firm_type, --FIRM_TYPE,  
         NULL, --REGULATED_ACTIVITY_STAT_107,  
         NULL, --REGULATED_ACTIVITY_STAT_108,  
         USER, --p_user_id, --UPDATE_ID,  
         TRUNC(SYSDATE), --UPDATE_TIME,   
         NULL, --END_DATE, 
         ps_address1, --addr1,  
         ps_address2, --addr2,  
         ps_address3, --addr3,  
         ps_address4, --addr4,  
         ps_address5, --addr5,  
         ps_address6, --addr6)
         ps_postcode,
         NULL); --NOTES
    END IF;
  
    -- Inserting the Mandatory Data into the cross reference Table.  
  
    IF PS_STATUS = 'Inactive' THEN
      pack_mso_xref.pr_update_cross_ref_ext_ids(ps_source_unique_id => pn_firm_id,
                                                ps_source_system    => 'MSO',
                                                ps_attribute_name   => gs_mso_firm,
                                                pd_ended_date       => TRUNC(SYSDATE),
                                                ps_ended_by         => USER);
    ELSIF ln_existing_fsa_firm_ref IS NULL THEN
      pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_source_unique_id => pn_firm_id,
                                                ps_source_system    => 'MSO',
                                                ps_attribute_name   => gs_mso_firm,
                                                ps_attribute_type   => 'NUMBER',
                                                ps_attribute_cval   => NULL,
                                                pn_attribute_nval   => pn_fsa_firm_ref,
                                                pd_attribute_dval   => NULL,
                                                pd_created_date     => TRUNC(SYSDATE),
                                                ps_created_by       => USER);
    
    END IF;
  
    --Assigning the value to local variable
    ln_index := 1;
  
    WHILE ln_index <= cardinality(pt_trad_firm_details) LOOP
      ls_trad_unique_id       := pt_trad_firm_details(ln_index)
                                 .trad_unique_id;
      ls_trad_extorg_name     := pt_trad_firm_details(ln_index)
                                 .trad_extorg_name;
      ln_existing_party_sysid := NULL;
      ln_new_party_sysid      := NULL;
    
      -- Checking the condition for Trad firm id if value exsist in the table for update.
    
      BEGIN
        SELECT crb.attribute_nval
          INTO ln_existing_party_sysid
          FROM cross_reference_external_ids crb
         WHERE crb.source_unique_id = ls_trad_unique_id
           AND crb.attribute_name = gs_mso_trading_firm;
        --ln_trading_firm_count := 1;
      EXCEPTION
        WHEN no_data_found THEN
          --ln_trading_firm_count := 0;
          ln_existing_party_sysid := NULL;
      END;
    
      -- Inserting the Mandatory Data into the cross reference Table. 
    
      IF PS_STATUS = 'Inactive' THEN
        pack_mso_xref.pr_update_cross_ref_ext_ids(ps_source_unique_id => ls_trad_unique_id,
                                                  ps_source_system    => 'MSO',
                                                  ps_attribute_name   => gs_mso_trading_firm,
                                                  pd_ended_date       => TRUNC(SYSDATE),
                                                  ps_ended_by         => USER);
      ELSIF ln_existing_party_sysid IS NULL THEN
        --Sequence genaration for parties sysid 
        ln_new_party_sysid := pack_sequence.fn_next_number('PARTY_SYSID_SEQ');
      
        pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_source_unique_id => ls_trad_unique_id,
                                                  ps_source_system    => 'MSO',
                                                  ps_attribute_name   => gs_mso_trading_firm,
                                                  ps_attribute_type   => 'NUMBER',
                                                  ps_attribute_cval   => NULL,
                                                  pn_attribute_nval   => ln_new_party_sysid,
                                                  pd_attribute_dval   => NULL,
                                                  pd_created_date     => TRUNC(SYSDATE),
                                                  ps_created_by       => USER);
      
      END IF;
      -- Inserting the Mandatory Data into the Parties Table.    
      IF PS_STATUS = 'Inactive' THEN
        UPDATE parties p
           SET ended_by   = USER,
               ended_at   = gs_created_at,
               ended_date = TRUNC(SYSDATE)
         WHERE sysid = ln_existing_party_sysid;
      
      ELSIF ln_existing_party_sysid IS NULL THEN
        INSERT INTO parties
          (sysid,
           party_ind,
           rec_unsol_fax,
           rec_unsol_mail,
           rec_unsol_tel,
           ptytyp_code,
           trc_ref,
           rec_unsol_contact,
           party_name,
           created_date)
        VALUES
          (ln_new_party_sysid,
           ls_party_ind,
           ls_rec_unsol_fax,
           ls_rec_unsol_mail,
           ls_rec_unsol_tel,
           ls_ptytyp_code,
           NULL,
           ls_rec_unsol_contact,
           NULL, --ls_party_name,
           TRUNC(SYSDATE));
      END IF;
    
      -- Inserting the Mandatory Data into the external organisations Table.  
    
      IF PS_STATUS = 'Inactive' THEN
        UPDATE external_organisations eo
           SET ended_by   = USER,
               ended_at   = gs_created_at,
               ended_date = TRUNC(SYSDATE)
         WHERE party_sysid = ln_existing_party_sysid;
      
      ELSIF ln_existing_party_sysid IS NOT NULL THEN
        UPDATE external_organisations eo
           SET eo.name = ls_trad_extorg_name
         WHERE eo.party_sysid = ln_existing_party_sysid;
      
      ELSE
      
        INSERT INTO external_organisations
          (party_sysid,
           regd_charity_num,
           area_code,
           name,
           extorg_party_sysid,
           closed_date,
           regd_company_num,
           regd_year,
           osl_code,
           created_at,
           created_by,
           created_date,
           ended_at,
           ended_by,
           ended_date,
           extoty_code,
           extost_code,
           lenpnr_sysid,
           iam_code_override,
           fsa_firm_ref,
           prncpl_fsa_firm_ref,
           fee_exemption,
           fscs_ineligible) --mandatory (Y and N)
        VALUES
          (ln_new_party_sysid, --PARTY_SYSID, 
           NULL, --REGD_CHARITY_NUM ,
           NULL, --AREA_CODE,  
           ls_trad_extorg_name, --NAME,  
           NULL, --EXTORG_PARTY_SYSID,  
           NULL, --CLOSED_DATE,  
           NULL, --REGD_COMPANY_NUM,  
           NULL, --REGD_YEAR, 
           NULL, --OSL_CODE, 
           gs_created_at, --CREATED_AT,    
           USER, --CREATED_BY,    
           TRUNC(SYSDATE), --CREATED_DATE,    
           NULL, --ENDED_AT,    
           NULL, --ENDED_BY,    
           NULL, --ENDED_DATE,    
           NULL, --EXTOTY_CODE, 
           NULL, --EXTOST_CODE,  
           NULL, --pn_paymentroute_id(ln_paymentroute_index), --LENPNR_SYSID,  
           NULL, --IAM_CODE_OVERRIDE,  
           pn_fsa_firm_ref, --FSA_FIRM_REF,  
           NULL, --PRNCPL_FSA_FIRM_REF,  
           NULL, --FEE_EXEMPTION,  
           ls_fscs_ineligible); --FSCS_INELIGIBLE);--mandatory (Y and N)
      
      END IF;
    
      -- Get new Postal Address SYSID
      -- Inserting the Data into the POSTAL_ADDRESSES Table, ADDRESS_USAGES Table
      -- By reusing package PACK_NEWACC.PR_CREATE_PERSON_ADDRESS.
      -- Initializing the index 
      -- Insert new Postal Address record
    
      ls_trad_address_line1    := pt_trad_firm_details(ln_index)
                                  .trad_address1;
      ls_trad_address_line2    := pt_trad_firm_details(ln_index)
                                  .trad_address2;
      ls_trad_address_line3    := pt_trad_firm_details(ln_index)
                                  .trad_address3;
      ls_trad_address_line4    := pt_trad_firm_details(ln_index)
                                  .trad_address4;
      ls_trad_address_line5    := pt_trad_firm_details(ln_index)
                                  .trad_address5;
      ls_trad_address_postcode := pt_trad_firm_details(ln_index)
                                  .trad_postcode;
      lb_valid_postcode        := pr_postcode.valid_postcode_format(ls_trad_address_postcode,
                                                                    ls_trad_area_code,
                                                                    ls_trad_district_code,
                                                                    ln_trad_sector_code,
                                                                    ls_trad_unit_code);
      IF NOT lb_valid_postcode THEN
        RAISE exp_invalid_address;
      END IF;
      IF ln_existing_party_sysid IS NOT NULL THEN
        /* In case of already existing trading firm, checking new address has come or not
         In case of new address, new insert will be done in postal_addresses and address_usages.
         Also, existing address will be marked as inactive by putting END_DATE in address_usages.
        */
        SELECT COUNT(1)
          INTO ln_existing_addr_count
          FROM postal_addresses pstadd, address_usages adduse
         WHERE adduse.party_sysid = ln_existing_party_sysid
           AND adduse.pstadd_sysid = pstadd.sysid
           AND pstadd.line1 = ls_trad_address_line1
           AND (pstadd.line2 = ls_trad_address_line2 OR
               (pstadd.line2 IS NULL AND ls_trad_address_line2 IS NULL))
           AND (pstadd.line3 = ls_trad_address_line3 OR
               (pstadd.line3 IS NULL AND ls_trad_address_line3 IS NULL))
           AND (pstadd.line4 = ls_trad_address_line4 OR
               (pstadd.line4 IS NULL AND ls_trad_address_line4 IS NULL))
           AND (pstadd.line5 = ls_trad_address_line5 OR
               (pstadd.line5 IS NULL AND ls_trad_address_line5 IS NULL))
           AND pstadd.area_code = ls_trad_area_code
           AND pstadd.district_code = ls_trad_district_code
           AND pstadd.sector_code = ln_trad_sector_code
           AND pstadd.unit_code = ls_trad_unit_code
           AND NVL(pstadd.cntry_code, 'UK') = 'UK'
           AND adduse.end_date IS NULL;
      
      ELSE
        ln_existing_addr_count := 0;
      END IF;
    
      IF ln_existing_addr_count = 0 THEN
        IF ln_existing_party_sysid IS NOT NULL THEN
          UPDATE address_usages adduse
             SET adduse.end_date   = TRUNC(SYSDATE - 1),
                 adduse.ended_by   = USER,
                 adduse.ended_at   = gs_created_at,
                 adduse.ended_date = SYSDATE
           WHERE adduse.party_sysid = ln_existing_party_sysid
             AND adduse.end_date IS NULL;
        END IF;
        -- Calling the pack_newacc.pr_create_person_address to insert data with local variables
        pack_newacc.pr_create_person_address(ln_new_party_sysid,
                                             ls_trad_address_line1,
                                             ls_trad_address_line2,
                                             ls_trad_address_line3,
                                             ls_trad_address_line4,
                                             ls_trad_address_line5,
                                             ls_trad_address_postcode,
                                             NULL);
      END IF;
    
      ln_index := ln_index + 1;
    
    END LOOP;
  
  EXCEPTION
  
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,
                            'E00013# Mandatory Parameters Missing : ' ||
                            ls_parameter);
    WHEN OTHERS THEN
      ybs_application_error(-20002,
                            'Error in soa_brokersynchronisation.pr_firm_change - ' ||
                            SQLERRM);
    
  END pr_firm_change;

  PROCEDURE pr_introducer_change(pn_intermediary_id IN NUMBER,
                                 pt_npaddr_dtls     IN soa_tbl_nonpostaladdr_dtls,
                                 ps_title           IN VARCHAR2,
                                 ps_first_name      IN VARCHAR2,
                                 ps_last_name       IN VARCHAR2,
                                 pd_int_dob         IN DATE,
                                 ps_int_user        IN VARCHAR2,
                                 ps_status          IN VARCHAR2,
                                 pn_trading_firm_id IN numtabletype) IS
  
    /* ******************************************************************************
      Name            : PR_INTRODUCER_CHANGE
      Purpose         : This procedure will populate the intermediary(aka brokers) data in relevant 
                        core tables. If a broker record exists on the CROSS_REFERENCE_BROKERS 
                        then we will update the broker related data otherwise an insert operation
                        will happen. 
      Developer       : Rohit Sharma (TCS)
      LATEST_VERSION  : 1.00
    ----------------------------------------------------------------------------------------
    Change History:
    Version   Author          Date        Details
    1.00      Ankit Varshney  05/06/2018  FETR0016324  Original Version
    ---------------------------------------------------------------------------------------- */
    -- Local variable declaration   
    ls_title         people.title_abbr%TYPE;
    ls_forenames     people.forenames%TYPE;
    ls_surname       people.surname%TYPE;
    ls_party_name    parties.party_name%TYPE;
    ld_date_of_birth people.date_of_birth%TYPE;
  
    --Local constant declaration.
    ls_mccb_override   CONSTANT VARCHAR2(1) := 'Y';
    ls_ptytyp_code     CONSTANT parties.ptytyp_code%TYPE := 'INTUSG';
    ls_party_ind       CONSTANT parties.party_ind%TYPE := 'P';
    ls_fscs_ineligible CONSTANT external_organisations.fscs_ineligible%TYPE := 'N';
  
    -- Local variable declaration for non postal address
    ls_telephone_num        non_postal_addresses.addr%TYPE;
    ls_area_dialing_code    non_postal_addresses.adc_code%TYPE;
    ls_nonpostal_src_code   non_postal_addresses.npasrc_code%TYPE;
    ls_email_address        non_postal_addresses.addr%TYPE;
    ls_addresstype_code     non_postal_addresses.adtyp_code%TYPE;
    ls_addressfunction_code address_usage_functions.addfun_code%TYPE;
  
    -- Local variable declaration for FAX,MAIL,TEL,CONTACT for Parties table
    ls_rec_unsol_fax     parties.rec_unsol_fax%TYPE := 'Y';
    ls_rec_unsol_mail    parties.rec_unsol_mail%TYPE := 'Y';
    ls_rec_unsol_tel     parties.rec_unsol_tel%TYPE := 'Y';
    ls_rec_unsol_contact parties.rec_unsol_contact%TYPE := 'Y';
  
    ln_new_party_sysid         NUMBER;
    ln_existing_party_sysid    NUMBER;
    ln_introd_sysid            NUMBER;
    ln_new_intusg_sysid        NUMBER;
    ln_existing_intusg_sysid   NUMBER;
    ln_index                   NUMBER;
    ln_trading_firm_index      NUMBER;
    ln_extorg_sysid            NUMBER;
    ln_lenpnr_sysid            NUMBER;
    ln_npaddr_count            NUMBER;
    ln_introducer_usages_count NUMBER;
    ls_parameter               VARCHAR2(35);
    -- Cursor to Get the introducer_usages for the Broker and trading Firms
    CURSOR cur_get_intuse(cs_introd_sysid IN VARCHAR2,
                          cs_extorg_sysid IN VARCHAR2) IS
      SELECT sysid, lenpnr_sysid
        FROM introducer_usages
       WHERE introd_sysid = cs_introd_sysid
         AND extorg_sysid = cs_extorg_sysid
         AND ended_at is null;
  
  BEGIN
  
    -- Local variable declaration 
  
    ls_title         := ps_title;
    ls_forenames     := ps_first_name;
    ls_surname       := ps_last_name;
    ld_date_of_birth := pd_int_dob;
  
    -- Validating the party name
  
    IF ps_last_name IS NOT NULL THEN
      ls_party_name := ps_last_name || ', ';
    END IF;
    IF ps_first_name IS NOT NULL THEN
      ls_party_name := ls_party_name || ps_title || ' ' || ps_first_name;
    ELSE
      ls_party_name := ls_party_name || ps_title;
    END IF;
    ls_party_name := SUBSTR(ls_party_name, 1, 120);
    -- Checking Mandatory parameter.
  
    IF pn_intermediary_id IS NULL THEN
      ls_parameter := 'Intermediary ID';
      RAISE exp_param_mandatory;
    END IF;
  
    -- Checking the condition for Firm id if value exsist in the table for update.
  
    BEGIN
      SELECT crb.attribute_nval
        INTO ln_existing_party_sysid
        FROM cross_reference_external_ids crb
       WHERE crb.source_unique_id = pn_intermediary_id
         AND crb.attribute_name = gs_mso_intermediary
         AND crb.ended_date IS NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ln_existing_party_sysid := NULL;
    END;
  
    -- Inserting the Mandatory Data into the cross reference Table.  
  
    IF PS_STATUS = 'Inactive' THEN
      pack_mso_xref.pr_update_cross_ref_ext_ids(ps_source_unique_id => pn_intermediary_id,
                                                ps_source_system    => 'MSO',
                                                ps_attribute_name   => gs_mso_intermediary,
                                                pd_ended_date       => TRUNC(SYSDATE),
                                                ps_ended_by         => USER);
    ELSIF ln_existing_party_sysid IS NULL THEN
      --Sequence genaration for parties sysid 
    
      ln_new_party_sysid := pack_sequence.fn_next_number('PARTY_SYSID_SEQ');
    
      pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_source_unique_id => pn_intermediary_id,
                                                ps_source_system    => 'MSO',
                                                ps_attribute_name   => gs_mso_intermediary,
                                                ps_attribute_type   => 'NUMBER',
                                                ps_attribute_cval   => NULL,
                                                pn_attribute_nval   => ln_new_party_sysid,
                                                pd_attribute_dval   => NULL,
                                                pd_created_date     => TRUNC(SYSDATE),
                                                ps_created_by       => USER);
    
    END IF;
  
    -- Inserting the Mandatory Data into the Parties Table.    
  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE parties p
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE sysid = ln_existing_party_sysid;
    ELSIF ln_new_party_sysid <> 1 THEN
      INSERT INTO parties
        (sysid,
         party_ind,
         rec_unsol_fax,
         rec_unsol_mail,
         rec_unsol_tel,
         ptytyp_code,
         trc_ref,
         rec_unsol_contact,
         party_name,
         created_date)
      VALUES
        (ln_new_party_sysid,
         ls_party_ind,
         ls_rec_unsol_fax,
         ls_rec_unsol_mail,
         ls_rec_unsol_tel,
         ls_ptytyp_code,
         NULL,
         ls_rec_unsol_contact,
         ls_party_name,
         SYSDATE);
    END IF;
    -- Inserting the Data into the People Table.   
  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE people p
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE party_sysid = ln_existing_party_sysid;
    ELSIF ln_existing_party_sysid IS NOT NULL THEN
      UPDATE people p
         SET p.title_abbr    = ls_title,
             p.forenames     = ls_forenames,
             p.surname       = ls_surname,
             p.date_of_birth = ld_date_of_birth
       WHERE p.party_sysid = ln_existing_party_sysid;
    ELSE
      INSERT INTO people
        (party_sysid,
         title_abbr,
         forenames,
         initials,
         surname,
         marsta_code,
         ntnlty_code,
         date_of_birth,
         gender,
         dsb_code,
         date_of_death,
         death_notify_date,
         death_evidance_date,
         date_evidance_seen,
         scheme_tot,
         created_date)
      VALUES
        (ln_new_party_sysid,
         ls_title,
         ls_forenames,
         NULL, --ls_initials,
         ls_surname,
         NULL,
         NULL,
         ld_date_of_birth,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         SYSDATE);
    END IF;
    -- Inserting the Data into the NON_POSTAL_ADDRESSES  Table, ADDRESS_USAGES Table
    -- By reusing package PACK_NPSTADD.PR_POPULATE_NPST_ADDRESSES. 
    -- Initializing the index 
    ln_index := 1;
    WHILE ln_index <= cardinality(pt_npaddr_dtls) LOOP
      ls_telephone_num        := pt_npaddr_dtls(ln_index).telephone_num;
      ls_area_dialing_code    := pt_npaddr_dtls(ln_index).area_dialing_code;
      ls_nonpostal_src_code   := pt_npaddr_dtls(ln_index).nonpostal_src_code;
      ls_email_address        := pt_npaddr_dtls(ln_index).email_address;
      ls_addresstype_code     := pt_npaddr_dtls(ln_index).addresstype_code;
      ls_addressfunction_code := pt_npaddr_dtls(ln_index)
                                 .addressfunction_code;
      IF ln_existing_party_sysid IS NOT NULL THEN
        SELECT COUNT(1)
          INTO ln_npaddr_count
          FROM non_postal_addresses npadd, address_usages adduse
         WHERE adduse.party_sysid = ln_existing_party_sysid
           AND adduse.npaddr_sysid = npadd.sysid
           AND npadd.addr = CASE ls_addresstype_code
                 WHEN 'TEL' THEN
                  ls_area_dialing_code || ls_telephone_num
                 WHEN 'FAX' THEN
                  ls_area_dialing_code || ls_telephone_num
                 WHEN 'EMAIL' THEN
                  ls_email_address
                 ELSE
                  ls_nonpostal_src_code
               END
           AND (npadd.adc_code = ls_area_dialing_code OR
               (npadd.adc_code IS NULL AND ls_area_dialing_code IS NULL))
           AND NVL(npadd.adtyp_code, 'X') = NVL(ls_addresstype_code, 'X')
           AND NVL(npadd.npasrc_code, 'X') =
               NVL(ls_nonpostal_src_code, 'X');
      ELSE
        ln_npaddr_count := 0;
      END IF;
      IF ln_npaddr_count = 0 THEN
        -- Calling the pack_npstadd.pr_populate_npst_addresses to insert data with local variables
        pack_npstadd.pr_populate_npst_addresses(NVL(ln_existing_party_sysid,
                                                    ln_new_party_sysid),
                                                SYSDATE,
                                                CASE ls_addresstype_code WHEN
                                                'TEL' THEN ls_area_dialing_code ||
                                                ls_telephone_num WHEN 'FAX' THEN
                                                ls_area_dialing_code ||
                                                ls_telephone_num WHEN
                                                'EMAIL' THEN
                                                ls_email_address WHEN
                                                'USERNAME' THEN ps_int_user ELSE
                                                ls_nonpostal_src_code END,
                                                NULL,
                                                NULL,
                                                NULL,
                                                ls_addresstype_code,
                                                ls_addressfunction_code,
                                                NULL,
                                                'MSO_CORE',
                                                USER,
                                                NULL);
      END IF;
      -- Incrementing the index
      ln_index := ln_index + 1;
    END LOOP;
    -- Inserting the Mandatory Data into the external organisations Table.  
  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE external_organisations eo
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE party_sysid = ln_existing_party_sysid;
    
    ELSIF ln_existing_party_sysid IS NOT NULL THEN
      UPDATE external_organisations eo
         SET name = ls_party_name
       WHERE party_sysid = ln_existing_party_sysid;
    
    ELSE
      INSERT INTO external_organisations
        (party_sysid,
         regd_charity_num,
         area_code,
         name,
         extorg_party_sysid,
         closed_date,
         regd_company_num,
         regd_year,
         osl_code,
         created_at,
         created_by,
         created_date,
         ended_at,
         ended_by,
         ended_date,
         extoty_code,
         extost_code,
         lenpnr_sysid,
         iam_code_override,
         fsa_firm_ref,
         prncpl_fsa_firm_ref,
         fee_exemption,
         fscs_ineligible) --mandatory (Y and N)
      VALUES
        (ln_new_party_sysid, --PARTY_SYSID, 
         NULL, --REGD_CHARITY_NUM ,
         NULL, --AREA_CODE,  
         ls_party_name, --NAME,  
         NULL, --EXTORG_PARTY_SYSID,  
         NULL, --CLOSED_DATE,  
         NULL, --REGD_COMPANY_NUM,  
         NULL, --REGD_YEAR, 
         NULL, --OSL_CODE, 
         gs_created_at, --CREATED_AT,    
         USER, --CREATED_BY,    
         SYSDATE, --CREATED_DATE,    
         NULL, --ENDED_AT,    
         NULL, --ENDED_BY,    
         NULL, --ENDED_DATE,    
         NULL, --EXTOTY_CODE, 
         NULL, --EXTOST_CODE,  
         NULL, --LENPNR_SYSID,  
         NULL, --IAM_CODE_OVERRIDE,  
         NULL, --FSA_FIRM_REF,  
         NULL, --PRNCPL_FSA_FIRM_REF,  
         NULL, --FEE_EXEMPTION,  
         ls_fscs_ineligible); --FSCS_INELIGIBLE);--mandatory (Y and N)
    END IF;
  
    -- Inserting the Mandatory Data into the introducers Table. 
  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE introducers introd
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE person_party_sysid = ln_existing_party_sysid;
    ELSIF ln_existing_party_sysid IS NULL THEN
      --Sequence genaration for introducers sysid 
      ln_introd_sysid := pack_sequence.fn_next_number('INTROD_SYSID_SEQ');
    
      INSERT INTO introducers
        (sysid,
         start_date,
         end_date,
         person_party_sysid,
         mccb_sysid,
         mccb_override,
         created_date,
         created_at,
         created_by,
         ended_date,
         ended_at,
         ended_by,
         audit_auth_date,
         audit_auth_at,
         audit_auth_by,
         mccb_code,
         web_start_date)
      VALUES
        (ln_introd_sysid, --sysid,
         TRUNC(SYSDATE), --start_date,
         NULL, --end_date,
         ln_new_party_sysid, --person_party_sysid,
         NULL, --mccb_sysid,
         ls_mccb_override, --mccb_override,
         SYSDATE, --CREATED_DATE,
         gs_created_at, --CREATED_AT,
         USER, --CREATED_BY,
         NULL, --ended_date,
         NULL, --ended_at,
         NULL, --ended_by,
         NULL, ---audit_auth_date,
         NULL, ---audit_auth_at,
         NULL, ---audit_auth_by,
         NULL, ---mccb_code,
         NULL); --- web_start_date);
    
    END IF;
  
    -- Inserting the Mandatory Data into the introducers usages Table.   
    IF ln_existing_party_sysid IS NOT NULL OR PS_STATUS = 'Inactive' THEN
      SELECT sysid
        INTO ln_introd_sysid
        FROM introducers introd
       WHERE introd.person_party_sysid = ln_existing_party_sysid;
    END IF;
  
    IF PS_STATUS = 'Inactive' THEN
      UPDATE introducer_usages intusg
         SET ended_by   = USER,
             ended_at   = gs_created_at,
             ended_date = TRUNC(SYSDATE)
       WHERE intusg.introd_sysid = ln_introd_sysid;
      --ELSIF ln_intermediary_count <> 1 THEN
    ELSE
    
      WHILE ln_trading_firm_index <= cardinality(pn_trading_firm_id) LOOP
        ln_introducer_usages_count := 0;
        SELECT cre.attribute_nval
          INTO ln_extorg_sysid
          FROM cross_reference_external_ids cre
         WHERE cre.source_unique_id =
               pn_trading_firm_id(ln_trading_firm_index)
           AND cre.attribute_name = gs_mso_trading_firm;
      
        IF ln_existing_party_sysid IS NOT NULL THEN
          OPEN cur_get_intuse(ln_introd_sysid, ln_extorg_sysid);
          LOOP
            FETCH cur_get_intuse
              INTO ln_existing_intusg_sysid, ln_lenpnr_sysid;
            EXIT WHEN cur_get_intuse%NOTFOUND;
            UPDATE introducer_usages iu
               SET ended_by   = USER,
                   ended_at   = gs_created_at,
                   ended_date = TRUNC(SYSDATE)
             WHERE iu.sysid = ln_existing_intusg_sysid;
            --Sequence genaration for Introducer usages sysid 
            ln_new_intusg_sysid := pack_sequence.fn_next_number('INTUSG_SYSID_SEQ');
            INSERT INTO introducer_usages
              (sysid,
               introd_sysid,
               extorg_sysid,
               lenpnr_sysid,
               status,
               emp_ref_no,
               mail_option,
               created_at,
               created_by,
               created_date,
               ended_at,
               ended_by,
               ended_date,
               usage_type)
            VALUES
              (ln_new_intusg_sysid, --sysid,
               ln_introd_sysid, --introd_sysid,
               ln_extorg_sysid, --extorg_sysid,
               ln_lenpnr_sysid, --lenpnr_sysid, 
               NULL, --status,
               NULL, --emp_ref_no,
               NULL, --mail_option,
               gs_created_at, --created_at,
               USER, --created_by,
               SYSDATE, --created_date,
               NULL, --ended_at,
               NULL, --ended_by,
               NULL, --ended_date,
               NULL); --usage_type);
            ln_introducer_usages_count := ln_introducer_usages_count + 1;
          END LOOP;
        END IF;
        IF ln_introducer_usages_count = 0 THEN
          --Sequence genaration for Introducer usages sysid 
          ln_new_intusg_sysid := pack_sequence.fn_next_number('INTUSG_SYSID_SEQ');
          INSERT INTO introducer_usages
            (sysid,
             introd_sysid,
             extorg_sysid,
             lenpnr_sysid,
             status,
             emp_ref_no,
             mail_option,
             created_at,
             created_by,
             created_date,
             ended_at,
             ended_by,
             ended_date,
             usage_type)
          VALUES
            (ln_new_intusg_sysid, --sysid,
             ln_introd_sysid, --introd_sysid,
             ln_extorg_sysid, --extorg_sysid,
             NULL, --lenpnr_sysid, 
             NULL, --status,
             NULL, --emp_ref_no,
             NULL, --mail_option,
             gs_created_at, --created_at,
             USER, --created_by,
             SYSDATE, --created_date,
             NULL, --ended_at,
             NULL, --ended_by,
             NULL, --ended_date,
             NULL); --usage_type);
        END IF;
        ln_trading_firm_index := ln_trading_firm_index + 1;
      END LOOP;
    
    END IF;
  
  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,
                            'E00013# Mandatory Parameters Missing : ' ||
                            ls_parameter);
    WHEN OTHERS THEN
      ybs_application_error(-20002,
                            'Error in soa_brokersynchronisation.pr_introducer_change - ' ||
                            SQLERRM);
    
  END pr_introducer_change;

END soa_brokersynchronisation;
/
===================================================================================================================
CREATE OR REPLACE PACKAGE pack_mso_broker_upload IS
  /* ******************************************************************************
      Name            : PACK_MSO_BROKER_UPLOAD
      Purpose         : Package to provide  Upload functionalities for Broker.
                        Note: Broker Upload is one time activity with potential for re-use 
      Developer       : Ankit (TCS)
      LATEST_VERSION  : 1.00
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

  FUNCTION fn_get_fca_num(ps_lp_code IN VARCHAR2)
    RETURN VARCHAR2;
    
  PROCEDURE pr_generate_xml(pc_clob_out OUT CLOB);

  PROCEDURE pr_get_paymentroute(pc_clob_out OUT CLOB);

  PROCEDURE pr_get_intermediary(pc_clob_out OUT CLOB);

  PROCEDURE pr_get_firm(pc_clob_out OUT CLOB);

  PROCEDURE pr_write_xml(pc_xml_in    IN CLOB,
                         ps_directory IN VARCHAR2,
                         ps_file_name IN VARCHAR2);

END pack_mso_broker_upload;
/
CREATE OR REPLACE PACKAGE BODY pack_mso_broker_upload IS
  /* ******************************************************************************
      Name            : PACK_MSO_BROKER_UPLOAD
      Purpose         : Package to provide  Upload functionalities for Broker.
                        Note: Broker Upload is one time activity with potential for re-use 
      Developer       : Ankit (TCS)
      LATEST_VERSION  : 1.00
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

  gs_brand_code CONSTANT VARCHAR2(5) := 'AML';
  gs_export_dir CONSTANT VARCHAR2(30) := pack_header.fn_get_global('GS_MSO_BROKER_EXPORT_DIR');

  FUNCTION fn_get_fca_num(ps_lp_code IN VARCHAR2)
    RETURN VARCHAR2 IS
  /* ******************************************************************************
        Name            : FN_GET_FCA_NUM
        Purpose         : FCA Number for Payment Route is not being maintained in Core DB.
                          So Design team provided a list in TDD in which we are having mapping
                          of Payment routes with FCA Number. This function gives is fca number 
                          for a payment route based on that mapping. 
        Developer       : Ankit (TCS)
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           28/09/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

    -- Local Constant declaration
  lc_fca_number VARCHAR2(20);
  BEGIN
  --Hardcoading is used in preference to a data solution as this is a one-off activity
   lc_fca_number:=  CASE ps_lp_code 
            WHEN '953L886' THEN '497604'
            WHEN '953L899' THEN '302221'
            WHEN '953L854' THEN '302221'
            WHEN '953L851' THEN '303390'
            WHEN '953L857' THEN '302221'
            WHEN '953L855' THEN '631247'
            WHEN '953L856' THEN '301684'
            WHEN '953L884' THEN '435779'
            WHEN '953L872' THEN '462298'
            WHEN '953L868' THEN '440718'
            WHEN '953L873' THEN '217742'
            WHEN '953L852' THEN '303397'
            WHEN '953L853' THEN '192638'
            WHEN '953L892' THEN '455545'
            WHEN '953L896' THEN '195351'
            WHEN '953L833' THEN '454811'
            WHEN '953L895' THEN '649443'
            WHEN '953L893' THEN '305330'
            WHEN '953L890' THEN '300866'
            WHEN '953L859' THEN '408285'
            WHEN '953L806' THEN '187834'
            WHEN '953L880' THEN '305008'
            WHEN '953L898' THEN '184591'
            WHEN '953L894' THEN '150427'
            WHEN '953L911' THEN '149826'
            WHEN '953L881' THEN '150643'
            WHEN '953L877' THEN '311266'
            ELSE NULL END;

    RETURN lc_fca_number;
  END fn_get_fca_num;

  PROCEDURE pr_generate_xml(pc_clob_out OUT CLOB) IS
  /* ******************************************************************************
        Name            : PR_GENERATE_XML
        Purpose         : This is the main procedure which is used to call the other procedure for generation of the xsd/xml files to be consumed by IRESS
        Developer       : Ankit (TCS)
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */
  BEGIN

       pr_get_paymentroute(pc_clob_out);

       pr_get_firm(pc_clob_out);

       pr_get_intermediary(pc_clob_out);

  EXCEPTION
    WHEN OTHERS THEN
      ybs_application_error(-20002,'Error in pack_mso_broker_upload.pr_generate_xml - ' ||SQLERRM);

  END pr_generate_xml;

  PROCEDURE pr_get_paymentroute(pc_clob_out OUT CLOB) IS
 /* ******************************************************************************
        Name            : PR_GET_PAYMENTROUTE
        Purpose         : This procedure will create an xml CLOB according to paymentroute
                          XSD provided by IRESS.
        Developer       : Ankit (TCS)
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

    -- Local Constant declaration
    ls_job_name    CONSTANT global_values.global_cvalue%TYPE := pack_header.fn_get_global('GS_MSO_BROKER_LENDING_PARTNER')||'.xml';
    
    --Comment 1:Agencynumber is Null as they dont have any place holder in core and not required in MSO.

    --Comment 2:Bank details is Null as they dont have any place holder in core and not required in MSO.

    -- Cursor will create an xml CLOB according to paymentroute XSD provided by IRESS

    CURSOR cur_get_paymentroute_broker IS
      SELECT '<?xml version="1.0" encoding="UTF-8"?>' || chr(10) ||
             XMLSERIALIZE(DOCUMENT DELETEXML(xmlelement("root",-- Added DELETEXML as MSO won't accept blank tags
                               xmlattributes('http://www.w3.org/2001/XMLSchema-instance' AS
                                   "xmlns:xsi",
                                   'http://www.w3.org/2001/XMLSchema' AS
                                   "xmlns:xsd",
                                   'http://www.Iress.co.uk/MSO/IntermediaryPanel/PaymentRouteDefinition.xsd' AS
                                   "xmlns"),
                               xmlelement("PaymentRoutes",
                                    DELETEXML(xmlagg(xmlelement("PaymentRoute",
                                        xmlelement("ImportId",payment_route.import_id),
                                        xmlelement("PaymentRouteName",payment_route.payment_name),
                                        xmlelement("PaymentRouteType",DECODE(payment_route.fsa_firm_ref,
                                                                             NULL,
                                                                             'Club',
                                                                             'Network')),
                                        xmlelement("PaymentRouteCode",payment_route.payment_code),
                                        xmlelement("BuildingName",payment_route.line1_buildingname),
                                        xmlelement("BuildingNumber",payment_route.line1_buildingnumber),
                                        xmlelement("Flat",payment_route.line1_flat),
                                        xmlelement("Street",payment_route.line2_street),
                                        xmlelement("District",payment_route.line4_district),
                                        xmlelement("Town",payment_route.line3_town),
                                        xmlelement("County",payment_route.line4_country),
                                        xmlelement("Postcode",payment_route.postcode_dtls),
                                        xmlelement("FCANumber",payment_route.fsa_firm_ref),
                                        xmlelement("AgencyNumber",NULL), -- comment 1(Explain above)
                                        xmlelement("BankDetails", -- comment 2 Start(Explain above)
                                           xmlelement("AccountHolder",NULL),
                                           xmlelement("AccountNumber",NULL),
                                           xmlelement("SortCode",NULL),
                                           xmlelement("BankName",NULL),
                                           xmlelement("BuildingName",NULL),
                                           xmlelement("BuildingNumber",NULL),
                                           xmlelement("Flat",NULL),
                                           xmlelement("Street",NULL),
                                           xmlelement("District",NULL),
                                           xmlelement("Town",NULL),
                                           xmlelement("County",NULL),
                                           xmlelement("Postcode",NULL)), -- comment 2 End (Explain above)
                                        xmlelement("IsPaidProcFee",'false'),
                                        xmlelement("ParentImportId",NULL), ---Not Required
                                        xmlelement("ExternalReferences",
                                           xmlelement("ExternalReference",
                                             xmlelement("ExternalReferenceType", 'Servicing'),
                                             xmlelement("Reference", payment_route.external_reference))))),
                                             '//*[not(text())][not(*)]'))),
                                    '//*[not(text())][not(*)]') AS CLOB
                          indent size = 2) AS paymentroute_clob
        FROM (SELECT par.sysid external_reference,
                     lenpar.sysid import_id,
                     extorg.name payment_name,
                     lenpar.code payment_code,
                     TRIM(pstadd.line1) line1_buildingname,
                     TRIM(pstadd.line1) line1_buildingnumber,
                     TRIM(pstadd.line1) line1_flat,
                     TRIM(pstadd.line2) line2_street,
                     TRIM(pstadd.line4) line4_district,
                     TRIM(pstadd.line3) line3_town,
                     TRIM(pstadd.line4) line4_country,
                     UPPER(pstadd.area_code || pstadd.district_code ||
                           TO_CHAR(pstadd.sector_code) || pstadd.unit_code) postcode_dtls,
                     pack_mso_broker_upload.fn_get_fca_num(lenpar.code) fsa_firm_ref
                FROM lending_partnerships   lenpar,
                     parties                par,
                     external_organisations extorg,
                     address_usages         addusg,
                     postal_addresses       pstadd
               WHERE lenpar.extorg_sysid = par.sysid
                 AND lenpar.extorg_sysid = extorg.party_sysid
                 AND par.sysid = addusg.party_sysid
                 AND addusg.pstadd_sysid = pstadd.sysid
                 AND lenpar.ended_date IS NULL
                 AND par.ended_date IS NULL
                 AND extorg.ended_date IS NULL
                 AND addusg.end_date IS NULL
                 AND addusg.pstadd_sysid IS NOT NULL
                 AND lenpar.brand_code = gs_brand_code
                 AND UPPER(par.party_name) LIKE 'E-COMMERCE%'
                 ) payment_route;

  BEGIN
    OPEN cur_get_paymentroute_broker;
    FETCH cur_get_paymentroute_broker
    INTO pc_clob_out;
    CLOSE cur_get_paymentroute_broker;

    -- calling pr_write_xml procedure to write the XML file to directory.
    pr_write_xml(pc_clob_out,
                 gs_export_dir,
                 ls_job_name);

  EXCEPTION

    WHEN OTHERS THEN
      ybs_application_error(-20002,'Error in pack_mso_broker_upload.pr_get_paymentroute - ' ||SQLERRM);

  END pr_get_paymentroute;

  PROCEDURE pr_get_intermediary(pc_clob_out OUT CLOB) IS
  /* ******************************************************************************
        Name            : PR_GET_INTERMEDIARY
        Purpose         : This procedure will create an xml CLOB according to Intermediary XSD provided by IRESS.
        Developer       : Ankit (TCS)
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

    -- Local Constant declaration
    ls_job_name    CONSTANT global_values.global_cvalue%TYPE := pack_header.fn_get_global('GS_MSO_BROKER_INTERMEDIARY')||'.xml';
    -- Comment 1: Roles is NULL as they dont have any place holder in core and not required in MSO.

    -- Comment 2: BDM is NULL as they dont have any place holder in core and not required in MSO.

    --Cursor will create an xml CLOB according to Intermediary  XSD provided by IRESS.

    CURSOR cur_get_Intermediary_broker IS
      SELECT '<?xml version="1.0" encoding="UTF-8"?>' || chr(10) ||
             XMLSERIALIZE(DOCUMENT DELETEXML(xmlelement("root",-- Added DELETEXML as MSO won't accept blank tags
                                   xmlattributes('http://www.w3.org/2001/XMLSchema-instance' AS
                                     "xmlns:xsi",
                                     'http://www.w3.org/2001/XMLSchema' AS
                                     "xmlns:xsd",
                                     'http://www.Iress.co.uk/MSO/IntermediaryPanel/IntermediaryDefinition.xsd' AS
                                     "xmlns"),
                                   xmlelement("Intermediaries",
                                      DELETEXML(xmlagg(xmlelement("Intermediary",
                                          xmlelement("Username",intermediary_file.email_address),
                                          xmlelement("TitleCode",intermediary_file.title_abbr),
                                          xmlelement("Forename",intermediary_file.forenames),
                                          xmlelement("Surname",intermediary_file.surname),
                                          xmlelement("DateOfBirth",intermediary_file.date_of_birth),
                                          xmlelement("Mobile",intermediary_file.mobile),
                                          xmlelement("SMSNotifications",'true'),
                                          xmlelement("Telephone",intermediary_file.telephone_num),
                                          xmlelement("BDMRelationship",NULL),
                                          xmlelement("EmailAddress",intermediary_file.email_address),
                                          xmlelement("Roles",xmlelement("Role",NULL)), -- Comment 1(Explain above)
                                          xmlelement("FirmFCANumber",intermediary_file.fsa_firm_ref),
                                          xmlelement("OnMonitor",'true'),
                                          xmlelement("IsPrinciple",'true'),
                                          xmlelement("TradingAddressImportId",intermediary_file.tradingaddressimportid),
                                          xmlelement("Bdm",NULL), -- Comment 2(Explain above)
                                          xmlelement("Notes",'false'),
                                          xmlelement("HasMarketingPreference",NULL),
                                          xmlelement("AreAdminsSentNotifications",'false'),
                                          xmlelement("CanAllAdminsAccessCases",'true'),
                                          xmlelement("ExternalReferences",
                                             xmlelement("ExternalReference",
                                               xmlelement("ExternalReferenceType", 'Servicing'),
                                               xmlelement("Reference", intermediary_file.external_reference))))),
                                               '//*[not(text())][not(*)]'))),
                                    '//*[not(text())][not(*)]') AS CLOB
                          indent size = 2) AS IntermediaryClob_file
        FROM (SELECT DISTINCT introd.person_party_sysid external_reference,
                      lenpar.sysid import_id,
                      addusg.party_sysid tradingaddressimportid,
                      TRIM(title_abbr) title_abbr,
                      TRIM(forenames) forenames,
                      TRIM(surname) surname,
                      date_of_birth date_of_birth,
                      firm_eo.FSA_FIRM_REF,
                      (SELECT npaddr.addr || adc_code
                         FROM non_postal_addresses npaddr
                        WHERE addusg.npaddr_sysid = npaddr.sysid
                          AND npaddr.adtyp_code = 'TEL'
                          AND npaddr.npasrc_code IN ('WORK', 'HOME')) telephone_num,
                      (SELECT npaddr.addr
                         FROM non_postal_addresses npaddr
                        WHERE addusg.npaddr_sysid = npaddr.sysid
                          AND npaddr.adtyp_code = 'EMAIL') email_address,
                      (SELECT npaddr.addr || adc_code
                         FROM non_postal_addresses npaddr
                        WHERE addusg.npaddr_sysid = npaddr.sysid
                          AND npaddr.adtyp_code = 'TEL'
                          AND npaddr.npasrc_code IN ('MOBILE')) mobile
                FROM introducers            introd,
                     people                 pep,
                     introducer_usages      intuse,
                     lending_partnerships   lenpar,
                     parties                par,
                     address_usages         addusg,
                     external_organisations firm_eo
               WHERE introd.person_party_sysid = pep.party_sysid
                 AND introd.sysid = intuse.introd_sysid
                 AND intuse.lenpnr_sysid = lenpar.sysid
                 AND lenpar.extorg_sysid = par.sysid
                 AND addusg.party_sysid = introd.person_party_sysid
                 AND intuse.extorg_sysid = firm_eo.party_sysid
                 AND lenpar.brand_code = gs_brand_code
                 AND UPPER(par.party_name) LIKE 'E-COMMERCE%'
                 AND introd.end_date IS NULL
                 AND intuse.ended_date IS NULL
                 AND par.ended_date IS NULL
                 AND pep.ended_date IS NULL
                 AND lenpar.ended_date IS NULL
                 AND addusg.ended_date IS NULL
                 AND firm_eo.ended_date IS NULL) intermediary_file;

  BEGIN
    OPEN cur_get_Intermediary_broker;
    FETCH cur_get_Intermediary_broker
    INTO pc_clob_out;
    CLOSE cur_get_Intermediary_broker;

    -- calling pr_write_xml procedure to write the XML file to directory.
    pr_write_xml(pc_clob_out,
                 gs_export_dir,
                 ls_job_name);


  EXCEPTION
    WHEN OTHERS THEN
      ybs_application_error(-20002,'Error in pack_mso_broker_upload.pr_get_intermediary - ' ||SQLERRM);

  END pr_get_intermediary;

  PROCEDURE pr_get_firm(pc_clob_out OUT CLOB) IS

  /* ******************************************************************************
        Name            : PR_GET_FIRM
        Purpose         : This procedure will create an xml CLOB according to Firm XSD provided by IRESS.
        Developer       : Ankit (TCS)
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

    -- Local Constant declaration
    ls_job_name    CONSTANT global_values.global_cvalue%TYPE := pack_header.fn_get_global('GS_MSO_BROKER_FIRM')||'.xml';
    --Comment 1: Agencynumber is Null as they dont have any place holder in core and not required in MSO.
    --Comment 2: Bank Details is Null as they dont have any place holder in core and not required in MSO.
    --Comment 3:BDM is Null as they dont have any place holder in core and not required in MSO.

    --Cursor will create an xml CLOB according to firm  XSD provided by IRESS.

    CURSOR cur_get_firm_dtl IS
      SELECT '<?xml version="1.0" encoding="UTF-8"?>' || chr(10) ||
        XMLSERIALIZE(DOCUMENT DELETEXML(xmlelement("root", -- Added DELETEXML as MSO won't accept blank tags
             xmlattributes('http://www.w3.org/2001/XMLSchema-instance' AS "xmlns:xsi",
                           'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsd",
                           'http://www.Iress.co.uk/MSO/IntermediaryPanel/FirmDefinition.xsd' AS "xmlns"),
             xmlelement("Firms",
                DELETEXML(xmlagg(xmlelement("Firm",
                    xmlelement("FirmName", firm_details.firm_name),
                    xmlelement("BuildingName", firm_details.addr1_buildingname),
                    xmlelement("BuildingNumber", firm_details.addr1_buildingnumber),
                    xmlelement("Flat", firm_details.addr1_flat),
                    xmlelement("Street", firm_details.addr2_street),
                    xmlelement("District", firm_details.addr3_district),
                    xmlelement("Town", firm_details.addr4_town),
                    xmlelement("County", firm_details.addr5_country),
                    xmlelement("Postcode", firm_details.post_code),
                    xmlelement("OnMonitor", 'false'),
                    xmlelement("FCANumber", firm_details.fsa_firm_ref),
                    xmlelement("AgencyNumber", NULL), --Comment 1(Explain above)
                    xmlelement("FirmType", firm_details.firm_type),
                    xmlelement("BankDetails", -- Comment 2 start (Explain above)
                       xmlelement("AccountHolder", NULL),
                       xmlelement("AccountNumber", NULL),
                       xmlelement("SortCode", NULL),
                       xmlelement("BankName", NULL),
                       xmlelement("BuildingName", NULL),
                       xmlelement("BuildingNumber", NULL),
                       xmlelement("Flat", NULL),
                       xmlelement("Street", NULL),
                       xmlelement("District", NULL),
                       xmlelement("Town", NULL),
                       xmlelement("County", NULL),
                       xmlelement("Postcode", NULL)), --Comment 2 END(Explain above)
                    xmlelement("PaymentRouteImportIds",
                       xmlagg(xmlelement("PaymentRouteImportId",
                                         firm_details.paymentrouteimportid))),
                    xmlelement("TradingAddresses",
                       xmlagg( xmlelement ("TradingAddress",
                           xmlelement("TradingAddressImportId", firm_details.tradingaddressimportid),
                           xmlelement("Name", firm_details.trading_firm_name),
                           xmlelement("BuildingName", firm_details.line1_buildingname),
                           xmlelement("BuildingNumber", firm_details.line1_buildingnumber),
                           xmlelement("Flat", firm_details.line1_flat),
                           xmlelement("Street", firm_details.line2_street),
                           xmlelement("District", firm_details.line4_district),
                           xmlelement("Town", firm_details.line3_town),
                           xmlelement("County", firm_details.line4_country),
                           xmlelement("Postcode", firm_details.postcode_dtls),
                           xmlelement("Bdm", NULL)))), --Comment 3(Explain above)
                    xmlelement("EmailAddress", firm_details.email_address),
                    xmlelement("IsSentNotifications", 'true'),
                    xmlelement("CanAdminsAccessAllBrokers", 'true'),
                    xmlelement("ExternalReferences",
                       xmlelement("ExternalReference",
                            xmlelement("ExternalReferenceType", 'Servicing'),
                            xmlelement("Reference", firm_details.fsa_firm_ref))))),
                                  '//*[not(text())][not(*)]'))),
                              '//*[not(text())][not(*)]') AS CLOB indent
                    size = 2) AS firmdetails_clob
        FROM (SELECT --COUNT(DISTINCT fsareg.fsa_firm_ref)
               fsareg.fsa_firm_ref,
               fsareg.organisation_name firm_name,
               TRIM(fsareg.addr1) addr1_buildingname,
               TRIM(fsareg.addr1) addr1_buildingnumber,
               TRIM(fsareg.addr1) addr1_flat,
               TRIM(fsareg.addr2) addr2_street,
               TRIM(fsareg.addr3) addr3_district,
               TRIM(fsareg.addr4) addr4_town,
               TRIM(fsareg.addr5) addr5_country,
               fsareg.postcode post_code,
               lenpar.sysid paymentrouteimportid,
               NULL tradingaddressimportid,
               NULL trading_firm_name,
               NULL line1_buildingname,
               NULL line1_buildingnumber,
               NULL line1_flat,
               NULL line2_street,
               NULL line4_district,
               NULL line3_town,
               NULL line4_country,
               NULL postcode_dtls,
               fsareg.firm_type firm_type,
               (SELECT npaddr.addr
                  FROM non_postal_addresses npaddr
                 WHERE addusg.npaddr_sysid = npaddr.sysid
                   AND npaddr.adtyp_code = 'EMAIL') email_address
                FROM fsa_registers fsareg
                JOIN external_organisations extorg
                  ON extorg.fsa_firm_ref = fsareg.fsa_firm_ref
                LEFT OUTER JOIN address_usages addusg
                  ON extorg.party_sysid = addusg.party_sysid
                LEFT OUTER JOIN postal_addresses pstadd
                  ON addusg.pstadd_sysid = pstadd.sysid
                JOIN introducer_usages iu
                  ON extorg.party_sysid = iu.extorg_sysid
                JOIN lending_partnerships lenpar
                  ON lenpar.sysid = iu.lenpnr_sysid
                JOIN parties lprpar ---Parties for Payment Route
                  ON lprpar.sysid = lenpar.extorg_sysid
               WHERE extorg.ended_date IS NULL
                 AND lenpar.brand_code = gs_brand_code
                 AND lprpar.party_name LIKE 'E-COMMERCE%'
                 AND fsareg.end_date IS NULL
                 AND lprpar.ended_date IS NULL
                 AND lenpar.ended_date IS NULL
                 AND iu.ended_date IS NULL
                 AND addusg.ended_date IS NULL
                 AND addusg.pstadd_sysid IS NOT NULL
              UNION
              SELECT
               fsareg.fsa_firm_ref,
               fsareg.organisation_name firm_name,
               TRIM(fsareg.addr1) addr1_buildingname,
               TRIM(fsareg.addr1) addr1_buildingnumber,
               TRIM(fsareg.addr1) addr1_flat,
               TRIM(fsareg.addr2) addr2_street,
               TRIM(fsareg.addr3) addr3_district,
               TRIM(fsareg.addr4) addr4_town,
               TRIM(fsareg.addr5) addr5_country,
               fsareg.postcode post_code,
               NULL paymentrouteimportid,
               addusg.party_sysid tradingaddressimportid,
               fsareg.organisation_name trading_firm_name,
               TRIM(pstadd.line1) line1_buildingname,
               TRIM(pstadd.line1) line1_buildingnumber,
               TRIM(pstadd.line1) line1_flat,
               TRIM(pstadd.line2) line2_street,
               TRIM(pstadd.line4) line4_district,
               TRIM(pstadd.line3) line3_town,
               TRIM(pstadd.line4) line4_country,
               UPPER(pstadd.area_code || pstadd.district_code ||
                     TO_CHAR(pstadd.sector_code) || pstadd.unit_code) postcode_dtls,
               fsareg.firm_type firm_type,
               (SELECT npaddr.addr
                  FROM non_postal_addresses npaddr
                 WHERE addusg.npaddr_sysid = npaddr.sysid
                   AND npaddr.adtyp_code = 'EMAIL') email_address
                FROM fsa_registers fsareg
                JOIN external_organisations extorg
                  ON extorg.fsa_firm_ref = fsareg.fsa_firm_ref
                LEFT OUTER JOIN address_usages addusg
                  ON extorg.party_sysid = addusg.party_sysid
                LEFT OUTER JOIN postal_addresses pstadd
                  ON addusg.pstadd_sysid = pstadd.sysid
                JOIN introducer_usages iu
                  ON extorg.party_sysid = iu.extorg_sysid
                JOIN lending_partnerships lenpar
                  ON lenpar.sysid = iu.lenpnr_sysid
                JOIN parties lprpar ---Parties for Payment Route
                  ON lprpar.sysid = lenpar.extorg_sysid
               WHERE extorg.ended_date IS NULL
                 AND lenpar.brand_code = gs_brand_code
                 AND lprpar.party_name LIKE 'E-COMMERCE%'
                 AND fsareg.end_date IS NULL
                 AND lprpar.ended_date IS NULL
                 AND lenpar.ended_date IS NULL
                 AND iu.ended_date IS NULL
                 AND addusg.ended_date IS NULL
                 AND addusg.pstadd_sysid IS NOT NULL) firm_details 
       GROUP BY firm_details.firm_name,
                firm_details.addr1_buildingname,
                firm_details.addr1_buildingnumber,
                firm_details.addr1_flat,
                firm_details.addr2_street,
                firm_details.addr3_district,
                firm_details.addr4_town,
                firm_details.addr5_country,
                firm_details.post_code,
                firm_details.fsa_firm_ref,
                firm_details.firm_type,
                firm_details.email_address;
                
  BEGIN
    OPEN cur_get_firm_dtl;
    FETCH cur_get_firm_dtl
    INTO pc_clob_out;
    CLOSE cur_get_firm_dtl;

    -- calling pr_write_xml procedure to write the XML file to directory.

    pr_write_xml(pc_clob_out,
                 gs_export_dir,
                 ls_job_name);


  EXCEPTION
    WHEN OTHERS THEN
      ybs_application_error(-20002,'Error in pack_mso_broker_upload.pr_get_firm - ' ||SQLERRM);

  END pr_get_firm;

  PROCEDURE pr_write_xml(pc_xml_in    IN CLOB,
                         ps_directory IN VARCHAR2,
                         ps_file_name IN VARCHAR2) IS
  /* ******************************************************************************
        Name            : PR_WRITE_XML
        Purpose         : This procedure will only be used to write the xml file in the designated
                          directory.All the subsequent procedure will pass the xml CLOB to this
                          function which create the file at the designated directory.
        Developer       : Ankit (TCS)
  --------------------------------------------------------------------------------
  Change History:
  Version   Author          Date         Details
  1.00      Ankit           30/04/2018   FETR0016324 Original Version
  -------------------------------------------------------------------------------- */

  BEGIN

    DBMS_XSLPROCESSOR.CLOB2FILE(pc_xml_in, ps_directory, ps_file_name);

  EXCEPTION

    WHEN OTHERS THEN
      ybs_application_error(-20002,'Error in pack_mso_broker_upload.pr_write_xml - ' ||SQLERRM);

  END pr_write_xml;
  

END pack_mso_broker_upload;
/
=========================================================================================================
CREATE OR REPLACE PACKAGE soa_conveyancing_data AS
  /* ******************************************************************************
      Name            : SOA_CONVEYANCING_DATA
      Purpose         : Package to provide search and validate functionalities for
                        conveyancer.
      Developer       : Soumya Ranjan (TCS)
      LATEST_VERSION  : 1.00
      Feature_number  : FETR0016324
  --------------------------------------------------------------------------------
      Change History:
      Version         Author          Date                 Details
      1.00            Soumya Ranjan   20/03/18             Orginal Version
  -------------------------------------------------------------------------------- */
  PROCEDURE pr_val_conveyancer_dtls( ps_con_panel_code       IN VARCHAR2,
                                     rec_get_conv_dtl        OUT soa_tbl_conveyancer_dtls
                                   );

  PROCEDURE pr_search_conveyancers(  ps_company_name         IN VARCHAR2,
                                     ps_town                 IN VARCHAR2,
                                     ps_postcode             IN VARCHAR2,
                                     ps_max_records          IN NUMBER,
                                     tab_soa_tbl_conv        OUT soa_tbl_conveyancer_dtls
                                 );
END soa_conveyancing_data;
/
CREATE OR REPLACE PACKAGE BODY soa_conveyancing_data AS
   /* ******************************************************************************
      Name            : SOA_CONVEYANCING_DATA
      Purpose         : Package to provide search and validate functionalities for
                        conveyancer.
      Developer       : Soumya Ranjan (TCS)
      LATEST_VERSION  : 1.00
      Feature_number  : FETR0016324
  --------------------------------------------------------------------------------
      Change History:
      Version         Author          Date                 Details
      1.00            Soumya Ranjan   20/03/18             Orginal Version
  -------------------------------------------------------------------------------- */

  PROCEDURE pr_val_conveyancer_dtls(ps_con_panel_code   IN VARCHAR2,
                                    rec_get_conv_dtl    OUT soa_tbl_conveyancer_dtls
                                   ) AS
  /* ******************************************************************************
      Name            : PR_VAL_CONVEYANCER_DTLS
      Purpose         : procedure to validate the conveyancer and provide the
                        Postal and Non-Postal address details of the conveyancer
      Developer       : Soumya Ranjan (TCS)
  --------------------------------------------------------------------------------
      Update Log:

      Version         By               Date               Details
      1.00            Soumya Ranjan   20/03/18            FETR0016324: Orginal Version
  -------------------------------------------------------------------------------- */
    -- Local variable declaration
      ln_index                   NUMBER := 1;        -- Initialized to 1 as we should get only 1 record per conveyancer.
      ls_panel_id                VARCHAR2(30);
      ln_party_sysid             NUMBER;

    -- Exceptions

      exp_param_mandatory        EXCEPTION;
      exp_no_records_found       EXCEPTION;


    -- Cursor to Get the Postal Address Details of the given conveyancer

        CURSOR c_get_conv_postal_dtl(cp_panel_id IN VARCHAR2) IS
        SELECT DISTINCT
               TRIM(oypm.refno)      panel_code,
               oypm.party_sysid      ps_party_sysid,
               TRIM(pa.party_name)   company_name,
               TRIM(pad.line1)       address_line1,
               TRIM(pad.line2)       address_line2,
               TRIM(pad.line3)       address_line3,
               TRIM(pad.line4)       address_line4,
               TRIM(pad.line5)       address_line5,
               pad.area_code || pad.district_code || ' ' ||TO_CHAR(pad.sector_code) || pad.unit_code postcode,
               TRIM(pad.cntry_code)  country_code,
               TRIM(pad.adtyp_code)  addresstype_code
          FROM
                    other_ybs_panel_memberships oypm
               JOIN applied_party_panel_statuses apps ON
                    (oypm.sysid = apps.party_panel_sysid)
               JOIN parties pa ON
                    (pa.sysid = oypm.party_sysid)
               JOIN address_usages au ON
                    (au.party_sysid = pa.sysid)
               JOIN postal_addresses pad ON
                    (pad.sysid = au.pstadd_sysid)
          WHERE
                  apps.pps_code IN ('CON01','CON02','CON03','CON04','CON05','CON06')  -- Using Hardcoded Values as defined in the TDD
              AND oypm.ybspan_code = 'CON'                                            -- Using Hardcoded Values as defined in the TDD
              AND apps.party_panel_ind = 'O'                                          -- Using Hardcoded Values as defined in the TDD
              AND au.addfun_code = 'CORR'                                             -- Using Hardcoded Values as defined in the TDD
              AND EXISTS ( SELECT NULL
                           FROM client_bank_accounts cba
                           WHERE cba.oybspm_sysid = oypm.sysid
                           AND cba.end_date IS NULL)
              AND apps.end_date IS NULL
              AND pa.ended_date IS NULL
              AND oypm.end_date IS NULL
              AND au.end_date   IS NULL
              AND oypm.refno = cp_panel_id;

    -- Cursor to Get the Non Postal Address Details of the given conveyancer

          CURSOR c_get_conv_non_postal_dtl(cp_party_sysid IN NUMBER) IS
          SELECT
                 MAX(CASE WHEN npa.adtyp_code = 'TEL'   THEN npa.addr END)   AS telephone_num
                ,MAX(CASE WHEN npa.adtyp_code = 'EMAIL' THEN npa.addr END)   AS email_address
                ,MAX(CASE WHEN npa.adtyp_code = 'FAX'   THEN npa.addr END)   AS fax_number
          FROM  address_usages au JOIN non_postal_addresses npa ON
                (npa.sysid = au.npaddr_sysid)
          WHERE
                 au.party_sysid = cp_party_sysid;

          lc_get_conv_pa_dtl_rowtype     c_get_conv_postal_dtl%ROWTYPE;
          lc_get_conv_npa_dtl_rowtype    c_get_conv_non_postal_dtl%ROWTYPE;

BEGIN
    -- Trimming all the input variables to remove any leading and trailing spaces before processing.
       ls_panel_id := TRIM(ps_con_panel_code);

    -- If the Panel ID passed is only spaces. Then raise the Mandatory Parameter Exception.
       IF ls_panel_id IS NULL THEN
          RAISE exp_param_mandatory;
       END IF;

    -- Reading the data from the database for the Postal Address.
       OPEN c_get_conv_postal_dtl(ls_panel_id);
           FETCH c_get_conv_postal_dtl  INTO lc_get_conv_pa_dtl_rowtype;
       CLOSE c_get_conv_postal_dtl;

    -- If there is no postal address. Then raise the no records found exception.
      IF lc_get_conv_pa_dtl_rowtype.panel_code IS NULL THEN
        RAISE exp_no_records_found;
      END IF;

    -- Initializing the table type to send the data.
       rec_get_conv_dtl    := soa_tbl_conveyancer_dtls();
    -- Reading the data from the database for the Non-Postal Address.
      ln_party_sysid :=  lc_get_conv_pa_dtl_rowtype.ps_party_sysid;

      OPEN c_get_conv_non_postal_dtl(ln_party_sysid);
           FETCH c_get_conv_non_postal_dtl INTO lc_get_conv_npa_dtl_rowtype;
      CLOSE c_get_conv_non_postal_dtl;

    -- Starting the process to set the values in the table type for the conveyancer.
        rec_get_conv_dtl.extend;

        rec_get_conv_dtl(ln_index) := soa_obj_conveyancer_dtls(lc_get_conv_pa_dtl_rowtype.panel_code,
                                                               lc_get_conv_pa_dtl_rowtype.company_name,
                                                               lc_get_conv_pa_dtl_rowtype.address_line1,
                                                               lc_get_conv_pa_dtl_rowtype.address_line2,
                                                               lc_get_conv_pa_dtl_rowtype.address_line3,
                                                               lc_get_conv_pa_dtl_rowtype.address_line4,
                                                               lc_get_conv_pa_dtl_rowtype.address_line5,
                                                               lc_get_conv_pa_dtl_rowtype.postcode,
                                                               lc_get_conv_pa_dtl_rowtype.country_code,
                                                               lc_get_conv_pa_dtl_rowtype.addresstype_code,
                                                               lc_get_conv_npa_dtl_rowtype.telephone_num,
                                                               lc_get_conv_npa_dtl_rowtype.email_address,
                                                               lc_get_conv_npa_dtl_rowtype.fax_number
                                                              );


  EXCEPTION
    WHEN exp_param_mandatory THEN
         ybs_application_error(-20022, 'E00013# Mandatory Parameters Missing');

    WHEN exp_no_records_found THEN
         ybs_application_error(-20022,'E10709');

    WHEN OTHERS THEN
         ybs_application_error(-20001,SQLERRM ||' Error in soa_conveyancing_data.pr_val_conveyancer_dtls');
  END pr_val_conveyancer_dtls;

  PROCEDURE pr_search_conveyancers(   ps_company_name      IN VARCHAR2,
                                      ps_town              IN VARCHAR2,
                                      ps_postcode          IN VARCHAR2,
                                      ps_max_records       IN NUMBER,
                                      tab_soa_tbl_conv     OUT soa_tbl_conveyancer_dtls
                                   ) AS
  /* ******************************************************************************
      Name            : pr_search_conveyancers
      Purpose         : procedure to find the list of conveyancers that fulfill the
                        given search criteria and provide the Postal and Non-Postal
                        Details the conveyancers.
      Developer       : Soumya Ranjan (TCS)
  --------------------------------------------------------------------------------
      Update Log:

      Version         By               Date               Details
      1.00            Soumya Ranjan   21/03/18            FETR0016324: Orginal Version
  -------------------------------------------------------------------------------- */
   -- Local variable declaration
      ln_index                   NUMBER := 0;
      ln_record_count            NUMBER := 0;
      ls_company_name            VARCHAR2(120);
      ls_townname                VARCHAR2(35);
      ls_postcode                VARCHAR2(8);
      ln_party_sysid             NUMBER;
      ls_area_code               postal_addresses.area_code%TYPE;
      ls_district_code           postal_addresses.district_code%TYPE;
      ln_sector_code             postal_addresses.sector_code%TYPE;
      ls_unit_code               postal_addresses.unit_code%TYPE;


    -- Exceptions

      exp_param_mandatory                      EXCEPTION;
      exp_more_than_max_records                EXCEPTION;
      exp_no_matching_records                  EXCEPTION;

    -- Cursor to Get the Postal Address Details of the given conveyancer

        CURSOR c_search_conv_postal_dtl(cp_firmname      IN VARCHAR2,
                                        cp_town          IN VARCHAR2,
                                        cp_postcode      IN VARCHAR2,
                                        cp_area_code     IN VARCHAR2,
                                        cp_district_code IN VARCHAR2,
                                        cp_sector_code   IN NUMBER,
                                        cp_unit_code     IN VARCHAR2 ) IS
        SELECT DISTINCT
               TRIM(oypm.refno)      panel_code,
               oypm.party_sysid      ps_party_sysid,
               TRIM(pa.party_name)   company_name,
               TRIM(pad.line1)       address_line1,
               TRIM(pad.line2)       address_line2,
               TRIM(pad.line3)       address_line3,
               TRIM(pad.line4)       address_line4,
               TRIM(pad.line5)       address_line5,
               pad.area_code || pad.district_code || ' ' ||TO_CHAR(pad.sector_code) || pad.unit_code postcode,
               TRIM(pad.cntry_code)  country_code,
               TRIM(pad.adtyp_code)  addresstype_code
          FROM      -- All Join conditions (Till MVIEW) are replicated as we want to look at the latest data when fetching from database.
                    -- There are some conditions when a Panelist can get deactivated between MV refresh and Conveyancer Search
                    other_ybs_panel_memberships oypm
               JOIN applied_party_panel_statuses apps ON
                    (oypm.sysid = apps.party_panel_sysid)
               JOIN parties pa ON
                    (pa.sysid = oypm.party_sysid)
               JOIN address_usages au ON
                    (au.party_sysid = pa.sysid)
               JOIN postal_addresses pad ON
                    (pad.sysid = au.pstadd_sysid)
               JOIN mv_valid_conveyancers mv ON
                    (mv.oypm_refno = TRIM(oypm.refno) AND
                     mv.party_sysid = oypm.party_sysid AND
                     mv.pstadd_sysid = pad.sysid)
          WHERE
                  apps.pps_code IN ('CON01','CON02','CON03','CON04','CON05','CON06')  -- Using Hardcoded Values as defined in the TDD
              AND oypm.ybspan_code = 'CON'                                            -- Using Hardcoded Values as defined in the TDD
              AND apps.party_panel_ind = 'O'                                          -- Using Hardcoded Values as defined in the TDD
              AND au.addfun_code = 'CORR'                                             -- Using Hardcoded Values as defined in the TDD
              AND EXISTS ( SELECT NULL
                           FROM client_bank_accounts cba
                           WHERE cba.oybspm_sysid = oypm.sysid
                           AND cba.end_date IS NULL)
              AND apps.end_date IS NULL
              AND pa.ended_date IS NULL
              AND oypm.end_date IS NULL
              AND au.end_date   IS NULL
              AND (cp_firmname IS NULL OR  mv.party_name = UPPER(cp_firmname))
              AND (cp_town     IS NULL OR (mv.address)  LIKE UPPER('%'||cp_town||'%'))
              AND (cp_postcode IS NULL OR (mv.area_code     = cp_area_code AND
                                           mv.district_code = cp_district_code AND
                                           mv.sector_code   = cp_sector_code AND
                                           mv.unit_code     = cp_unit_code ))
              ;

          TYPE tc_search_conv_dtl_typ IS TABLE OF c_search_conv_postal_dtl%ROWTYPE;
          tab_search_conv_pa_dtl   tc_search_conv_dtl_typ := tc_search_conv_dtl_typ();

    -- Cursor to Get the Non Postal Address Details of the given conveyancer

          CURSOR c_search_conv_npa_dtl(cp_party_sysid IN NUMBER) IS
          SELECT
                 MAX(CASE WHEN npa.adtyp_code = 'TEL'   THEN npa.addr END)   AS telephone_num
                ,MAX(CASE WHEN npa.adtyp_code = 'EMAIL' THEN npa.addr END)   AS email_address
                ,MAX(CASE WHEN npa.adtyp_code = 'FAX'   THEN npa.addr END)   AS fax_number
          FROM  address_usages au JOIN non_postal_addresses npa ON
                (npa.sysid = au.npaddr_sysid)
          WHERE
                 au.party_sysid = cp_party_sysid;

          lc_search_conv_npa_dtl_rowtype    c_search_conv_npa_dtl%ROWTYPE;

   BEGIN
    -- Trimming all the input variables to remove any leading and trailing spaces before processing.
      ls_company_name     := TRIM(ps_company_name);
      ls_townname         := TRIM(ps_town);
      ls_postcode         := UPPER(TRIM(ps_postcode));

    -- If the Company Name, Town Name and Postcode  passed is only spaces. Then raise the Mandatory Parameter Exception.
       IF ls_company_name IS NULL AND ls_townname IS NULL AND ls_postcode IS NULL  THEN
          RAISE exp_param_mandatory;
       END IF;

       IF ls_postcode IS NOT NULL AND NOT pr_postcode.valid_postcode_format(ls_postcode, ls_area_code, ls_district_code, ln_sector_code, ls_unit_code) THEN
           RAISE exp_param_mandatory;
       END IF;
       tab_soa_tbl_conv    := soa_tbl_conveyancer_dtls();

    -- Reading the data from the database for the Postal Address with the given parameters.
       OPEN c_search_conv_postal_dtl(ls_company_name, ls_townname, ls_postcode, ls_area_code, ls_district_code, ln_sector_code, ls_unit_code );
            FETCH c_search_conv_postal_dtl
            BULK COLLECT INTO tab_search_conv_pa_dtl;
       CLOSE c_search_conv_postal_dtl;

    --  Assigning the number of records to a variable to validate with records wanted.
       ln_record_count := tab_search_conv_pa_dtl.count();

       IF ln_record_count = 0 THEN
          RAISE exp_no_matching_records;
       END IF;

    --  As Per the TDD we would get 20 as the Parameter.
    --  However, we are having ps_max_records as a variable to handle issues if the same is changed in future.
    --  If we get more than the number of records requested, then we need to raise error
       IF ln_record_count > nvl(ps_max_records,0) THEN
          RAISE exp_more_than_max_records;
       END IF;

    -- Adding the non postal details to the records to complete the output.
       WHILE ln_index < ln_record_count LOOP

             ln_index := ln_index+1;                       -- Increasing the index to hold the additional value
             tab_soa_tbl_conv.extend();                    -- Extending the table to hold the additional data

    -- Assigning the Party Sysid to a local variable to search the database for the Non-Postal Address.
             ln_party_sysid :=  tab_search_conv_pa_dtl(ln_index).ps_party_sysid;

    -- Reading the data from the database for the Non-Postal Address.
             OPEN c_search_conv_npa_dtl(ln_party_sysid);
                  FETCH c_search_conv_npa_dtl INTO lc_search_conv_npa_dtl_rowtype;
             CLOSE c_search_conv_npa_dtl;

             tab_soa_tbl_conv(ln_index) := soa_obj_conveyancer_dtls(tab_search_conv_pa_dtl(ln_index).panel_code,
                                                                    tab_search_conv_pa_dtl(ln_index).company_name,
                                                                    tab_search_conv_pa_dtl(ln_index).address_line1,
                                                                    tab_search_conv_pa_dtl(ln_index).address_line2,
                                                                    tab_search_conv_pa_dtl(ln_index).address_line3,
                                                                    tab_search_conv_pa_dtl(ln_index).address_line4,
                                                                    tab_search_conv_pa_dtl(ln_index).address_line5,
                                                                    tab_search_conv_pa_dtl(ln_index).postcode,
                                                                    tab_search_conv_pa_dtl(ln_index).country_code,
                                                                    tab_search_conv_pa_dtl(ln_index).addresstype_code,
                                                                    lc_search_conv_npa_dtl_rowtype.telephone_num,
                                                                    lc_search_conv_npa_dtl_rowtype.email_address,
                                                                    lc_search_conv_npa_dtl_rowtype.fax_number
                                                                   );
             END LOOP;

  EXCEPTION
    WHEN exp_param_mandatory THEN
         ybs_application_error(-20022, 'E00013# Mandatory Parameters Missing');

    WHEN exp_no_matching_records THEN
         ybs_application_error(-20022, 'E13636');

    WHEN exp_more_than_max_records THEN
         ybs_application_error(-20022, 'E26780');

    WHEN OTHERS THEN
         ybs_application_error(-20001,SQLERRM ||' Error in soa_conveyancing_data.pr_search_conveyancers');

  END pr_search_conveyancers;

END soa_conveyancing_data;
/
======================================================================================
CREATE OR REPLACE PACKAGE soa_mortgage_Soumya_wip AS
/* ******************************************************************************
      Name            : soa_mortgagecompletions
      Purpose         : This package will provide the activities related to the 
                        following in CORE
                        1) RELEASE OF FUNDS
                        2) CUSTOMER AND MORTGAGE ACCOUNT CREATION
                        3) CASE UPLOAD                        
      Latest Version  : 1.00 
      Feature Number  : FETR0016324 
    --------------------------------------------------------------------------------
     Change History:
      Version         Author            Date              Details
      1.0             Ekta Garg         16/04/18          Added ROF,Case Upload Procedures.
                      Soumya Ranjan     27/04/18          Added Customer and Mortgage Account Procedures.
                      Rajeev Ranjan     24/04/18          Added ROF,Case Upload procedures.
                      Deependra Ramawat 07/06/18          Added ROF,Case Upload Procedures.
                      Ekta Garg         27/08/18          Added ROF v0.8 changes.
  -------------------------------------------------------------------------------- */
 -- Below are for ROF
 PROCEDURE pr_insert_release_of_funds     (pn_mortgage_account_number         IN  NUMBER,
                                           pn_amount                          IN  NUMBER,
                                           pd_release_date                    IN  DATE,
                                           ps_transaction_method              IN  VARCHAR2,
                                           pn_payment_sysid                   IN  NUMBER,
                                           ps_rof_status_code                 IN  VARCHAR2,
                                           pn_cashback_amount                 IN  NUMBER,
                                           pd_completion_date                 IN  DATE,
                                           ps_notes                           IN  VARCHAR2,
                                           ps_sol_payee                       IN  VARCHAR2,
                                           ps_child_type                      IN  VARCHAR2,
                                           pn_cashback_rof_sysid              IN  NUMBER,
                                           pn_rof_sysid                       OUT NUMBER);
                                     
 PROCEDURE pr_insert_out_screen_convrstns (ps_unique_reference_number         IN  VARCHAR2,
                                           pn_osp_sysid                       IN  NUMBER,
                                           pn_remitter_party_sysid            IN  NUMBER,
                                           ps_financial_crime_alert_id        IN  VARCHAR2,
                                           ps_fcstat_code                     IN  VARCHAR2);  
                                          
/* -- Code Removed for removing the dependency on FCFFTF
  PROCEDURE pr_insert_out_screen_payments  (pt_actimize_pmt_screen_details     IN  soa_tbl_payment_screen_details,
                                           pn_payment_request_id              IN  NUMBER,
                                           ps_payment_request_table_id        IN  VARCHAR2,
                                           pn_rof_sysid                       IN  NUMBER,
                                           ps_payser_code                     IN  VARCHAR2,
                                           ps_internal_system_id              IN  VARCHAR2,
                                           ps_paypro_code                     IN  VARCHAR2,
                                           ps_is_foreign_payment              IN  VARCHAR2,
                                           pd_transaction_date                IN  DATE,
                                           pn_account_number                  IN  NUMBER,
                                           ps_beneficiary_name                IN  VARCHAR2,
                                           pn_beneficiary_account_number      IN  NUMBER,
                                           ps_beneficiary_sort_code           IN  VARCHAR2,
                                           ps_fcstat_code                     IN  VARCHAR2,
                                           pd_created_date                    IN  DATE,
                                           ps_created_by                      IN  VARCHAR2);
*/                                          
 PROCEDURE pr_initiate_release_of_funds   (pt_actimize_pmt_screen_details     IN  soa_tbl_payment_screen_details,
                                           ps_friendly_id                     IN  VARCHAR2,
                                           pn_mortgage_account_number         IN  NUMBER,
                                           ps_reference                       IN  VARCHAR2,
                                           pd_release_date                    IN  DATE,
                                           ps_transaction_method              IN  VARCHAR2,
                                           pn_remittance_amount               IN  NUMBER,
                                           pd_completion_date                 IN  DATE,
                                           ps_remittance_type                 IN  VARCHAR2,
                                           ps_primary_applicant_forename      IN  VARCHAR2,
                                           ps_primary_applicant_surname       IN  VARCHAR2,
                                           ps_payee_name                      IN  VARCHAR2,
                                           pn_beneficiary_account_number      IN  NUMBER,
                                           pn_beneficiary_sort_code           IN  NUMBER,
                                           pn_total_cashback_amount           IN  NUMBER);
 -- End ROF                                     

 -- Below are for Customer And Mortgage Account
 PROCEDURE pr_mso_get_loan_account        (ps_friendly_id                     IN  VARCHAR2, 
                                           ps_brand_code                      IN  VARCHAR2,
                                           ps_source_system                   IN  VARCHAR2,
                                           ps_user_id                         IN  VARCHAR2,
                                           pn_account_number                  OUT NUMBER);


 PROCEDURE pr_insert_cross_ref_ext_ids    (ps_source_unique_id                IN  VARCHAR2,
                                           ps_source_system                   IN  VARCHAR2,
                                           ps_attribute_name                  IN  VARCHAR2,
                                           ps_attribute_type                  IN  VARCHAR2,
                                           ps_attribute_cval                  IN  VARCHAR2,
                                           pn_attribute_nval                  IN  NUMBER,
                                           pd_attribute_dval                  IN  DATE,
                                           pd_created_date                    IN  DATE,
                                           ps_created_by                      IN  VARCHAR2);

 PROCEDURE pr_archive_cross_ref_ext_ids;

 -- Below are for Case Upload
 PROCEDURE pr_create_loan_account_dtls    (pn_account_number                  IN  NUMBER,
                                           ps_brand_code                      IN  VARCHAR2,
                                           pt_party_details                   IN  soa_tbl_party_details,
                                           pn_regd_pay_day                    IN  NUMBER,
                                           ps_pay_calc_mthd                   IN  VARCHAR2,
                                           pn_offset_sav_bal                  IN  NUMBER,
                                           pd_application_date                IN  DATE,
                                           ps_business_source                 IN  VARCHAR2,
                                           pt_loan_part_details               IN  soa_tbl_loanpt_details,
                                           /*ps_property_purpose                IN  VARCHAR2,*/
                                           ps_application_type                IN  VARCHAR2,
                                           ps_first_time_buyer                IN  VARCHAR2,
                                           ps_specialist_rep_req              IN  VARCHAR2,
                                           ps_declaration_completed           IN  VARCHAR2,
                                           ps_purtpe_code                     IN  VARCHAR2,
                                           pn_lease_term                      IN  NUMBER,
                                           ps_introducer_fee                  IN  VARCHAR2,
                                           pn_broker_fee_amount               IN  NUMBER,
                                           pn_broker_refund_amount            IN  NUMBER,
                                           pn_agreed_adv                      IN  NUMBER,
                                           pt_addr_dtls                       IN  soa_tbl_address_dtls,
                                           
                                           ps_bsac_stats_code                 IN  VARCHAR2,
                                           ps_prptyp_code                     IN  VARCHAR2,
                                           
                                           ps_registered_ind                  IN  VARCHAR2,
                                           pn_other_rooms                     IN  NUMBER,
                                           pd_orig_purch_date                 IN  DATE,
                                           ps_pct_code                        IN  VARCHAR2,
                                           pn_num_of_bedrooms                 IN  NUMBER,
                                           pn_year_built                      IN  NUMBER,
                                           pn_purch_price                     IN  NUMBER,
                                           /*pn_shared_percentage               IN  NUMBER,*/
                                           /*ps_shared_type                     IN  VARCHAR2,*/
                                           ps_roof_construction_code          IN  VARCHAR2,
                                           ps_prpttp_code                     IN  VARCHAR2,
                                           ps_title_number                    IN  VARCHAR2,
                                           ps_pbuset_code                     IN  VARCHAR2,
                                           ps_update_id                       IN  VARCHAR2,
                                           pd_update_date                     IN  DATE,
                                           pt_tbl_fee_details                 IN soa_tbl_fee_details,
                                           ps_payment_route_name              IN VARCHAR2,
                                           ps_payment_route_id                IN VARCHAR2,
                                           ps_intermediary_id                 IN VARCHAR2,
                                           pn_procuration_fee_amount          IN NUMBER,
                                           pd_completion_date                 IN DATE,
                                           ps_valuation_type                  IN VARCHAR2,
                                           pn_valuation_amount                IN NUMBER,
                                           pd_valuation_date                  IN DATE,
                                           ps_est_reinstatement_cost          IN VARCHAR2,
                                           ps_new_build_indicator             IN VARCHAR2,
                                           ps_equity_share_scheme             IN VARCHAR2
                                           );
                                           
                                           

 PROCEDURE pr_create_expected_payments    (pn_loan_account_number             IN  NUMBER,
                                           ps_update_id                       IN  VARCHAR2);
                      
 PROCEDURE pr_process_additional_details  (pn_loanac_accgrp_num               IN  NUMBER,
                                           ps_update_id                       IN  VARCHAR2
                                           );
                                            
 PROCEDURE pr_create_len_transactions     (pn_loanac_accgrp_num               IN  NUMBER,
                                           ps_update_id                       IN  VARCHAR2
                                           );                                            
                                                                                  

 PROCEDURE pr_activate_offset_account     (pn_loanac_accgrp_num               IN  NUMBER,
                                           ps_update_id                       IN VARCHAR2);

 -- End Case Upload
 
 -- Below are for ROF
 PROCEDURE pr_process_accrued_int         (pn_loanac_accgrp_num               IN  NUMBER);
 
   /* **************************************************************************************
  The following routines are wrappers for SOA services to access standard Core functionality.
  ------------------------------------------------------------------------------------------
  Version  By                 Date         Details
  -------- -----------------  -----------  -------------------------------------------------
  1.0      Ekta Garg          31-AUG-2018  FETR0016324: Initial versions
  ***************************************************************************************** */

 PROCEDURE pr_process_release_of_funds    (ps_brand_code                      IN VARCHAR2);

 PROCEDURE pr_insert_payments  
                                          (pn_mortgage_account_number         IN  NUMBER,
                                           pn_amount                          IN  NUMBER,
                                           pd_release_date                    IN  DATE,
                                           ps_transaction_method              IN  VARCHAR2,
                                           ps_payment_reason_code             IN  VARCHAR2,
                                           pn_payment_sysid                   OUT NUMBER
                                           );

 FUNCTION fn_calculate_accrued_interest     (pn_amount                          IN  NUMBER,
                                            pn_product_code                    IN  NUMBER,
                                            pd_release_date                    IN  DATE,
                                            pc_is_new_borrower                 IN  VARCHAR2
                                            )
RETURN NUMBER ;                                       

                                           
 PROCEDURE pr_insert_chaps               
                                          (pn_mortgage_account_number         IN  NUMBER,
                                           pn_amount                          IN  NUMBER,
                                           pd_sent_date                       IN  DATE,
                                           ps_branch_userid                   IN  VARCHAR2,
                                           pn_branch_transmitted              IN  NUMBER,
                                           ps_primary_applicant_surname       IN  VARCHAR2,
                                           ps_solicitor_code                  IN  VARCHAR2,
                                           ps_beneficiary_name                IN  VARCHAR2,
                                           pn_bank_account_number             IN  NUMBER,
                                           pn_sort_code                       IN  NUMBER,
                                           ps_status                          IN  VARCHAR2,
                                           ps_primary_applicant_forename      IN  VARCHAR2
                                           ); 
                                      
 PROCEDURE pr_update_release_of_funds     (pn_rof_sysid                       IN NUMBER,
                                           pn_payments_sysid                  IN NUMBER,
                                           pd_release_date                    IN DATE,
                                           ps_rof_status_code                 IN VARCHAR2,
                                           pd_completion_date                 IN DATE,
                                           ps_notes                           IN VARCHAR2,
                                           ps_update_id                       IN VARCHAR2
                                           );
                                           
 PROCEDURE pr_process_accrued_interest     (pn_mortgage_account_number IN NUMBER,
                                            pd_release_date            IN DATE,
                                            ps_is_new_borrower         IN VARCHAR2
                                            ); 

 PROCEDURE pr_post_savings_cashback     (pn_mortgage_account_number IN NUMBER,
                                         ps_regression_ind          IN VARCHAR2
                                        );
 
 -- End ROF                                            
 
 -- Below are for Case Upload                                          
 PROCEDURE  pr_create_fee_transactions     (pn_loanac_accgrp_num       IN NUMBER,
                                            ps_update_id               IN VARCHAR2
                                            );
   
 
 FUNCTION   fn_check_rof_status            (pn_loanac_accgrp_num       IN NUMBER
                                            ) RETURN DATE ;
 
 PROCEDURE pr_update_corr_address          (pn_loanac_accgrp_num       IN NUMBER,
                                            pt_party_details           IN soa_tbl_party_details
                                            );
                                           
 FUNCTION fn_is_mso_mortgage               (pn_loanac_accgrp_num IN NUMBER) 
 
 RETURN VARCHAR2;
 
 PROCEDURE pr_process_post_rof             (pn_loanac_accgrp_num       IN NUMBER,
                                            ps_update_id               IN VARCHAR2
                                            );  
 PROCEDURE pr_create_identifications        (pn_party_sysid            NUMBER, 
                                             pt_identifications        soa_tbl_identifications,
                                             ps_created_at             VARCHAR2,
                                             ps_created_by             VARCHAR2
                                             ); 
 PROCEDURE pr_populate_commission_dtls     (pn_loanac_accgrp_num      NUMBER,
                                             ps_payment_route_name     VARCHAR2,
                                             ps_payment_route_id       VARCHAR2,
                                             ps_intermediary_id        VARCHAR2,
                                             pn_procuration_fee_amount NUMBER,
                                             pd_completion_date        DATE
                                             ); 
 PROCEDURE pr_create_events                (pn_loanac_accgrp_num         IN  NUMBER,
                                            ps_valuation_type            IN  VARCHAR2,
                                            ps_update_id                 IN  VARCHAR2
                                            );
 PROCEDURE pr_create_hastening_schedule    (pn_loanac_accgrp_num     IN  NUMBER,
                                            ps_bsac_stats_code       IN  VARCHAR2,
                                            ps_update_id             IN  VARCHAR2
                                            );    
                                            
 PROCEDURE pr_set_loanacc_status           (pn_loanac_accgrp_num   IN  NUMBER) ;                                                                                                                                                                                                                                                                 
                                                                                                                                 
  -- End Case Upload                                                                                                                                                                           
END soa_mortgage_Soumya_wip;
/
CREATE OR REPLACE PACKAGE BODY soa_mortgage_Soumya_wip AS


    gn_loanac_accgrp_type        account_groups.accgrp_type%TYPE;
    gn_loanac_latype_code        payment_methods.loanac_latype_code%TYPE;
    gs_ept_sysmor                expected_payments.ept_code%TYPE;
    gs_epcr_inlrof               expected_payments.epcr_code%TYPE;
    gs_epcr_prmfrq_monthly       expected_payments.epcr_code%TYPE;
    gs_actply_table_id           global_values.global_cvalue%TYPE;
    gs_lasttp_cmplet             global_values.global_cvalue%TYPE;
    gs_loaptp_code               global_values.global_cvalue%TYPE;
    gs_pertyp_socyr              global_values.global_cvalue%TYPE;
    gs_lps_open                  global_values.global_cvalue%TYPE;
    gs_mso_loanac_attribute_name global_values.global_cvalue%TYPE;
    gs_mso_brand_attribute_name  global_values.global_cvalue%TYPE;
    gs_mor_admin_branch          global_values.global_cvalue%TYPE;
    gs_lasttp_rofpen             global_values.global_cvalue%TYPE;
    gs_lps_rofpen                global_values.global_cvalue%TYPE;
    gs_mso_source_system_value   global_values.global_cvalue%TYPE;


/* ******************************************************************************
      Name            : soa_mortgagecompletions
      Purpose         : This package will provide the activities related to the 
                        following in CORE
                        1) RELEASE OF FUNDS
                        2) CUSTOMER AND MORTGAGE ACCOUNT CREATION
                        3) CASE UPLOAD                        
      Developer       : TCS
      Latest Version  : 1.00 
      Feature Number  : FETR0016324 
    --------------------------------------------------------------------------------
      Change History:
      Version         Author            Date              Details
      1.0             Ekta Garg         16/04/18          Added ROF,Case Upload Procedures.
                      Soumya Ranjan     27/04/18          Added Customer and Mortgage Account Procedures.
                      Rajeev Ranjan     24/04/18          Added ROF,Case Upload procedures.
                      Deependra Ramawat 07/06/18          Added ROF,Case Upload Procedures.
                      Ekta Garg         27/08/18          Added ROF v0.8 changes.
  -------------------------------------------------------------------------------- */
 PROCEDURE pr_insert_release_of_funds    
                                     (pn_mortgage_account_number         IN  NUMBER,
                                      pn_amount                          IN  NUMBER,
                                      pd_release_date                    IN  DATE,
                                      ps_transaction_method              IN  VARCHAR2,
                                      pn_payment_sysid                   IN  NUMBER,
                                      ps_rof_status_code                 IN  VARCHAR2,
                                      pn_cashback_amount                 IN  NUMBER,
                                      pd_completion_date                 IN  DATE,
                                      ps_notes                           IN  VARCHAR2,
                                      ps_sol_payee                       IN  VARCHAR2,
                                      ps_child_type                      IN  VARCHAR2,
                                      pn_cashback_rof_sysid              IN  NUMBER,
                                      pn_rof_sysid                       OUT NUMBER
                                      )                            
    /* ******************************************************************************
          Name            : pr_insert_releaseoffunds
          Purpose         : This procedure will  insert records into release_of_funds table.
          Developer       : Rajeev Ranjan (TCS)
    --------------------------------------------------------------------------------
          Update Log:
    
          Version         By               Date              Details
          1.00            Rajeev Ranjan   24/04/18           Orginal Version
    -------------------------------------------------------------------------------- */
    IS
    -- Local variable declaration
    ls_parameter        VARCHAR2(30);
    ln_rof_sysid        NUMBER;
    
    -- Exceptions
    exp_param_mandatory EXCEPTION;
  
  BEGIN
    -- Validating input parameters
    IF pn_mortgage_account_number <=0 OR 
       pn_mortgage_account_number IS NULL THEN
       ls_parameter := 'Mortgage Account Number';
       RAISE exp_param_mandatory;
    ELSIF pn_amount IS NULL THEN
       ls_parameter := 'Amount';
       RAISE exp_param_mandatory;
    ELSIF ps_transaction_method IS NULL THEN
       ls_parameter := 'Transaction Method';
       RAISE exp_param_mandatory;
    ELSIF ps_rof_status_code IS NULL THEN
       ls_parameter := 'ROF Status Code';
       RAISE exp_param_mandatory;
    END IF;
    
    ln_rof_sysid := pack_sequence.fn_next_number('rof_sysid_seq');
    
    INSERT INTO release_of_funds
      (sysid,
       txnmth_method,
       pay_sysid,
       account_number,
       start_date,
       created_id,
       created_date,
       completion_date,
       update_id,
       update_time,
       rofsta_code,
       release_amount,
       release_date,
       notes,
       sol_payee,
       cashback_product_amount,
       child_type,
       rof_sysid)
    VALUES
      (ln_rof_sysid,
       ps_transaction_method,
       pn_payment_sysid,
       pn_mortgage_account_number,
       SYSDATE,
       gs_mso_source_system_value,    
       SYSDATE,
       pd_completion_date,
       gs_mso_source_system_value,    
       SYSDATE,
       ps_rof_status_code,   
       pn_amount,
       pd_release_date,
       ps_notes,
       ps_sol_payee,
       pn_cashback_amount,
       ps_child_type,
       pn_cashback_rof_sysid);
       
       pn_rof_sysid := ln_rof_sysid;
     
   EXCEPTION
     WHEN exp_param_mandatory THEN
       ybs_application_error(-20022, 
                              'E00013# Mandatory Parameters Either Missing  - '
                              || ls_parameter);
     WHEN OTHERS THEN
       ybs_application_error(-20001,
                              'Error in soa_mortgagecompletions.pr_insert_releaseoffunds - ' 
                              ||SQLERRM );

 END pr_insert_release_of_funds;
 
 PROCEDURE pr_insert_out_screen_convrstns 
                                     (ps_unique_reference_number         IN  VARCHAR2,
                                      pn_osp_sysid                       IN  NUMBER,
                                      pn_remitter_party_sysid            IN  NUMBER,
                                      ps_financial_crime_alert_id        IN  VARCHAR2,
                                      ps_fcstat_code                     IN  VARCHAR2
                                      )  
    /* ******************************************************************************
         Name            : pr_insert_out_screen_convrstns
         Purpose         : This procedure will be called to make applicants level screening 
                           outcome into outbound_screening_convrstns table.
         Developer       : Rajeev Ranjan (TCS)
    --------------------------------------------------------------------------------
         Update Log:
    
         Version         By               Date              Details
         1.00            Rajeev Ranjan   06/06/18           Orginal Version
    -------------------------------------------------------------------------------- */
     IS
     -- Local variable declaration
     ls_parameter        VARCHAR2(30);
   
     -- Exceptions
     exp_param_mandatory EXCEPTION;
  
   BEGIN
     -- Validate the input parameters
     IF ps_unique_reference_number IS NULL THEN
        ls_parameter := 'Unique Reference Number';
        RAISE exp_param_mandatory;
     ELSIF pn_osp_sysid <=0 OR pn_osp_sysid IS NULL THEN
        ls_parameter := 'osp_sysid';
        RAISE exp_param_mandatory;
     ELSIF pn_remitter_party_sysid IS NULL THEN
        ls_parameter := 'Remitter Party Sysid';
        RAISE exp_param_mandatory;
     ELSIF ps_fcstat_code IS NULL THEN
        ls_parameter := 'fcstat_code';
        RAISE exp_param_mandatory;
     END IF;
    
     INSERT INTO outbound_screening_convrstns
       (unique_reference_number,
        osp_sysid,
        remitter_party_sysid,
        financial_crime_alert_id,
        fcstat_code
        )
     VALUES
       (ps_unique_reference_number,
        pn_osp_sysid,
        pn_remitter_party_sysid,
        ps_financial_crime_alert_id,
        ps_fcstat_code
        );

   EXCEPTION
     WHEN exp_param_mandatory THEN
       ybs_application_error(-20022, 
                              'E00013# Mandatory Parameters Either Missing Or Invalid - '              
                              || ls_parameter);
     WHEN OTHERS THEN
       ybs_application_error(-20001,
                              'Error in soa_mortgagecompletions.pr_insert_out_screen_convrstns - '  
                              ||SQLERRM );
    
 END pr_insert_out_screen_convrstns;

/*  -- Code Removed for removing the dependency on FCFFTF
  PROCEDURE pr_insert_out_screen_payments 
                                     (pt_actimize_pmt_screen_details     IN  soa_tbl_payment_screen_details,
                                      pn_payment_request_id              IN  NUMBER,
                                      ps_payment_request_table_id        IN  VARCHAR2,
                                      pn_rof_sysid                       IN  NUMBER,
                                      ps_payser_code                     IN  VARCHAR2,
                                      ps_internal_system_id              IN  VARCHAR2,
                                      ps_paypro_code                     IN  VARCHAR2,
                                      ps_is_foreign_payment              IN  VARCHAR2,
                                      pd_transaction_date                IN  DATE,
                                      pn_account_number                  IN  NUMBER,
                                      ps_beneficiary_name                IN  VARCHAR2,
                                      pn_beneficiary_account_number      IN  NUMBER,
                                      ps_beneficiary_sort_code           IN  VARCHAR2,
                                      ps_fcstat_code                     IN  VARCHAR2,
                                      pd_created_date                    IN  DATE,
                                      ps_created_by                      IN  VARCHAR2
                                      )
    \* ******************************************************************************
        Name            : pr_insert_out_screen_payments
        Purpose         : This procedure will be called to make payment level screening 
                          outcome into outbound_screening_payments table.
        Developer       : Rajeev Ranjan (TCS)
    --------------------------------------------------------------------------------
        Update Log:
    
        Version         By                   Date               Details
        0.1            Rajeev Ranjan        07/06/2018          Orginal Version
    -------------------------------------------------------------------------------- *\
   IS
   -- Local variable declaration
   ln_screen_payments_sysid       NUMBER;
    
   ls_parameter                   VARCHAR2(30);
   ls_convrstns_status            VARCHAR2(6);
   ls_payment_status              VARCHAR2(6);
    
   -- Exception declaration
   exp_param_mandatory            EXCEPTION;
  
 BEGIN
   -- Validate input parameters
   IF pn_payment_request_id <=0 OR 
      pn_payment_request_id IS NULL THEN
      ls_parameter := 'payment_request_id';
      RAISE exp_param_mandatory;
   ELSIF ps_payment_request_table_id IS NULL THEN
      ls_parameter := 'payment_request_table_id';
      RAISE exp_param_mandatory;
   ELSIF pn_rof_sysid IS NULL THEN
      ls_parameter := 'release_of_funds_sysid';
      RAISE exp_param_mandatory;
   ELSIF ps_payser_code IS NULL THEN
      ls_parameter := 'payment_service_type_code';
      RAISE exp_param_mandatory;
   ELSIF ps_internal_system_id IS NULL THEN
      ls_parameter := 'internal_system_id';
      RAISE exp_param_mandatory;
   ELSIF ps_paypro_code IS NULL THEN
      ls_parameter := 'payment_process_type_code';
      RAISE exp_param_mandatory;
   ELSIF ps_is_foreign_payment IS NULL THEN
      ls_parameter := 'foreign payment';
      RAISE exp_param_mandatory;
   ELSIF pd_transaction_date IS NULL THEN
      ls_parameter := 'transaction_date';
      RAISE exp_param_mandatory;
   ELSIF pn_account_number <=0 OR 
      pn_account_number IS NULL THEN
      ls_parameter := 'account_number';
      RAISE exp_param_mandatory;
    --Used TRIM in names to remove blank entry
   ELSIF TRIM(ps_beneficiary_name) IS NULL THEN
      ls_parameter := 'beneficiary_name';
      RAISE exp_param_mandatory;
   ELSIF pn_beneficiary_account_number <=0 OR 
      pn_beneficiary_account_number IS NULL THEN
      ls_parameter := 'beneficiary_account_number';
      RAISE exp_param_mandatory;
   ELSIF ps_beneficiary_sort_code IS NULL THEN
      ls_parameter := 'beneficiary_sort_code';
      RAISE exp_param_mandatory;
   ELSIF ps_fcstat_code IS NULL THEN
      ls_parameter := 'financial_crime_status_code';
      RAISE exp_param_mandatory;
   ELSIF pd_created_date IS NULL THEN
      ls_parameter := 'created_date';
      RAISE exp_param_mandatory;
   ELSIF ps_created_by IS NULL THEN
      ls_parameter := 'created_by';
      RAISE exp_param_mandatory;
   END IF;
    
   ln_screen_payments_sysid := pack_sequence.fn_next_number('osp_sysid_seq');
       
   INSERT INTO outbound_screening_payments
      (sysid,
       payment_request_id,
       payment_request_table_id,
       rof_sysid,
       payser_code,
       internal_system_id,
       paypro_code,
       is_foreign_payment,
       transaction_date,
       account_number,
       beneficiary_name,
       beneficiary_account_number,
       beneficiary_sort_code,
       fcstat_code,
       created_date,
       created_by
       )
   VALUES
      (ln_screen_payments_sysid,
       pn_payment_request_id,
       ps_payment_request_table_id,
       pn_rof_sysid,
       ps_payser_code,
       ps_internal_system_id,
       ps_paypro_code,
       ps_is_foreign_payment,
       pd_transaction_date,
       pn_account_number,
       TRIM(ps_beneficiary_name),
       pn_beneficiary_account_number,
       ps_beneficiary_sort_code,
       ps_fcstat_code,
       pd_created_date,
       ps_created_by
       );
     --Used TRIM in names to remove blank spaces from the beginning/end of names
   
   --The value of the financial_crime_status_code in outbound_screening_payments is updated on the 
   --condition of the value of the screen_hit for each applicant in the pt_actimize_pmt_screen_details.*\
   FOR i IN pt_actimize_pmt_screen_details.FIRST .. pt_actimize_pmt_screen_details.LAST 
    LOOP
        IF pt_actimize_pmt_screen_details(i).screening_hit IN ('Y', 'N') AND 
           pt_actimize_pmt_screen_details(i).screening_alert = 'N' THEN
           ls_convrstns_status := 'RELEAS';
        ELSE
           ls_convrstns_status := 'DEFERD';
           ls_payment_status := 'DEFERD';
        END IF;
    
   --Procedure invoked to create applicant level screening entry
   --into outbound_screening_convrstns
        soa_mortgagecompletions_WIP.pr_insert_out_screen_convrstns
                                                        (pt_actimize_pmt_screen_details(i).unique_reference_number,
                                                         ln_screen_payments_sysid,
                                                         0,
                                                         pt_actimize_pmt_screen_details(i).alert_id,
                                                         ls_convrstns_status
                                                         );
    END LOOP;
    
    IF ls_payment_status = 'DEFERD' THEN
       UPDATE outbound_screening_payments
       SET fcstat_code = 'DEFERD'
       WHERE sysid = ln_screen_payments_sysid;
   END IF;  
      
   EXCEPTION
     WHEN exp_param_mandatory THEN
       ybs_application_error(-20022, 
                              'E00013# Mandatory Parameters Missing - '  
                              || ls_parameter);
     WHEN OTHERS THEN
       ybs_application_error(-20001,
                             'Error in soa_mortgagecompletions.pr_insert_out_screen_payments - ' 
                              ||SQLERRM );
      
 END pr_insert_out_screen_payments;*/

  PROCEDURE pr_initiate_release_of_funds  (pt_actimize_pmt_screen_details     IN  soa_tbl_payment_screen_details,
                                           ps_friendly_id                     IN  VARCHAR2,
                                           pn_mortgage_account_number         IN  NUMBER,
                                           ps_reference                       IN  VARCHAR2,
                                           pd_release_date                    IN  DATE,
                                           ps_transaction_method              IN  VARCHAR2,
                                           pn_remittance_amount               IN  NUMBER,
                                           pd_completion_date                 IN  DATE,
                                           ps_remittance_type                 IN  VARCHAR2,
                                           ps_primary_applicant_forename      IN  VARCHAR2,
                                           ps_primary_applicant_surname       IN  VARCHAR2,
                                           ps_payee_name                      IN  VARCHAR2,
                                           pn_beneficiary_account_number      IN  NUMBER,
                                           pn_beneficiary_sort_code           IN  NUMBER,
                                           pn_total_cashback_amount           IN  NUMBER) 

  /* ************************************************************************************************
  Name            : pr_initiate_releaseoffunds
  Purpose         : Procedure to store payment records in ROF table and payment screening specific
                    details under Financial crime team tables.
  Developer       : DEEPENDRA KUMAR RAMAWAT (TCS)
  ---------------------------------------------------------------------------------------------------
  Update Log:
  Version          By                  Date              Details
  1.0             DEEPENDRA KUMAR      07-June-2018      Original version
                  RAMAWAT (TCS)      
  ---------------------------------------------------------------------------------------------------
  ************************************************************************************************ */
  IS
  --Local variable declaration
  ls_parameter          VARCHAR2(30);
  ln_pmt_screen_cnt     NUMBER;

  ln_rof_sysid release_of_funds.sysid%TYPE;
  --Exceptions  declaration
  exp_param_mandatory EXCEPTION;

 BEGIN
   
  --Validating mandatory parameters
     ln_pmt_screen_cnt := NVL(CARDINALITY(pt_actimize_pmt_screen_details),0);
 /* -- Code Removed for removing the dependency on FCFFTF
    IF ln_pmt_screen_cnt IS NULL OR ln_pmt_screen_cnt = 0 THEN
       ls_parameter := 'Actimize Payment Screen Details';
       RAISE exp_param_mandatory;
    END IF;
*/
    IF ps_friendly_id IS NULL THEN
       ls_parameter := 'MSO Friendly Id';
       RAISE exp_param_mandatory;
    ELSIF ps_transaction_method IS NULL THEN
       ls_parameter := 'Transaction Method';
       RAISE exp_param_mandatory;
    ELSIF ps_remittance_type IS NULL THEN
       ls_parameter := 'Remitance Type';
       RAISE exp_param_mandatory;
    --Used TRIM in names to remove blank entry
    ELSIF TRIM(ps_primary_applicant_forename) IS NULL THEN
       ls_parameter := 'Primary Applicant Forename';
       RAISE exp_param_mandatory;
    --Used TRIM in names to remove blank entry
    ELSIF TRIM(ps_primary_applicant_surname) IS NULL THEN
       ls_parameter := 'Primary Applicant Surname';
       RAISE exp_param_mandatory;
    --Used TRIM in names to remove blank entry
    ELSIF TRIM(ps_payee_name) IS NULL THEN
       ls_parameter := 'Payee Name';
       RAISE exp_param_mandatory;
    ELSIF pd_completion_date IS NULL THEN
       ls_parameter := 'Completion Date';
       RAISE exp_param_mandatory;
    ELSIF pn_mortgage_account_number <=0 OR pn_mortgage_account_number IS NULL THEN
       ls_parameter := 'Mortgage Account Number';
       RAISE exp_param_mandatory;
    ELSIF pn_remittance_amount <=0 OR pn_remittance_amount IS NULL THEN
       ls_parameter := 'Remitance Amount';
       RAISE exp_param_mandatory;
    ELSIF pn_beneficiary_account_number <=0 OR pn_beneficiary_account_number IS NULL THEN
       ls_parameter := 'beneficiary_account_number';
       RAISE exp_param_mandatory;
    ELSIF pn_beneficiary_sort_code <=0 OR pn_beneficiary_sort_code IS NULL THEN
       ls_parameter := 'Beneficiary Sort Code';
       RAISE exp_param_mandatory;
    ELSIF pn_total_cashback_amount IS NULL THEN
       ls_parameter := 'Cashback Amount';
       RAISE exp_param_mandatory;
    END IF;

    IF UPPER(ps_transaction_method) IN ('CHAPS','CHP') THEN
 
    --Invoking the procedure to insert data into release_of_funds table
    -- and generating sysid(pn_releaseoffunds_sysid).
    soa_mortgagecompletions_WIP.pr_insert_release_of_funds(pn_mortgage_account_number,
                                                       pn_remittance_amount,
                                                       pd_release_date,
                                                       pack_header.fn_get_global('GS_TXNMTH_CHAPS'),
                                                       NULL,
                                                       'ROFRDY',
                                                       0,
                                                       pd_completion_date,
                                                       ps_reference,
                                                       TRIM(ps_payee_name),
                                                       NULL,
                                                       NULL,
                                                       ln_rof_sysid);
    --Used TRIM in names to remove blank spaces from the beginning/end of names 
    
    --Invoking the procedure to insert the data into outbound_screening_payments
    -- outbound_screening_convrstns tables.
/*  -- Code Removed for removing the dependency on FCFFTF
      soa_mortgagecompletions_WIP.pr_insert_out_screen_payments(pt_actimize_pmt_screen_details,
                                                            ln_rof_sysid,
                                                            'ROF',
                                                            ln_rof_sysid,
                                                            'CHAPS',
                                                            'YBS',
                                                            gs_mso_source_system_value,
                                                            'N',
                                                            SYSDATE,
                                                            pn_mortgage_account_number,
                                                            TRIM(ps_payee_name),
                                                            pn_beneficiary_account_number,
                                                            pn_beneficiary_sort_code,
                                                            'RELEAS',
                                                            SYSDATE,
                                                            gs_mso_source_system_value);
*/
    --Used TRIM in names to remove blank spaces from the beginning/end of names
    
    --Invoking the procedure for inserting cashback details
      pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_friendly_id,
                                                gs_mso_source_system_value,
                                                'CASHBACK',
                                                'NUMBER',
                                                NULL,
                                                pn_total_cashback_amount,
                                                NULL,
                                                SYSDATE,
                                                gs_mso_source_system_value);
    --Invoking the procedure for inserting surname details
      pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_friendly_id,
                                                gs_mso_source_system_value,
                                                'SURNAME',
                                                'CHAR',
                                                TRIM(ps_primary_applicant_surname),
                                                NULL,
                                                NULL,
                                                SYSDATE,
                                                gs_mso_source_system_value);
    
    --Invoking the procedure for inserting forename details
      pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_friendly_id,
                                                gs_mso_source_system_value,
                                                'FORENAME',
                                                'CHAR',
                                                TRIM(ps_primary_applicant_forename),
                                                NULL,
                                                NULL,
                                                SYSDATE,
                                                gs_mso_source_system_value);
    --Used TRIM in names to remove blank spaces from the beginning/end of names
    END IF;

 EXCEPTION
     WHEN exp_param_mandatory THEN
          ybs_application_error(-20022,'E00013# Mandatory Parameters Missing :- ' ||ls_parameter);
     WHEN OTHERS THEN
          ybs_application_error(-20001,'Error in pr_initiate_releaseoffunds :- ' || SQLERRM);
  
 END pr_initiate_release_of_funds;
 
 
 PROCEDURE pr_mso_get_loan_account   
                                     (ps_friendly_id                     IN  VARCHAR2, 
                                      ps_brand_code                      IN  VARCHAR2,
                                      ps_source_system                   IN  VARCHAR2,
                                      ps_user_id                         IN  VARCHAR2,
                                      pn_account_number                  OUT NUMBER
                                      )AS
  /* ******************************************************************************
      Name            : pr_mso_get_loan_account
      Purpose         : Create customer records in CORE
      Developer       : Soumya Ranjan (TCS)
    -----------------------------------------------------------------------------------
      Update Log:
        Version  By                 Date        Details
       -------- -----------------  -----------  ----------------------------
        1.0      Soumya Ranjan(TCS) 27-APR-2018 FETR0016324:
                                                Procedure to create or allocate a mortgage account 
                                                number CORE using data provided by MSO 
                                                fulfilling SOA Service requirements.
    -----------------------------------------------------------------------------------
    ********************************************************************************** */
   -- Local variable declaration
      ls_friendly_id         VARCHAR2(50);
      ls_brand_code          VARCHAR2(8);
      ln_account_number      NUMBER;
      ln_xrefcusaccs_sysid   NUMBER;
      ls_parameter           VARCHAR2(30);
      ls_source_system       cross_reference_external_ids.source_system%TYPE;
      ls_user_id             cross_reference_external_ids.created_by%TYPE;
      ld_day                 DATE := SYSDATE;
      ld_today               DATE := TRUNC(ld_day);
   
   -- Exceptions
      exp_param_mandatory               EXCEPTION;
   -- Cursor to Get the Loan Account Number for the Friendly Id, brand code  
    
       CURSOR c_get_acc_num(cs_friendly_id IN VARCHAR2, cs_attribute_name IN VARCHAR2, cs_source_system IN VARCHAR2) IS
       SELECT                                   
              cred.attribute_nval 
       FROM   cross_reference_external_ids cred
      WHERE  cred.source_unique_id  = cs_friendly_id AND
              cred.source_system     = cs_source_system AND
              cred.attribute_name    = cs_attribute_name AND
              cred.ended_date IS NULL;
       
 BEGIN
   -- Trimming the varchar2 variables to use in further processing.    
       ls_friendly_id    := TRIM(ps_friendly_id);
       ls_brand_code     := TRIM(ps_brand_code);
       ls_source_system  := TRIM(ps_source_system);
       ls_user_id        := TRIM(ps_user_id);
      
   -- Raising the exception if any of the mandatory parameters is null 
       IF ls_friendly_id IS NULL THEN
          ls_parameter:='mso_friendly_id';
          RAISE exp_param_mandatory;
       ELSIF ls_brand_code IS NULL THEN
          ls_parameter:='brand_code';
          RAISE exp_param_mandatory;
       ELSIF ls_source_system IS NULL THEN
          ls_parameter:='Source System';
          RAISE exp_param_mandatory;
       ELSIF ls_user_id IS NULL THEN
          ls_parameter:='User Id';
          RAISE exp_param_mandatory;
       END IF; 
       
   -- Reading the Account Number from the Table for the Friendly Id and Brand Code. 
      OPEN c_get_acc_num( ls_friendly_id, gs_mso_loanac_attribute_name ,ls_source_system);
          FETCH c_get_acc_num  INTO ln_account_number;
      
           
       IF c_get_acc_num%FOUND THEN
   -- A valid acccount was returned. Assigning it to the Out Parameter
           pn_account_number := ln_account_number;
           CLOSE c_get_acc_num;
       ELSE        
           CLOSE c_get_acc_num; 
   -- Assigning a new account number.
           pn_account_number := pack_acc_alloc.fn_next_avail_accno();

           soa_mortgagecompletions_WIP.pr_insert_cross_ref_ext_ids    
                                                        (ps_source_unique_id => ls_friendly_id,
                                                         ps_source_system => ls_source_system,
                                                         ps_attribute_name => gs_mso_loanac_attribute_name,
                                                         ps_attribute_type => 'NUMBER',
                                                         ps_attribute_cval => NULL,
                                                         pn_attribute_nval => pn_account_number,
                                                         pd_attribute_dval => NULL,
                                                         pd_created_date => ld_today,
                                                         ps_created_by => ls_user_id
                                                         );  
           soa_mortgagecompletions_WIP.pr_insert_cross_ref_ext_ids  
                                                        (ps_source_unique_id => ls_friendly_id,
                                                         ps_source_system => ls_source_system,
                                                         ps_attribute_name => gs_mso_brand_attribute_name,
                                                         ps_attribute_type => 'CHAR',
                                                         ps_attribute_cval => ls_brand_code,
                                                         pn_attribute_nval => NULL,
                                                         pd_attribute_dval => NULL,
                                                         pd_created_date => ld_today,
                                                         ps_created_by => ls_user_id
                                                         );  
                         
       END IF;
      
   EXCEPTION
     WHEN exp_param_mandatory THEN
       ybs_application_error(-20022, 
                              'E00013# Mandatory Parameters - '
                              || ls_parameter);
         
     WHEN OTHERS THEN
       ybs_application_error(-20002, 
                              'Error in soa_mortgagecompletions.pr_mso_get_loan_account - ' 
                              ||SQLERRM);  
 END pr_mso_get_loan_account; 

   PROCEDURE pr_insert_cross_ref_ext_ids(ps_source_unique_id IN VARCHAR2,
                                        ps_source_system    IN VARCHAR2,
                                        ps_attribute_name   IN VARCHAR2,
                                        ps_attribute_type   IN VARCHAR2,
                                        ps_attribute_cval   IN VARCHAR2,
                                        pn_attribute_nval   IN NUMBER,
                                        pd_attribute_dval   IN DATE,
                                        pd_created_date     IN DATE,
                                        ps_created_by       IN VARCHAR2) AS
    /* ************************************************************************************************
    Name            : pr_insert_cross_ref_ext_ids
    Purpose         : This procedure will be used to insert additional attributes to cross ref ext ids table.
    Developer       : DEEPENDRA KUMAR RAMAWAT (TCS)
    ---------------------------------------------------------------------------------------------------
    Update Log:
    Version       By                Date            Details
    0.1     DEEPENDRA KUMAR      07-June-2018       Original version
            RAMAWAT (TCS)       
    ---------------------------------------------------------------------------------------------------
    ************************************************************************************************ */
  BEGIN
    
     pack_mso_xref.pr_insert_cross_ref_ext_ids(ps_source_unique_id,
                                               ps_source_system,
                                               ps_attribute_name,
                                               ps_attribute_type,
                                               ps_attribute_cval,
                                               pn_attribute_nval,
                                               pd_attribute_dval,
                                               pd_created_date,
                                               ps_created_by
                                               );
     
   
  END pr_insert_cross_ref_ext_ids;                                      


 PROCEDURE pr_archive_cross_ref_ext_ids AS
  /* ******************************************************************************
      Name            : pr_archive_cross_ref_ext_ids
      Purpose         : Delete records from cross_reference_external_ids table.
      Developer       : Soumya Ranjan (TCS)
    -----------------------------------------------------------------------------------
      Update Log:
        Version  By                 Date        Details
       -------- -----------------  -----------  ----------------------------
        1.0      Soumya Ranjan(TCS) 27-JUN-2018 FETR0016324:
                                                Procedure to delete records from the table
                                                cross_reference_external_ids. The records
                                                that were created earlier than a length of
                                                time will be deleted with this.
                                                The Attribute_Name that will be deleted are
                                                'BRAND_CODE',  
    -----------------------------------------------------------------------------------
    ********************************************************************************** */
    -- Local variable declaration
       ld_day                 DATE := SYSDATE;
       ld_today               DATE := TRUNC(ld_day);
       ln_creid_archive_days  Global_Values.Global_Nvalue%TYPE;
    -- Exceptions

    -- Cursor   
     
 BEGIN
    ln_creid_archive_days := pack_header.fn_get_global('GN_CREID_ARCHIVE_DAYS');
    
/*    DELETE
    FROM cross_reference_external_ids crei
    WHERE crei.source_system = 'MSO' AND
          crei.attribute_name IN ('BRAND_CODE') AND 
          crei.created_date <= SYSDATE-ln_creid_archive_days;
*/
      pack_mso_xref.pr_archive_cross_ref_ext_ids();           
 EXCEPTION
    WHEN OTHERS THEN
         ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_archive_cross_ref_ext_ids - ' ||SQLERRM);
             
 END pr_archive_cross_ref_ext_ids; 


 PROCEDURE pr_populate_loanac (pn_accno                           IN  NUMBER,
                               pn_latype_code                     IN  NUMBER,
                               ps_pertyp_period_type              IN  VARCHAR2,
                               ps_annual_pay_revw_reqd            IN  VARCHAR2,
                               pn_pay_day                         IN  NUMBER,
                               ps_excess_clawback_ind             IN  VARCHAR2,
                               ps_update_id                       IN  VARCHAR2,
                               pd_update_time                     IN  DATE,
                               ps_update_allowed                  IN  VARCHAR2,
                               pd_next_captn_date                 IN  DATE,
                               pd_opening_date                    IN  DATE,
                               ps_notice_period_type              IN  VARCHAR2,
                               ps_std_miras_rate_ind              IN  VARCHAR2,
                               ps_statement_frequency             IN  VARCHAR2,
                               pd_next_payment_debit_date         IN  DATE,
                               pn_notice_period                   IN  NUMBER,
                               ps_brand_code                      IN  VARCHAR2
                               ) IS
  /* ********************************************************************************
  Name            : pr_populate_loanac
  Purpose         : Procedure to populate the Loan_Account table in CORE
  Developer       : Soumya Ranjan (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Soumya Ranjan(TCS) 06-JUN-2018 FETR0016324:
                                          Procedure to setup a loan account and This 
                                          will be acheived by inserting data into 
                                          loan_accounts table.
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
--Local varibale declaration  
  ls_parameter   VARCHAR2(30);
  ls_flag        VARCHAR2(1);
  ls_no CONSTANT VARCHAR2(1) := 'N';

--Exception declaration  
  exp_param_mandatory     EXCEPTION;
  exp_update_invalid EXCEPTION;

-- Cursor Declaration
  CURSOR cur_loanac_01 IS
   SELECT 'Y'
   FROM  loan_accounts
   WHERE accgrp_num = pn_accno
   AND latype_code = pn_latype_code;

BEGIN
--This part checks whether the parameter passed are valid or not 
  IF (pn_accno = 0 OR pn_accno IS NULL) THEN
    ls_parameter := 'Loan Account Number';
    RAISE exp_param_mandatory;
  ELSIF pn_latype_code IS NULL THEN
    ls_parameter := 'Latype Code';
    RAISE exp_param_mandatory;
  ELSIF ps_pertyp_period_type IS NULL THEN
    ls_parameter := 'Pertyp Period Type';
    RAISE exp_param_mandatory;
  ELSIF ps_annual_pay_revw_reqd IS NULL THEN
    ls_parameter := 'Annual pay review Required';
    RAISE exp_param_mandatory;
  ELSIF (pn_pay_day = 0 OR pn_pay_day IS NULL) THEN
    ls_parameter := 'Pay Day';
    RAISE exp_param_mandatory;
  ELSIF ps_excess_clawback_ind IS NULL THEN
    ls_parameter := 'Excess Clawback Ind';
    RAISE exp_param_mandatory;
  ELSIF ps_update_id IS NULL  THEN
    ls_parameter := 'User Id';
    RAISE exp_param_mandatory;
 ELSIF pd_update_time IS NULL  THEN
    ls_parameter := 'Update Time';
    RAISE exp_param_mandatory;
  ELSIF ps_update_allowed IS NULL THEN
    ls_parameter := 'Update allowed';
    RAISE exp_param_mandatory;
  ELSIF ps_update_allowed IS NULL THEN
    ls_parameter := 'Update allowed';
    RAISE exp_param_mandatory;
  ELSIF ps_notice_period_type IS NULL THEN
    ls_parameter := 'Notice Period Type';
    RAISE exp_param_mandatory;
  ELSIF ps_std_miras_rate_ind IS NULL THEN
    ls_parameter := 'Standard Miras Rate Indicator';
    RAISE exp_param_mandatory;
  ELSIF ps_statement_frequency IS NULL THEN
    ls_parameter := 'Statement Frequency';
    RAISE exp_param_mandatory;
  ELSIF pn_notice_period IS NULL OR pn_notice_period < 0 THEN
    ls_parameter := 'Notice Period';
    RAISE exp_param_mandatory;
  ELSIF pd_next_captn_date IS NULL THEN
    ls_parameter := 'Next Capitalisation Date';
    RAISE exp_param_mandatory;
  ELSIF pd_opening_date IS NULL THEN
    ls_parameter := 'Opening Date';
    RAISE exp_param_mandatory;
  ELSIF pd_next_payment_debit_date IS NULL THEN
    ls_parameter := 'Next Payment Debit Date';
    RAISE exp_param_mandatory;
  END IF;

  --   At time of writing this procedure can only create records.
  --   The ps_update_allowed parameter has been included for later
  --   expansion of functionality to include updates 
  IF ps_update_allowed <> 'N' THEN
    RAISE exp_update_invalid;
  END IF;

  -- This part of procedure opens,fethces from the cursor and
  -- starts the processing
  -- But now first check whether updates allowed.
  ls_flag := ls_no;
  OPEN  cur_loanac_01;
  FETCH cur_loanac_01 INTO ls_flag;
  CLOSE cur_loanac_01;

  IF ls_flag = ls_no THEN
    -- an existing record has not been found
    -- Create a loan account using minimum information for
    -- online mortgage application.     
    INSERT INTO loan_accounts (accgrp_num,
                               latype_code,
                               pertyp_period_type,
                               pubcon_year,
                               annual_pay_revw,
                               regd_pay_day,
                               excess_clawback_ind,
                               opening_date,
                               next_payment_debit_date,
                               notice_period,
                               next_capitalisation_date,
                               annual_miras5_required,
                               annual_miras5_destination,
                               std_miras_rate_ind,
                               interest_day,
                               collat_notes,
                               bcs_class,
                               bcs_group,
                               update_id,
                               update_time,
                               worst_arrears_amt,
                               worst_arrears_mths,
                               worst_arrears_date,
                               old_accgrp_num,
                               charitable_donation,
                               charitable_donation_takeon,
                               statement_frequency,
                               payment_calculation_method,
                               notice_period_type,
                               offset_plus_consent,
                               psd_cml_submission_date,
                               psd_fsa_submission_date,
                               brand_code)
                         SELECT
                                pn_accno                        -- accgrp_num
                               ,pn_latype_code                  -- latype_code
                               ,ps_pertyp_period_type           -- pertyp_period_type
                               ,MAX(pubcon.year)                -- pubcon_year
                               ,ps_annual_pay_revw_reqd         -- annual_pay_revw,regd
                               ,pn_pay_day                      -- pay_day
                               ,ps_excess_clawback_ind          -- excess_clawback_ind
                               ,pd_opening_date                 -- opening_date
                               ,pd_next_payment_debit_date      -- next_payment_debit_date
                               ,pn_notice_period                -- notice_period
                               ,pd_next_captn_date              -- next_capitalisation_date
                               ,NULL                            -- annual_miras5_required
                               ,NULL                            -- annual_miras5_destination
                               ,ps_std_miras_rate_ind           -- std_miras_rate_ind
                               ,NULL                            -- interest_day
                               ,NULL                            -- collat_notes
                               ,NULL                            -- bcs_class
                               ,NULL                            -- bcs_group
                               ,ps_update_id                    -- update_id
                               ,pd_update_time                  -- update_time
                               ,NULL                            -- worst_arrears_amt
                               ,NULL                            -- worst_arrears_mths
                               ,NULL                            -- worst_arrears_date
                               ,NULL                            -- old_accgrp_num
                               ,NULL                            -- charitable_donation
                               ,NULL                            -- charitable_donation_takeon
                               ,ps_statement_frequency          -- statement_frequency
                               ,NULL                            -- payment_calculation_method
                               ,ps_notice_period_type           -- notice_period_type
                               ,NULL                            -- offset_plus_consent
                               ,NULL                            -- psd_cml_submission_date
                               ,NULL                            -- psd_fsa_submission_date
                               ,ps_brand_code                   -- brand_code
                              FROM published_conditions pubcon;
  END IF;
EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022, 'E00013# Mandatory Parameters Missing - '|| ls_parameter);
      
    WHEN DUP_VAL_ON_INDEX THEN
       YBS_APPLICATION_ERROR(-20002, SQLERRM);
       
    WHEN EXP_UPDATE_INVALID THEN
      ybs_application_error(-20003,'Invalid Update Allowed Parameter');
      
    WHEN OTHERS THEN
      ybs_application_error(-20004,fn_strip_message(SQLERRM));
      
END pr_populate_loanac; 


PROCEDURE pr_account_setup (pn_account_number       IN  NUMBER,
                            pt_party_details        IN  soa_tbl_party_details,
                            pd_application_date     IN  DATE,
                            pn_regd_pay_day         IN  NUMBER,
                            ps_brand_code           IN  VARCHAR2,
                            ps_intermediary_id       IN VARCHAR2,
                            ps_payment_route_id     IN VARCHAR2,
                            ps_payment_route_name   IN VARCHAR2,
                            ps_error_text           OUT VARCHAR2  
                           )IS
  /* ********************************************************************************
  Name            : pr_account_setup
  Purpose         : Procedure to create property details for new loan account in CORE
  Developer       : Soumya Ranjan (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Soumya Ranjan(TCS) 13-JUN-2018 FETR0016324:
                                          Private Procedure to setup the loan account by
                                          adding the details to the tables
                                          1. Account_Groups
                                          2. Activity_Players
                                          3. Loan_Applications
                                          4. Loan_Appl_Statuses
                                          5. Loan_Appl_Purposes
                                          6. Loan_Accounts
  2.0     Ekta Garg(TCS)     8-Aug-2018   Private Procedure to setup the loan account by
                                          adding the details to the tables
                                          1.Activity Players
                                          2.Loan_Accounts                                  
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
    -- Local variable declaration 
    ln_count                  NUMBER;
    ln_index                  NUMBER;
    ln_existing_sysid         loan_applications.sysid%TYPE;
    ln_loan_app_sysid         loan_applications.sysid%TYPE;
    ln_notice_period          loan_accounts.notice_period%TYPE := 0;
    ln_arrs_revw_day CONSTANT account_groups.arrears_revw_day%TYPE := 1;
    ln_agreed_adv             loan_appl_purposes.agreed_adv%TYPE;
    ln_party_sysid            activity_players.party_sysid%TYPE;
    ln_introd_sysid           introducer_usages.introd_sysid%TYPE;
    ln_extorg_sysid           introducer_usages.extorg_sysid%TYPE;
    ln_lenpnr_sysid           introducer_usages.lenpnr_sysid%TYPE;
     
    ls_yes                     VARCHAR2(1) := 'Y';
    ls_no                      VARCHAR2(1) := 'N';
    ls_error_text              VARCHAR2(130);
    ls_error                   VARCHAR2(130);
    ls_acttyp_code             activity_players.acttyp_code%TYPE;
    ls_notice_period_type      loan_accounts.notice_period_type%TYPE := 'M';
    ls_statement_frequency     loan_accounts.statement_frequency%TYPE := 'A';
    ls_update_id      CONSTANT account_groups.update_id%TYPE :=gs_mso_source_system_value;
    ls_exists                  VARCHAR2(1);
    ls_update_allowed          VARCHAR2(1) := 'N';
    ls_lapur_code              loan_appl_purposes.lapur_code%TYPE;
    ls_bp_found                VARCHAR2(1);
    ls_branch_code             global_values.global_cvalue%TYPE := NULL;
    ld_now                     DATE := SYSDATE;
    ld_today                   DATE := TRUNC(ld_now);
    ld_current_start_date      loan_accounts.opening_date%TYPE;
    ld_current_end_date        loan_accounts.next_capitalisation_date%TYPE;
    ld_next_payment_debit_date loan_accounts.next_payment_debit_date%TYPE;
    ld_update_time   CONSTANT  account_groups.update_time%TYPE := TRUNC(SYSDATE);
    
    -- Cursor declaration
    CURSOR cur_check_loanapp IS
    SELECT loanapp.sysid
    FROM loan_applications loanapp
    WHERE loanapp.loanac_accgrp_num = pn_account_number
    AND loanapp.loanac_latype_code = gn_loanac_latype_code;
    
    CURSOR c_exist_account_grp IS
    SELECT 'Y' exists_accgrp
    FROM account_groups ag
    WHERE ag.num = pn_account_number;
        
    CURSOR c_get_party_sysid2 IS
    SELECT  iu.sysid ,iu.introd_sysid,lp.extorg_sysid,iu.lenpnr_sysid
    FROM cross_reference_external_ids xrefid
    JOIN introducers i
    ON xrefid.attribute_nval = i.person_party_sysid
    JOIN introducer_usages iu
    ON i.sysid = iu.introd_sysid
    JOIN lending_partnerships lp
    ON lp.sysid = iu.lenpnr_sysid
    JOIN external_organisations eo
    ON eo.party_sysid = lp.extorg_sysid
    WHERE xrefid.attribute_name = 'INTERMEDIARY'
    AND xrefid.source_unique_id = ps_intermediary_id --32145698
    AND eo.name = ps_payment_route_name--'TVCS'
    AND xrefid.source_system = gs_mso_source_system_value
    AND xrefid.ended_date IS NULL;

   -- Exception declaration
    exp_param_mandatory         EXCEPTION;
    party_sysid_notfound        EXCEPTION;
                                            
 BEGIN
     ln_count := CARDINALITY(pt_party_details);
     
     OPEN c_exist_account_grp;
     FETCH c_exist_account_grp INTO ls_exists;
     IF c_exist_account_grp%NOTFOUND THEN
     --To insert data into account_groups table   
     pack_part_dtl.pr_populate_accgrp(pn_accno => pn_account_number,
                                      ps_accgrp_type => gn_loanac_accgrp_type,
                                      ps_loaags_code => gs_lasttp_rofpen,
                                      pn_arrs_revw_day => ln_arrs_revw_day,
                                      ps_update_id => ls_update_id,
                                      pd_update_time => ld_update_time,
                                      ps_update_allowed => ls_update_allowed);
     ELSE
      UPDATE account_groups
      SET loaags_code = gs_lasttp_rofpen,
          accgrp_type = gn_loanac_accgrp_type,
          arrears_revw_day = '1'
      WHERE num = pn_account_number;
    END IF;                                  
    CLOSE c_exist_account_grp;
    
    --  Inserting data to activity_players table 
    --  by calling the procedure pack_part_dtl.pr_populate_actply.

         ln_index := 1;
         WHILE ln_index <= ln_count 
          LOOP
          IF pt_party_details(ln_index).party_index = 1 THEN
            ls_acttyp_code := pack_header.fn_get_global('GS_ACTTYP_MHLDRM');
          ELSE
            ls_acttyp_code := pack_header.fn_get_global('GS_ACTTYP_OHLDRM');
          END IF;
    
     --Insert records into activity players for MHLDRM,OHLDRM        
          pack_part_dtl.pr_populate_actply(ps_table_id => gs_actply_table_id,
                                           pn_table_sysid => pn_account_number,
                                           pn_loanac_latype_code => gn_loanac_latype_code,
                                           ps_acttyp_code => ls_acttyp_code,
                                           pn_party_sysid => pt_party_details(ln_index).party_sysid,
                                           pn_rank => pt_party_details(ln_index).party_index,
                                           ps_update_at => ld_update_time,
                                           ps_update_id => ls_update_id,
                                           pd_update_date => ld_update_time,
                                           ps_update_allowed => ls_update_allowed);
                                        
          ln_index:= ln_index + 1;
          END LOOP;
  
     --Insert records into activity_players for 'CTLBRN', GS_ACTTYP_CTLBRN 
        pack_header.pr_get_brand_parameter('BP_MSO_COST_CENTRE',
                                            ps_brand_code,
                                            ls_branch_code,
                                            ls_bp_found);
                                            
        IF ls_bp_found = 'Y' THEN
        SELECT cc.party_luw_sysid INTO ln_party_sysid
        FROM COST_CENTRES cc
        WHERE cc.code = ls_branch_code
        AND cc.end_date IS NULL;                                            
        END IF;
                 
        IF ln_party_sysid IS NULL 
        THEN 
        RAISE party_sysid_notfound; 
        END IF;    
    
        ls_acttyp_code := pack_header.fn_get_global('GS_ACTTYP_CTLBRN'); 
          
        pack_part_dtl.pr_populate_actply(ps_table_id => gs_actply_table_id,
                                         pn_table_sysid => pn_account_number,
                                         pn_loanac_latype_code => gn_loanac_latype_code,
                                         ps_acttyp_code => ls_acttyp_code,
                                         pn_party_sysid => ln_party_sysid,
                                         pn_rank => 0,
                                         ps_update_at => ld_update_time,
                                         ps_update_id => ls_update_id,
                                         pd_update_date => ld_update_time,
                                         ps_update_allowed => ls_update_allowed);
                                           
    -- Insert records into activity_players for 'PRDCBR' GS_ACTTYP_PROC_BRANCH     
       ls_acttyp_code := pack_header.fn_get_global('GS_ACTTYP_PROC_BRANCH');                                           
    
        
       pack_part_dtl.pr_populate_actply(ps_table_id => gs_actply_table_id,
                                         pn_table_sysid => pn_account_number,
                                         pn_loanac_latype_code => gn_loanac_latype_code,
                                         ps_acttyp_code => ls_acttyp_code, 
                                         pn_party_sysid => ln_party_sysid,
                                         pn_rank => 0,
                                         ps_update_at => ld_update_time,
                                         ps_update_id => ls_update_id,
                                         pd_update_date => ld_update_time,
                                         ps_update_allowed => ls_update_allowed);
   
      ls_acttyp_code := pack_header.fn_get_global('GS_ACTTYP_BUSSRC');
      
       OPEN c_get_party_sysid2;
       LOOP
       FETCH c_get_party_sysid2  INTO ln_party_sysid,ln_introd_sysid,ln_extorg_sysid,ln_lenpnr_sysid;
       IF c_get_party_sysid2%NOTFOUND THEN
          INSERT INTO introducer_usages
            (sysid,
             introd_sysid,
             extorg_sysid,
             lenpnr_sysid,
             status,
             emp_ref_no,
             mail_option,
             created_at,
             created_by,
             created_date,
             ended_at,
             ended_by,
             ended_date,
             usage_type)
          VALUES
            (ln_party_sysid,
             ln_introd_sysid,
             ln_extorg_sysid,
             ln_lenpnr_sysid,
             NULL,
             NULL,
             'M',
             gs_mso_source_system_value,
             USER,
             SYSDATE,
             NULL,
             NULL,
             NULL,
             'I');
     
     -- Insert records into activity_players for Business Source (BUSSRC)  
      pack_part_dtl.pr_populate_actply(ps_table_id => gs_actply_table_id,
                                       pn_table_sysid => pn_account_number,
                                       pn_loanac_latype_code => gn_loanac_latype_code,
                                       ps_acttyp_code => ls_acttyp_code, 
                                       pn_party_sysid => ln_party_sysid,
                                       pn_rank => 0,
                                       ps_update_at => ld_update_time,
                                       ps_update_id => ls_update_id,
                                       pd_update_date => ld_update_time,
                                       ps_update_allowed => ls_update_allowed);
         
       END IF;
       END LOOP;
       CLOSE c_get_party_sysid2;
   
    -- Inserting the data to loan_applications table by using the available inputs. 
       
      OPEN cur_check_loanapp;
      FETCH cur_check_loanapp INTO ln_existing_sysid;
      CLOSE cur_check_loanapp;

      IF ln_existing_sysid is null THEN
       SELECT loanap_sysid_seq.NEXTVAL
       INTO ln_loan_app_sysid
       FROM dual;
      ELSE
       ln_loan_app_sysid := ln_existing_sysid;
      END IF;

   -- Insert records into the Loan_Applications table.
                                             
     INSERT INTO loan_applications(sysid,
                                   loanac_accgrp_num,
                                   loanac_latype_code,
                                   application_date,
                                   cr_score_override,
                                   cr_score,
                                   cr_score_date,
                                   loaptp_code,
                                   csr_code,
                                   cr_score_card,
                                   marketing_campaign,
                                   update_id,
                                   update_time,
                                   level_of_advice,
                                   cr_status,
                                   e_commerce_ind)
                            SELECT ln_loan_app_sysid,
                                   pn_account_number,
                                   gn_loanac_latype_code,
                                   pd_application_date, 
                                   'N',
                                   NULL,
                                   NULL,
                                   gs_loaptp_code,
                                   NULL,
                                   'C',
                                   NULL,
                                   ls_update_id,
                                   ld_now, 
                                   NULL,
                                   NULL,
                                   NULL
                         FROM      dual
                         WHERE NOT EXISTS(SELECT 'loanapp'  
                                           FROM loan_applications loanapp
                                           WHERE loanapp.loanac_accgrp_num = pn_account_number
                                           AND loanapp.loanac_latype_code = gn_loanac_latype_code);
    
   -- Insert records into the Loan_Appl_Statuses table.
                                            
    INSERT INTO loan_appl_statuses(loanap_sysid,
                                   lasttp_code,
                                   start_date,
                                   lasr_code,
                                   end_date,
                                   update_id,
                                   update_time)
                            SELECT ln_loan_app_sysid,
                                   gs_lasttp_rofpen,
                                   ld_now,
                                   NULL,
                                   NULL,
                                   ls_update_id,
                                   ld_now
                              FROM dual
                         WHERE NOT EXISTS(SELECT 'loanappl'
                                          FROM loan_appl_statuses loanapp
                                          WHERE loanapp.loanap_sysid = ln_loan_app_sysid
                                          AND loanapp.lasttp_code = gs_lasttp_rofpen)
                               AND EXISTS(SELECT 'loanap'
                                          FROM loan_applications loanap
                                          WHERE loanap.sysid = ln_loan_app_sysid);
  
   -- Insert records into the Loan_Appl_Purposes table.
                                            
    INSERT INTO loan_appl_purposes(loanap_sysid,
                                   lapur_code,
                                   agreed_adv,
                                   loaptp_code,
                                   update_id,
                                   update_time
                                   )
                            SELECT ln_loan_app_sysid,
                                   ls_lapur_code,
                                   ln_agreed_adv,
                                   ls_lapur_code,
                                   ls_update_id,
                                   ld_now
                              FROM dual
                         WHERE EXISTS(SELECT 'loanap'
                                      FROM loan_applications loanap
                                      WHERE loanap.sysid = ln_loan_app_sysid);
  
  -- Insert records into the Loan_Accounts table.
 
    PACK_PERIOD.CALPERIODS(TRUNC(ld_now),ld_current_start_date,ld_current_end_date);   
  
   -- To retrieve next_payment_debit_date
     IF pn_regd_pay_day < 22 THEN
       ld_next_payment_debit_date := '22'||TO_CHAR(SYSDATE,'MMYYYY');
     ELSE
       ld_next_payment_debit_date := '22'||TO_CHAR(ADD_MONTHS(SYSDATE,1),'MMYYYY');
     END IF;
                                   
       pr_populate_loanac(pn_account_number         
                          ,gn_loanac_latype_code     
                          ,gs_pertyp_socyr           
                          ,ls_yes                    
                          ,pn_regd_pay_day           
                          ,ls_no                     
                          ,ls_update_id              
                          ,ld_now                    
                          ,ls_update_allowed         
                          ,ld_current_end_date       
                          ,ld_today                  
                          ,ls_notice_period_type     
                          ,ls_no                     
                          ,ls_statement_frequency    
                          ,ld_next_payment_debit_date
                          ,ln_notice_period          
                          ,ps_brand_code
                         ); 
 
   EXCEPTION
      WHEN party_sysid_notfound THEN
        ybs_application_error(-20022,'E10254#No Party Sysid exists for this Cost Centre');
      WHEN OTHERS THEN
        ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_account_setup - ' ||SQLERRM);
 
END pr_account_setup;                                       


PROCEDURE pr_create_property_details (pn_loan_account_number      IN NUMBER,
                                      ps_update_id                IN VARCHAR2,                                       
                                      pt_addr_dtls                IN soa_tbl_address_dtls,
                                      ps_bsac_stats_code          IN VARCHAR2,
                                      ps_prptyp_code              IN VARCHAR2,
                                      ps_new_build_indicator      IN VARCHAR2,
                                      ps_registered_ind           IN VARCHAR2,
                                      pn_num_of_other_rooms       IN NUMBER,
                                      ps_orig_purch_date          IN DATE,
                                      ps_pct_code                 IN VARCHAR2,
                                      pn_num_of_bedrooms          IN NUMBER,
                                      pn_year_built               IN NUMBER,
                                      pn_purch_price              IN NUMBER,
                                      pn_shared_perc              IN NUMBER,
                                      ps_shared_type              IN VARCHAR2,
                                      ps_roof_construction_code   IN VARCHAR2,
                                      ps_prpttp_code              IN VARCHAR2,
                                      ps_title_number             IN VARCHAR2,
                                      ps_pbuset_code              IN VARCHAR2,
                                      pn_property_id              OUT NUMBER,
                                      ps_error_text               OUT VARCHAR2
                                     ) IS  
  /* ********************************************************************************
  Name            : pr_create_property_details
  Purpose         : Procedure to create property details for new loan account in CORE
  Developer       : Soumya Ranjan (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Soumya Ranjan(TCS) 13-JUN-2018 FETR0016324:
                                          Private Procedure to create property details
                                          in SMBP Core for a new Mortgage Account. As part
                                          of this the data will be inserted into 
                                          1.Properties, 
                                          2.Property_tenures,
                                          3.Property_title_numbers
                                          4.Prp_bus_uses tables.
                                          5.Postal_addresses 
  ----------------------------------------------------------------------------------
  ********************************************************************************* */

    --ld_sysdate                   DATE;
    ls_error                     VARCHAR2(130) := '';
    ld_now                       DATE := SYSDATE;
    ld_today                     DATE := TRUNC(ld_now);
    ls_yes                       VARCHAR2(1) := 'Y';
   
    ln_prp_bus_uses_perc         NUMBER;   
    ln_prpty_sysid               properties.sysid%TYPE := 0;
    ln_postal_id                 postal_addresses.sysid%TYPE := 0;
    ln_title_number              property_title_numbers.title_num%TYPE;
    ls_prefix                    property_title_numbers.pt_prefix%TYPE;

   CURSOR check_for_property(pn_loan_account_number IN NUMBER) IS
          SELECT pr.sysid
          FROM properties pr
          WHERE pr.accgrp_num = pn_loan_account_number;
                                          
 BEGIN

  -- Identify whether this account's data is already on core tables.
  OPEN check_for_property(pn_loan_account_number);
  FETCH check_for_property INTO ln_prpty_sysid;
 /* IF check_for_property%FOUND THEN
    CLOSE check_for_property;
    ls_error := 'Property Details is already available [soa_mortgagecompletions.pr_create_property_details]';
    ps_error_text := ls_error;
  END IF;*/
  CLOSE check_for_property;

  -- Retrieve the associated pstadd_sysid.

    ln_postal_id:= PACK_PSTADD.FN_CHECK_PSTADD( pt_addr_dtls(1).address_line1,
                                                pt_addr_dtls(1).address_line2,
                                                pt_addr_dtls(1).address_line3,
                                                pt_addr_dtls(1).address_line4,
                                                pt_addr_dtls(1).address_line5,
                                                pt_addr_dtls(1).postcode,
                                                pt_addr_dtls(1).country_code,
                                                NULL);
     
  SELECT PRPTY_SYSID_SEQ.nextval INTO pn_property_id FROM dual;
 
  INSERT INTO PROPERTIES(sysid              
                         ,start_date         
                         ,pstadd_sysid       
                         ,bsac_stats_code    
                         ,prptyp_code        
                         ,accgrp_num         
                         ,new_building       
                         ,update_time        
                         ,update_id          
                         ,registered_ind     
                         ,num_of_other_rooms 
                         ,orig_purch_date    
                         ,pct_code           
                         ,num_of_bedrooms    
                         ,year_built         
                         ,purch_price        
                         ,shared_perc        
                         ,shared_type        
                         ,pct_code_r         
                        ) 
                VALUES  (pn_property_id,
                         ld_today,  
                         ln_postal_id,
                         ps_bsac_stats_code,
                         ps_prptyp_code,
                         pn_loan_account_number,
                         ps_new_build_indicator,
                         ld_today,
                         ps_update_id,
                         ps_registered_ind,
                         pn_num_of_other_rooms,
                         ps_orig_purch_date,                                   
                         ps_pct_code,
                         pn_num_of_bedrooms,
                         pn_year_built,
                         pn_purch_price,
                         pn_shared_perc,
                         ps_shared_type,
                         ps_roof_construction_code                                   
                        );
 
   INSERT INTO PROPERTY_TENURES  (prpty_sysid,
                                  prpttp_code,
                                  start_date,
                                  update_id,
                                  update_time
                                  )
                          VALUES  (pn_property_id,
                                   ps_prpttp_code,
                                   ld_today, -- Need Clarification on this
                                   ps_update_id,
                                   ld_today
                                  );
                                    
    -- The Title Number is the Numeric portion of Title Number
   ln_title_number := regexp_replace(ps_title_number,'[^0-9]', ''); 
    -- The Prefix is the Character portion of the Title Number
   ls_prefix := regexp_replace(ps_title_number,'[^a-z ^A-Z]', ''); 

    INSERT INTO PROPERTY_TITLE_NUMBERS(prpty_sysid,
                                       title_num,
                                       start_date,
                                       update_id,
                                       update_time,
                                       pt_prefix                                       
                                       )
                                 VALUES(pn_property_id,
                                        ln_title_number,
                                        ld_today,
                                        ps_update_id,
                                        ld_today,
                                        ls_prefix
                                        );                                  
 
       
           INSERT INTO PRP_BUS_USES(prpty_sysid,
                                    pbuset_code,
                                    start_date,
                                    accommodation_ind,
                                    perc,
                                    update_id,
                                    update_time
                                   )
                             VALUES(pn_property_id,
                                    ps_pbuset_code,
                                    ld_today,
                                    ls_yes,
                                    ln_prp_bus_uses_perc,
                                    ps_update_id,
                                    ld_today
                                   );
    EXCEPTION
      WHEN OTHERS THEN
        ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_create_property_details - ' ||SQLERRM);
 
END pr_create_property_details;                                       



PROCEDURE pr_loan_parts_setup (pn_loan_account_number       IN NUMBER,
                                pn_loan_app_sysid            IN NUMBER,
                                pn_loanac_latype_code        IN NUMBER,
                                pt_loan_part_details         IN soa_tbl_loanpt_details,
                                ps_update_id                 IN VARCHAR2,
                                ps_error_text                OUT VARCHAR2
                               )IS
  /* ********************************************************************************
  Name            : pr_loan_parts_setup
  Purpose         : Procedure to setup loan parts for a new loan account in CORE
  Developer       : Soumya Ranjan (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Soumya Ranjan(TCS) 14-JUN-2018 FETR0016324:
                                          Private Procedure to create loan part details
                                          in SMBP Core for a new Mortgage Account. As part
                                          of this the data will be inserted into 
                                          loan_parts, loan_part_conditions and loan_part_statuses
  2.0     Ekta Garg(TCS)       12-Sep-2018 Validating loan_part_conditions                            
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
    lt_loan_part_details         soa_tbl_loanpt_details:= soa_tbl_loanpt_details();   
    lt2_loan_part_details        soa_tbl_loanpt_details:= soa_tbl_loanpt_details();                                       
    
    ln_index                     NUMBER;
    ln_int_only_amt              loan_part_conditions.int_only_amt%TYPE;
    ln_part_num                  NUMBER;
    ln_part_numr                 NUMBER;
    ln_part_numi                 NUMBER;
    ld_now              CONSTANT DATE := SYSDATE;
    ld_today            CONSTANT DATE := TRUNC(ld_now);
    ls_no               CONSTANT VARCHAR2(1) := 'N';
    ls_error                     VARCHAR2(130);
    ls_lptype_code               loan_parts.lptype_code%TYPE;
    ls_daily_rest_flag           lending_products.daily_rest_flag%TYPE;
    ls_bundled_flag              loan_part_conditions.bundled_flag%TYPE;
    
   BEGIN
   
   FOR idx IN pt_loan_part_details.FIRST..pt_loan_part_details.LAST LOOP
     IF pt_loan_part_details(idx).repayment_amount > 0 AND
        pt_loan_part_details(idx).interest_only_amount > 0 THEN
    
  IF pt_loan_part_details(idx).repayment_amount > pt_loan_part_details(idx).interest_only_amount THEN
    ln_part_numr := ln_part_num +1;
    ln_part_numi := ln_part_numr+1;
  ELSE
    ln_part_numi := ln_part_num +1;
    ln_part_numr := ln_part_numi +1;
  END IF; 
  
   lt_loan_part_details(idx):= soa_obj_loanpt_details(pt_loan_part_details(idx).lenprd_product_code,
                                                       pt_loan_part_details(idx).repayment_amount,
                                                       0,
                                                       pt_loan_part_details(idx).lapur_code,
                                                       'CAPIT',
                                                       pt_loan_part_details(idx).term,
                                                       pt_loan_part_details(idx).regulated
                                                       --nvl(pt_loan_part_details(idx).repayment_amount, 0) + nvl(pt_loan_part_details(idx).interest_only_amount, 0),
                                                       --ln_part_numr
                                                       );
    
    --This should be LAST+1, REQUIRE TO EXTEND IT AS WELL
    lt_loan_part_details.EXTEND;
    ln_index:=pt_loan_part_details.NEXT(pt_loan_part_details.LAST);                                                       
   
   lt_loan_part_details(ln_index) := soa_obj_loanpt_details(pt_loan_part_details(idx).lenprd_product_code,
                                                       0,
                                                       pt_loan_part_details(idx).interest_only_amount,
                                                       pt_loan_part_details(idx).lapur_code,
                                                       'INT',
                                                       pt_loan_part_details(idx).term,
                                                       pt_loan_part_details(idx).regulated
                                                       --nvl(pt_loan_part_details(idx).repayment_amount, 0) + nvl(pt_loan_part_details(idx).interest_only_amount, 0),
                                                       --ln_part_numi 
                                                       );                                                       
    
    ln_part_num:=ln_part_num+2;
    ELSE
    lt_loan_part_details(idx):= soa_obj_loanpt_details(pt_loan_part_details(idx).lenprd_product_code,
                                                       pt_loan_part_details(idx).repayment_amount,
                                                       pt_loan_part_details(idx).interest_only_amount,
                                                       pt_loan_part_details(idx).lapur_code,
                                                       pt_loan_part_details(idx).repayment_type,
                                                       pt_loan_part_details(idx).term,
                                                       pt_loan_part_details(idx).regulated
                                                       --pt_loan_part_details(idx).payment_amount,
                                                       --pt_loan_part_details(idx).part_num
                                                       );
      
    END IF;
    END LOOP; 
 
  -- Sorting the parts data. So that the same can be inserted into the Loan_Parts table.
        SELECT CAST ( MULTISET( SELECT soa_obj_loanpt_details
                                   ( lenprd_product_code
                                   , repayment_amount
                                   , interest_only_amount
                                   , lapur_code
                                   , repayment_type
                                   , term
                                   , regulated )
                                   --, NVL(repayment_amount,interest_only_amount)
                                   --, part_num)
                            FROM TABLE( lt_loan_part_details )
                            ORDER BY term DESC, NVL(repayment_amount,interest_only_amount) DESC, lenprd_product_code 
                        ) AS soa_tbl_loanpt_details)
       INTO lt2_loan_part_details
       FROM dual;
      
              
  -- Insert records into the Loan_Parts table.
  BEGIN
    FOR ln_index IN lt2_loan_part_details.FIRST .. lt2_loan_part_details.LAST LOOP
      
      IF ln_index = 1 THEN
        ls_lptype_code := 'MAIN';
     ELSE
        ls_lptype_code := 'OTH';
     END IF;
        pack_part_dtl.pr_populate_loanpt(pn_accno => pn_loan_account_number,
                                         pn_account_type => pn_loanac_latype_code,
                                         pn_part_num => ln_index,
                                         ps_loan_part_type => ls_lptype_code,
                                         ps_purpose_type => lt2_loan_part_details(ln_index).lapur_code,
                                         pn_original_advance => lt2_loan_part_details(ln_index).repayment_amount,
                                         pn_loanap_sysid => pn_loan_app_sysid,
                                         pd_loanpt_start_date => ld_now,
                                         ps_update_id => ps_update_id,
                                         ps_update_allowed => ls_no);
                                         
       /*lt_loan_part_details(ln_index).part_num := ln_index;*/
    
    END LOOP;        

  END;

  -- Insert Records into loan_part_conditions table.
   BEGIN  

    FOR ln_index IN lt2_loan_part_details.first .. lt2_loan_part_details.last LOOP
      IF lt2_loan_part_details(ln_index).repayment_type = 'INT' THEN
        ln_int_only_amt := lt2_loan_part_details(ln_index).interest_only_amount;
      ELSE
        ln_int_only_amt := 0;
      END IF;
      
      SELECT lp.daily_rest_flag, lp.bundled_allowed INTO ls_daily_rest_flag, ls_bundled_flag 
      FROM lending_products lp
      WHERE lp.product_code = lt_loan_part_details(ln_index).lenprd_product_code 
      AND lp.end_date is NULL;
      
    pack_part_dtl.pr_populate_lpc(pn_accno => pn_loan_account_number,
                                  pn_account_type => pn_loanac_latype_code,
                                  --pn_part_num => lt_loan_part_details(ln_index).part_num,
                                  pn_part_num => ln_index,
                                  pn_product_id => lt_loan_part_details(ln_index).lenprd_product_code,
                                  ps_repayment_type => lt_loan_part_details(ln_index).repayment_type,
                                  pn_int_only_amt => ln_int_only_amt,
                                  pc_no_rv_ind => NULL,  -- Need to check
                                  pn_term => lt_loan_part_details(ln_index).term,
                                  pd_redm_pen_start_date => ld_today,  -- Need to check
                                  pn_ramt => 0, -- Need to check
                                  pc_miras_eligible => 'N', --Added  TDD v0.2
                                  pd_term_start_date => ld_today,
                                  pd_loanpt_start_date => ld_today,
                                  ps_update_id => ps_update_id,
                                  ps_daily_rest_flag => ls_daily_rest_flag,
                                  pc_bundled_flag => ls_bundled_flag,  
                                  pc_model_balance_flag => NULL, -- Need to check
                                  ps_regulated =>'Y', /*lt_loan_part_details(ln_index).regulated,*/ --Added  TDD v1.2
                                  ps_update_allowed => ls_no);

    END LOOP;        

  END;
       
  -- Insert Records into loan_part_statuses table.
  BEGIN  

      FOR ln_index IN lt_loan_part_details.first .. lt_loan_part_details.last LOOP  
          pack_part_dtl.pr_populate_lps(pn_accno => pn_loan_account_number,
                                        pn_account_type => pn_loanac_latype_code,
                                        pn_part_num => ln_index,
                                        --pn_part_num => lt_loan_part_details(ln_index).part_num,
                                        ps_loanpt_status => gs_lps_rofpen,
                                        pd_loanpt_status_date => ld_today, 
                                        ps_update_id => ps_update_id,
                                        ps_update_allowed => ls_no);  
      END LOOP;        

   END;
  
   EXCEPTION
    WHEN OTHERS THEN
      ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_loan_parts_setup - ' ||SQLERRM);
  END pr_loan_parts_setup;                                       


PROCEDURE pr_others_setup (pn_loan_account_number       IN NUMBER,
                           pn_loanac_latype_code        IN NUMBER,
                           ps_update_id                 IN VARCHAR2,
                           ps_bsac_stats_code           IN VARCHAR2,
                           pt_loan_part_details         IN soa_tbl_loanpt_details,
                           pt_party_details             IN soa_tbl_party_details,
                           pt_tbl_fee_details           IN soa_tbl_fee_details,
                           ps_purtpe_code               IN VARCHAR2,  
                           ps_valuation_type            IN VARCHAR2,
                           pn_valuation_amount          IN NUMBER,
                           ps_payment_route_name        IN VARCHAR2,
                           ps_payment_route_id          IN VARCHAR2,
                           ps_intermediaryid            IN VARCHAR2,             
                           pn_procuration_fee_amount    IN NUMBER,                
                           pd_completion_date           IN DATE,
                           ps_equity_share_scheme       IN VARCHAR2,         
                           ps_error_text                OUT VARCHAR2
                          ) 
 /* ********************************************************************************
  Name            : pr_others_setup
  Purpose         : Procedure to populate tables for new loan account in CORE
  Developer       : Ekta Garg (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Ekta Garg(TCS)     07-AUG-2018 FETR0016324:
                                          Private Procedure to Populate tables
                                          in SMBP Core for a new Mortgage Account. As part
                                          of this the data will be inserted into 
                                          1.Account_group_arrears_actions,
                                          2.Miras_limits,
                                          3.BSC_class_groups,
                                          4.Account_intrst_changes  
  ----------------------------------------------------------------------------------
  ********************************************************************************* */  
   IS
   -- Local variable declaration 
   ls_error                     VARCHAR2(130) := '';
   
   ld_now           CONSTANT    DATE := SYSDATE;
   ld_today         CONSTANT    DATE := TRUNC(ld_now);
   
   ls_fixed_rate_ind            VARCHAR2(1); 
   ls_notice_period             loan_accounts.notice_period_type%TYPE;
   ls_exists_warn               VARCHAR2(1);                     
   ls_wtp_code                  warning_types.code%TYPE;
   ls_int_typ                   VARCHAR2(1);
   ls_notes                     warnings.notes%TYPE;
   ls_descr                     warning_types.descr%TYPE;
   
   ln_part_interest_rate        NUMBER(12,2);  
   ln_mgapfe_sysid              NUMBER;
   
   /*--Cursor declaration
   CURSOR c_get_xref_source_uniq_id IS
   SELECT xref2.source_unique_id, xref2.source_system,xref2.created_by
    FROM cross_reference_external_ids xref1
    JOIN cross_reference_external_ids xref2
      ON xref1.source_unique_id = xref2.source_unique_id
     AND xref1.source_system = xref2.source_system 
   WHERE xref1.attribute_name =
         pack_header.fn_get_global('GS_TABLE_ID_LOANAC')
     AND xref1.attribute_nval = pn_loan_account_number
     AND xref2.attribute_name =
         pack_header.fn_get_global('GS_TABLEID_SAVACC')
     AND xref1.source_system = 'MSO'    
     AND xref1.ended_date IS NULL
     AND xref2.ended_date IS NULL;*/--Not in drop2
          
     CURSOR cur_loanac IS
      SELECT nvl(notice_period_type, 'M')             
      FROM loan_accounts la
      WHERE la.accgrp_num  = pn_loan_account_number
      AND la.latype_code = pn_loanac_latype_code;
      
      CURSOR cur_warnings IS
        SELECT 'Y'
        FROM warnings
        WHERE loanac_accgrp_num =  pn_loan_account_number
          AND loanac_latype_code =  pn_loanac_latype_code
          AND SYSDATE BETWEEN start_date AND NVL(end_date, SYSDATE);
      
      CURSOR cur_loan_part_inttyp  IS
      SELECT 'Y'
        FROM loan_part_conditions lpc
       WHERE lpc.loanac_accgrp_num = pn_loan_account_number
         AND lpc.loanac_latype_code = pn_loanac_latype_code
         AND lpc.repayment_type = 'INT';
      
   BEGIN
        
  INSERT INTO account_group_arrears_actions(accgrp_num,
                                            aat_code,
                                            start_date,
                                            update_id,
                                            update_time)
                                            VALUES
                                            (pn_loan_account_number,
                                             'CLEAR',
                                             ld_today,
                                             ps_update_id,
                                             ld_now);

  
    INSERT INTO miras_limits(
                            loanac_accgrp_num,
                            loanac_latype_code,
                            limit,
                            mirlt_code,
                            start_date,
                            miras_auth_code,
                            update_id,
                            update_time
                            )
                            VALUES
                            (
                            pn_loan_account_number,
                            pn_loanac_latype_code,    
                            0.00,
                            2,
                            ld_today,
                            NULL,
                            ps_update_id,
                            ld_now
                            );
   --integrity constraint violation -- checks for testing 

    INSERT INTO bsc_class_groups(loanac_accgrp_num,
                                 loanac_latype_code,
                                 start_date,
                                 bsc_class,
                                 bsc_group,
                                 end_date)
                                 VALUES
                                (pn_loan_account_number,
                                 pn_loanac_latype_code,
                                 ld_today,
                                 1,
                                 0,
                                 NULL);
  --integrity constraint violation -- checks for testing

 
 --Populate ACCOUNT_INTRST_CHANGES table with RECORD_TYPE= 'A' and INTRST_RATE =0 and other
 -- rows as RECORD_TYPE= 'I' and INTRST_RATE as product interest rate for the loan part.
  
   OPEN cur_loanac;
   FETCH cur_loanac INTO ls_notice_period;
   CLOSE cur_loanac;
   
   FOR ln_index IN pt_loan_part_details.FIRST..pt_loan_part_details.LAST
   LOOP 
     pack_aic.pr_get_product_intrst(pt_loan_part_details(ln_index).lenprd_product_code,
                                    ld_today, 
                                    ld_today,
                                    0, 
                                    ls_notice_period,
                                    'Y',
                                    ls_fixed_rate_ind,
                                    ln_part_interest_rate);
     
       INSERT INTO account_intrst_changes(accgrp_num,
                                          loanac_latype_code,
                                          loanpt_part_num,
                                          record_type,
                                          effective_date,
                                          intrst_rate,
                                          update_id,
                                          update_time)
                                    VALUES(pn_loan_account_number,
                                           pn_loanac_latype_code,
                                           ln_index,
                                           --pt_loan_part_details(i).part_num,
                                           CASE WHEN ln_part_interest_rate = 0
                                           THEN 'A'
                                           ELSE 'I' END,
                                           ld_today,
                                           ln_part_interest_rate,
                                           ps_update_id,
                                           ld_now);
     
   END LOOP;
  
   /*Populate MTGE_APPLICATION_FEES table with Fee Details using input parameter PT_TBL_FEE_DETAILS*/
    FOR idx IN pt_tbl_fee_details.FIRST..pt_tbl_fee_details.LAST LOOP
   
    ln_mgapfe_sysid := pack_sequence.fn_next_number('MGAPFE_SYSID_SEQ');
      
      INSERT INTO mtge_application_fees
      (sysid,
       application_id,
       application_sysid,
       feedef_code,
       element_id,
       element_sysid,
       fee_amt, -- Full fee amount
       society_amt,--handled in tech design
       client_amt,
       free_amt,
       cashback_amt,
       add_to_loan,
       part_added_to,
       use_in_apr_calc,
       cash_flow_point,
       applied_to_core,
       applied_manually,
       create_id,
       create_time,
       update_id,
       update_time,
       prdfrl_code,--check this
       can_be_added,
       feedfp_sysid,
       spent_fee)
      VALUES
      (ln_mgapfe_sysid,--sysid sequence
       'LOANAP',
       pn_loan_account_number,
       pt_tbl_fee_details(idx).fee_type, 
       NULL,
       NULL,
       pt_tbl_fee_details(idx).original_fee_amount,--should be full fee amount,should adjustment be added?
       NULL,--handled in tech design written in DM(society amount)
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL, 
       'BEGIN',--pt_tbl_fee_details(idx).payable_when,--to confirm cash flow point
       NULL,
       NULL,
       ps_update_id,
       SYSDATE,
       ps_update_id,
       SYSDATE,
       NULL,-- Derived written in DM
       NULL,
       NULL,
       NULL);
 
    END LOOP;
  
  /*Call PR_UPDATE_CORR_ADDRESS to update the Property address as Correspondence address for 
  customers linked to the mortgage account if PT_PARTY_DETAILS.MOVINTO_PRPTY_ATCMPLTN=?Y?.*/
  -- To update the Property address as Correspondence address for customers 
 -- linked to the mortgage account. 
   
   /*FOR i IN pt_party_details.FIRST..pt_party_details.LAST LOOP     
     IF pt_party_details(i).movinto_prpty_atcmpltn = 'Y' THEN
       
       pr_update_corr_address  (pn_loan_account_number,
                                soa_tbl_party_details(pt_party_details(i)));
     END IF;

   END LOOP;*/
  /*Create following warnings on the Loan Account if applicable, in case of SPECIAL_CORRESPONDENCE warning,
   if more than applicant has flag value then create the one on Main applicant 
   and for others mention as Notes. If nothing against main applicant then create 1 warning against 
   1 applicant and for rest mention in notes.*/
      OPEN cur_warnings;
      FETCH cur_warnings INTO ls_exists_warn;
      CLOSE cur_warnings;   
     
     IF ls_exists_warn <> 'Y' THEN
     
       -- Any loan part is interest only 
        OPEN cur_loan_part_inttyp;
        FETCH cur_loan_part_inttyp INTO ls_int_typ;
        CLOSE cur_loan_part_inttyp;  
 
        
       --check parties here.  
       /*FOR i IN pt_party_details.FIRST..pt_party_details.LAST
       LOOP    
          --spl correspondence
          IF pt_party_details(i).special_correspondence in ('0100','0101','0102') THEN
            
             IF pt_party_details(i).party_index = 1 THEN
              ls_wtp_code:= pt_party_details(i).special_correspondence;
             ELSE 
               SELECT wt.descr
                 INTO ls_descr
                 FROM warning_types wt
                WHERE wt.code = pt_party_details(i).special_correspondence;
                ls_notes := ls_descr || ls_notes;
             END IF;
          ELSE
             IF pt_party_details(i).party_index = 1 THEN
                 IF ps_equity_share_scheme = 'Help To Buy - England' THEN
                  ls_wtp_code := '9911'; 
                 ELSIF ps_equity_share_scheme = 'Help To Buy - London' THEN
                  ls_wtp_code := '9912'; 
                 ELSIF ps_equity_share_scheme = 'Help To Buy - Wales' THEN
                  ls_wtp_code := '9913'; 
                 ELSIF ps_purtpe_code = 'SHROWN' THEN
                  ls_wtp_code := '9040'; 
                 ELSIF ps_valuation_type = 'EA Valuation' THEN
                  ls_wtp_code := '5140';
                 ELSIF ps_valuation_type = 'AVM Valuation' THEN
                  ls_wtp_code := '5130';
                 ELSIF ls_int_typ = 'Y' THEN
                   ls_wtp_code := '9841';
                 END IF; 
             ELSE
             SELECT wt.descr
               INTO ls_descr
               FROM warning_types wt
              WHERE wt.code = ls_wtp_code;
              ls_notes := ls_descr || ls_notes;
             END IF; 
         END IF; 
       
        INSERT INTO warnings
               (loanac_accgrp_num,
                loanac_latype_code,
                wtp_code,
                start_date,
                end_date,
                notes,
                close_date,              
                close_user_id,
                update_id,
                update_time)
        VALUES (pn_loan_account_number,
                pn_loanac_latype_code,
                ls_wtp_code,
                SYSDATE,
                NULL,
                NULL,
                NULL,
                NULL,
                USER,
                SYSDATE);
      END LOOP; */
      
      END IF;
      
/*Call PR_CREATE_HASTENING_SCHEDULE to create hastening schedule for land registry and new deeds*/
        pr_create_hastening_schedule(pn_loan_account_number,
                                     ps_bsac_stats_code,
                                     ps_update_id);


/*Call PR_CREATE_EVENTS to create Loan Account events and property events on the Loan account*/
        pr_create_events(pn_loan_account_number,
                         ps_valuation_type,       
                         ps_update_id); --integrity constraint violation -- checks for testing

 -- Call PR_CREATE_FEE_TRANSACTIONS to post Lendings Transactions for
 -- upfront Fee paid and waived Fee scenario.  
    /*pr_create_fee_transactions (pn_loan_account_number,
                                ps_update_id
                               ); */--Part of payment and finance TDD only commenting here for testing
  

/*Call PR_POPULATE_COMMISSION_DTLS to populate the tables required for Commission payment if 
the PN_PROCURATION_FEE_AMOUNT > 0 using commission data mapping sheet.*/
   IF pn_procuration_fee_amount > 0 THEN
   pr_populate_commission_dtls(pn_loan_account_number ,
                               ps_payment_route_name,
                               ps_payment_route_id,
                               ps_intermediaryid,
                               pn_procuration_fee_amount,
                               pd_completion_date);
    END IF;
                                           

  -- Not in DROP 2 ---
   --  Populate PN_OFFSET_SAV_BAL into CROSS_REFERENCE_EXTERNAL_IDS 
    -- for offset mortgage against the offset savings account. 
  /* <<pn_offset_sav_bal_xref>>
   BEGIN
    OPEN c_get_xref_source_uniq_id;
      FETCH c_get_xref_source_uniq_id 
      INTO ls_source_unique_id ,ls_source_system,ls_created_by;
     
     pack_mso_xref.pr_insert_cross_ref_ext_ids(ls_source_unique_id ,
                                               ls_source_system    ,
                                               'EXPECTED_OPENING_OFFSET_BAL' ,
                                               'NUMBER'            ,
                                               NULL                ,
                                               PN_OFFSET_SAV_BAL   ,
                                               NULL                ,
                                               ld_today            ,
                                               ls_created_by       
                                               );
   EXCEPTION
     WHEN OTHERS THEN
      ls_error:= SQLERRM||' - occurred in call to Insert data into pn_offset_sav_bal_xref[soa_mortgagecompletions.pr_others_setup]';
      ps_error_text := ls_error; 
    
  END pn_offset_sav_bal_xref; */
  EXCEPTION
      WHEN OTHERS THEN
        ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_others_setup - ' ||SQLERRM);

 END pr_others_setup; 
 
    
PROCEDURE pr_create_expected_payments (pn_loan_account_number       IN NUMBER,
                                       ps_update_id                 IN VARCHAR2
                                       )IS
  /* ********************************************************************************
  Name            : pr_create_expected_payments
  Purpose         : Procedure to create expected payment entries(CMI)
                    for repayment of loan from CORE.
  Developer       : Soumya Ranjan(TCS),Ekta Garg (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Soumya Ranjan(TCS) 04-Sep-2018 FETR0016324:
           Ekta Garg                     
   
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
              
    -- Local variable declaration
    ls_yes           CONSTANT    VARCHAR2(1):='Y';
    ls_parameter                 VARCHAR2(30);
    
    ls_pay_calc_meth             loan_accounts.payment_calculation_method%TYPE;
    ls_rofsta_code   CONSTANT    release_of_funds.rofsta_code%TYPE := 'PAID';
    ls_epf_code                  expected_payments.epf_code%TYPE;
    ls_bundled_flag              loan_part_conditions.bundled_flag%TYPE;

    ln_preffered_day             payment_methods.collection_day%TYPE;
    ln_pm_sysid                  payment_methods.sysid%TYPE;
    ln_part_number               expected_payments.loanpt_part_num%TYPE;
    ln_payment_amount            expected_payments.amount%TYPE;
    ln_saving_bal                cross_reference_external_ids.attribute_nval%TYPE;
    ln_ddl_sysid                 expected_payments.ddl_sysid%TYPE;
    
    ld_release_date              release_of_funds.release_date%TYPE;
    ld_current_date              DATE;
    ld_next_payment_date         DATE;
    
    ls_start_date                VARCHAR2(10);
    ls_end_date                  VARCHAR2(10);
    
    ld_start_date                expected_payments.start_date%TYPE;
    ld_end_date                  expected_payments.end_date%TYPE;
  
     --To retrieve loan release date 
      CURSOR c_rof(cs_rofsta_code IN VARCHAR2,cn_loan_account_number IN NUMBER) IS
       SELECT rof.release_date 
       FROM release_of_funds rof
       WHERE rof.account_number = cn_loan_account_number AND
             rof.rofsta_code = cs_rofsta_code AND
             rof.end_date IS NULL AND
             rof.child_type IS NULL;
    
     --To retrieve payment method for direct debit
      CURSOR c_payment_method IS
       SELECT pm.sysid
       FROM payment_methods pm
       WHERE pm.txnmth_code = 'DD'
       AND pm.accgrp_num = pn_loan_account_number
       AND pm.ddcrt_code IS NULL 
       AND pm.acr_code IS NULL;
     
     --Loan parts corresponding to loan account    
       CURSOR c_loan_part IS  
        SELECT lp.original_advance, lp.part_num
        FROM loan_parts lp
        WHERE lp.loanac_accgrp_num = pn_loan_account_number
        AND lp.loanac_latype_code = gn_loanac_latype_code
        AND lp.lapur_code = 'MORTG' 
        AND lp.end_date IS NULL;
     
     --To retrive payment calculation method  
       CURSOR c_pay_calc_meth IS 
        SELECT payment_calculation_method
        FROM loan_accounts
        WHERE accgrp_num = pn_loan_account_number;
     
     --Check for offset account   
       CURSOR c_check_bundled_flag_lpc IS
        SELECT lpc.bundled_flag 
        FROM loan_part_conditions lpc
        WHERE lpc.loanac_accgrp_num = pn_loan_account_number
        AND lpc.end_date IS NULL; 
     
     --To retrieve saving balance  
       CURSOR c_get_savings_bal IS 
       SELECT la.stated_savings_balance
         FROM loan_applications la
        WHERE la.loanac_accgrp_num = pn_loan_account_number
          AND la.loanac_latype_code = gn_loanac_latype_code
          AND la.loaptp_code = gs_loaptp_code;
    
    -- Exceptions
    exp_param_mandatory         EXCEPTION;
    exp_dd_does_not_exist       EXCEPTION;
    exp_pay_calc_not_found      EXCEPTION;
    exp_saving_bal_not_found    EXCEPTION;
    exp_not_found               EXCEPTION;
        
  BEGIN
   --Validating input parameters
    IF ps_update_id IS NULL THEN
        ls_parameter := 'Updating Id';
       RAISE exp_param_mandatory;
    ELSIF (pn_loan_account_number <= 0 OR pn_loan_account_number IS NULL)THEN
        ls_parameter := 'Invalid Loan Account Number';
        RAISE exp_param_mandatory;
    END IF;
   
        OPEN c_payment_method;
        FETCH c_payment_method INTO ln_pm_sysid;
        IF c_payment_method%NOTFOUND THEN
          RAISE exp_dd_does_not_exist;
        END IF;
        CLOSE c_payment_method;
    
        OPEN c_pay_calc_meth;
        FETCH c_pay_calc_meth INTO ls_pay_calc_meth;
        IF c_pay_calc_meth%NOTFOUND THEN
          RAISE exp_pay_calc_not_found;
        END IF;
        CLOSE c_pay_calc_meth;
      
        OPEN c_check_bundled_flag_lpc;
        FETCH c_check_bundled_flag_lpc  INTO ls_bundled_flag;
        CLOSE c_check_bundled_flag_lpc;
        
        IF ls_bundled_flag = ls_yes THEN
          OPEN c_get_savings_bal;
          FETCH c_get_savings_bal INTO ln_saving_bal;        
          IF c_get_savings_bal%NOTFOUND THEN 
            RAISE exp_saving_bal_not_found;
          END IF;
          CLOSE c_get_savings_bal; 
        END IF;
        
       OPEN c_loan_part;
       LOOP
       FETCH c_loan_part INTO ln_payment_amount , ln_part_number;
       EXIT WHEN c_loan_part%NOTFOUND;
       
       BEGIN
        pack_paynew.pr_calculate_for_new(pn_loan_account_number
                                          ,gn_loanac_latype_code
                                          ,ln_part_number
                                          ,trunc(sysdate)
                                          ,trunc(sysdate)
                                          ,gs_epcr_inlrof
                                          ,USER
                                          ,'PAYNEW'
                                          ,'Y'
                                          ,pack_sequence.fn_next_number('hisgrp_sysid_seq')
                                          ,ln_payment_amount
                                          ,ln_saving_bal
                                          ,ls_pay_calc_meth
                                          );
      EXCEPTION
        WHEN OTHERS THEN
          ybs_application_error(-20002,'E10791#');
      END;                                   
          
     OPEN c_rof(ls_rofsta_code,pn_loan_account_number);
     FETCH c_rof INTO ld_release_date; 
     IF c_rof%NOTFOUND THEN
       RAISE exp_not_found;
     END IF;
     CLOSE c_rof;
       
       --Emulation of existing completion process(LEN40501B).
       pack_day.pr_rpd(pn_loan_account_number 
                       ,gn_loanac_latype_code 
                       ,ld_release_date 
                       ,ld_current_date
                       ,ld_next_payment_date);
     
     IF(TO_CHAR(TRUNC(ld_next_payment_date),'Month')=TO_CHAR(TRUNC(ld_release_date), 'Month')) THEN
         ld_next_payment_date := ADD_MONTHS(ld_next_payment_date,1);
     END IF;
   
       BEGIN
       IF (ld_next_payment_date < ld_release_date+14) THEN
        -- Inserting data for EP#2                   
        gs_ept_sysmor    := 'SYSMOR';
        ls_epf_code      := gs_epcr_prmfrq_monthly;
        ld_start_date    := ld_next_payment_date;
        ls_start_date    := TO_CHAR(ld_start_date,'DDMMYYYY');
        ln_preffered_day := extract(DAY FROM ld_start_date);        
        ld_end_date      := ADD_MONTHS(ld_next_payment_date,1)-1;
        ls_end_date      := TO_CHAR(ld_end_date,'DDMMYYYY');
       
       pack_exp_pymnt.pr_populate_expected_payments(pn_accno => pn_loan_account_number,
                                                     pn_account_type => gn_loanac_latype_code,
                                                     pn_part_num => ln_part_number,
                                                     ps_pay_type => gs_ept_sysmor,
                                                     ps_pay_freq => ls_epf_code,
                                                     ps_pay_change_reason => gs_epcr_inlrof,
                                                     pn_ddl_sysid => NULL,
                                                     pn_expected_day => ln_preffered_day,
                                                     ps_end_date => ls_end_date,
                                                     ps_start_date => ls_start_date,
                                                     pn_amount => ln_payment_amount,
                                                     pn_subsidy_amt => NULL,
                                                     ps_user => ps_update_id,
                                                     pc_flag => NULL,
                                                     pn_hisgrp_sysid => NULL,
                                                     pn_exppay_sysid => NULL);

        -- Inserting data for EP#3                   
        gs_ept_sysmor    := 'SYSMOR';
        ls_epf_code      := gs_epcr_prmfrq_monthly;
        ld_start_date    := ADD_MONTHS(ld_next_payment_date,1);
        ls_start_date    := TO_CHAR(ld_start_date,'DDMMYYYY');
        ln_preffered_day := extract(DAY FROM ld_start_date);        
        ln_ddl_sysid     := ln_pm_sysid;

        pack_exp_pymnt.pr_populate_expected_payments(pn_accno => pn_loan_account_number,
                                                     pn_account_type => gn_loanac_latype_code,
                                                     pn_part_num => ln_part_number,
                                                     ps_pay_type => gs_ept_sysmor,
                                                     ps_pay_freq => ls_epf_code,
                                                     ps_pay_change_reason => gs_epcr_inlrof,
                                                     pn_ddl_sysid => ln_ddl_sysid,
                                                     pn_expected_day => ln_preffered_day,
                                                     ps_end_date => NULL,
                                                     ps_start_date => ls_start_date,
                                                     pn_amount => ln_payment_amount,
                                                     pn_subsidy_amt => NULL,
                                                     ps_user => ps_update_id,
                                                     pc_flag => NULL,
                                                     pn_hisgrp_sysid => NULL,
                                                     pn_exppay_sysid => NULL);
                 
        -- Inserting data for EP#4                   
        gs_ept_sysmor    := 'REPD';
        ls_epf_code      := 'ONEOFF';
        ld_start_date    := ld_release_date+14;
        ls_start_date    := TO_CHAR(ld_start_date,'DDMMYYYY');
        ln_preffered_day := extract(DAY FROM ld_start_date);
        ln_ddl_sysid     := ln_pm_sysid;
        ld_end_date      := ld_release_date+14;
        ls_end_date      := TO_CHAR(ld_end_date,'DDMMYYYY');

        pack_exp_pymnt.pr_populate_expected_payments(pn_accno => pn_loan_account_number,
                                                     pn_account_type => gn_loanac_latype_code,
                                                     pn_part_num => ln_part_number,
                                                     ps_pay_type => gs_ept_sysmor,
                                                     ps_pay_freq => ls_epf_code,
                                                     ps_pay_change_reason => gs_epcr_inlrof,
                                                     pn_ddl_sysid => ln_ddl_sysid,
                                                     pn_expected_day => ln_preffered_day,
                                                     ps_end_date => ls_end_date,
                                                     ps_start_date => ls_start_date,
                                                     pn_amount => ln_payment_amount,
                                                     pn_subsidy_amt => NULL,
                                                     ps_user => ps_update_id,
                                                     pc_flag => NULL,
                                                     pn_hisgrp_sysid => NULL,
                                                     pn_exppay_sysid => NULL);
                 
                 
         ELSE
         -- Inserting data for EP#1                   
        gs_ept_sysmor    := 'SYSMOR';
        ls_epf_code      := gs_epcr_prmfrq_monthly;
        ld_start_date    := ld_next_payment_date;
        ls_start_date    := TO_CHAR(ld_start_date,'DDMMYYYY');
        ln_preffered_day := extract(DAY FROM ld_start_date);        
        ln_ddl_sysid     := ln_pm_sysid;
                
        pack_exp_pymnt.pr_populate_expected_payments(pn_accno => pn_loan_account_number,
                                                      pn_account_type => gn_loanac_latype_code,
                                                      pn_part_num => ln_part_number,
                                                      ps_pay_type => gs_ept_sysmor,
                                                      ps_pay_freq => ls_epf_code,
                                                      ps_pay_change_reason => gs_epcr_inlrof,
                                                      pn_ddl_sysid => ln_ddl_sysid,
                                                      pn_expected_day => ln_preffered_day,
                                                      ps_end_date => NULL,
                                                      ps_start_date => ls_start_date,
                                                      pn_amount => ln_payment_amount,
                                                      pn_subsidy_amt => NULL,
                                                      ps_user => ps_update_id,
                                                      pc_flag => NULL,
                                                      pn_hisgrp_sysid => NULL,
                                                      pn_exppay_sysid => NULL);
     
              END IF;
      EXCEPTION
          WHEN OTHERS THEN
            ybs_application_error(-20002,'E10791');
      END ;
     END LOOP;
    
    CLOSE c_loan_part;
   
  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022, 'E00013# Mandatory Parameters-'|| ls_parameter);
    WHEN exp_dd_does_not_exist THEN
      ybs_application_error(-20022, 'E7166# Direct Debit');
    WHEN exp_pay_calc_not_found THEN
      ybs_application_error(-20022, 'E10420# Payment Calculation Method');
    WHEN exp_saving_bal_not_found THEN
      ybs_application_error(-20022, 'E26266# Offset Saving Balance');
    WHEN exp_not_found THEN
      ybs_application_error(-20022, 'E10420');
    WHEN OTHERS THEN
      ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_create_expected_payments - ' ||SQLERRM);
                                                                                  
  END pr_create_expected_payments;

  

PROCEDURE pr_create_loan_account_dtls(pn_account_number          IN NUMBER                
                                      ,ps_brand_code              IN VARCHAR2              
                                      ,pt_party_details           IN soa_tbl_party_details 
                                      ,pn_regd_pay_day            IN NUMBER                
                                      ,ps_pay_calc_mthd           IN VARCHAR2              
                                      ,pn_offset_sav_bal          IN NUMBER                
                                      ,pd_application_date        IN DATE                  
                                      ,ps_business_source         IN VARCHAR2              
                                      ,pt_loan_part_details       IN soa_tbl_loanpt_details
                                     /* ,ps_property_purpose        IN VARCHAR2*/              
                                      ,ps_application_type        IN VARCHAR2              
                                      ,ps_first_time_buyer        IN VARCHAR2              
                                      ,ps_specialist_rep_req      IN VARCHAR2              
                                      ,ps_declaration_completed   IN VARCHAR2              
                                      ,ps_purtpe_code             IN VARCHAR2              
                                      ,pn_lease_term              IN NUMBER                
                                      ,ps_introducer_fee          IN VARCHAR2              
                                      ,pn_broker_fee_amount       IN NUMBER                
                                      ,pn_broker_refund_amount    IN NUMBER                
                                      ,pn_agreed_adv              IN NUMBER                
                                      ,pt_addr_dtls               IN soa_tbl_address_dtls  
                                      ,ps_bsac_stats_code         IN VARCHAR2              
                                      ,ps_prptyp_code             IN VARCHAR2              
                                      ,ps_registered_ind          IN VARCHAR2              
                                      ,pn_other_rooms             IN NUMBER                
                                      ,pd_orig_purch_date         IN DATE                  
                                      ,ps_pct_code                IN VARCHAR2              
                                      ,pn_num_of_bedrooms         IN NUMBER                
                                      ,pn_year_built              IN NUMBER                
                                      ,pn_purch_price             IN NUMBER                
                                      /*,pn_shared_percentage       IN NUMBER                
                                      ,ps_shared_type             IN VARCHAR2*/              
                                      ,ps_roof_construction_code  IN VARCHAR2              
                                      ,ps_prpttp_code             IN VARCHAR2              
                                      ,ps_title_number            IN VARCHAR2              
                                      ,ps_pbuset_code             IN VARCHAR2              
                                      ,ps_update_id               IN VARCHAR2              
                                      ,pd_update_date             IN DATE                  
                                      ,pt_tbl_fee_details         IN soa_tbl_fee_details   
                                      ,ps_payment_route_name      IN VARCHAR2              
                                      ,ps_payment_route_id        IN VARCHAR2              
                                      ,ps_intermediary_id         IN VARCHAR2     
                                      ,pn_procuration_fee_amount  IN NUMBER                
                                      ,pd_completion_date         IN DATE                  
                                      ,ps_valuation_type          IN VARCHAR2              
                                      ,pn_valuation_amount        IN NUMBER                
                                      ,pd_valuation_date          IN DATE                  
                                      ,ps_est_reinstatement_cost  IN VARCHAR2              
                                      ,ps_new_build_indicator     IN VARCHAR2
                                      ,ps_equity_share_scheme     IN VARCHAR2
                                      )IS
  /* ************************************************************************************
  Name            : pr_create_loan_account_dtls
  Purpose         : Procedure to setup loan accounts data required for servicing in CORE
  Developer       : Soumya Ranjan (TCS)
  ---------------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -----------------------------------------------
  1.0      Soumya Ranjan(TCS) 11-JUN-2018 FETR0016324:
                                          Procedure to setup Loan Accounts data in Core. 
                                          
  2.0      Ekta Garg(TCS)     10-Sep-2018 Procedure to setup Loan Accounts data in Core. 
                                          This will be achieved by inserting data into Accounts, 
                                          Loan,Property and other related tables.                               
  ---------------------------------------------------------------------------------------
  *************************************************************************************** */
    -- Local variable declaration
    
    ls_error_text              VARCHAR2(130);

    ln_loan_app_sysid           loan_applications.sysid%TYPE;
    ln_property_id              properties.sysid%TYPE;
    ln_loan_part_count          NUMBER;
    ln_address_count            NUMBER;
    ln_party_count              NUMBER;
    ls_parameter                VARCHAR2(30);           
    ls_application_type         VARCHAR2(10);              
    ls_brand_code               loan_accounts.brand_code%TYPE;
    ls_bsac_stats_code          properties.bsac_stats_code%TYPE;      
    ls_business_source          sales_enquiry.business_source%TYPE;                
    ls_declaration_completed    loan_applications.declarat_completed%TYPE;   
    ls_first_time_buyer         loan_applications.first_time_buyer%TYPE;     
    ls_pbuset_code              prp_bus_uses.pbuset_code%TYPE;          
    ls_pct_code                 properties.pct_code%TYPE;
    ls_property_purpose         property_details.purpose_built%TYPE;
    ls_prpttp_code              property_events.prpttp_code%TYPE;
    ls_prptyp_code              property_details.prptyp_code%TYPE;
    ls_purtpe_code              loan_applications.purtpe_code%TYPE;
    ls_registered_ind           properties.registered_ind%TYPE;
    ls_specialist_rep_req       loan_applications.specialist_rep_req%TYPE;
    ls_title_number             property_title_numbers.title_num%TYPE;
    ls_update_id                loan_applications.update_id%TYPE;
   
    -- Exception declaration
    exp_param_mandatory         EXCEPTION;
    
  BEGIN

    -- Trimming the input Varchar variables to see if any null values have been passed.
     ls_application_type        :=  TRIM(ps_application_type);
     ls_brand_code              :=  TRIM(ps_brand_code);
     ls_bsac_stats_code         :=  TRIM(ps_bsac_stats_code);
     ls_business_source         :=  TRIM(ps_business_source);
     ls_declaration_completed   :=  TRIM(ps_declaration_completed);
     ls_first_time_buyer        :=  TRIM(ps_first_time_buyer);
     ls_pbuset_code             :=  TRIM(ps_pbuset_code);
     ls_pct_code                :=  TRIM(ps_pct_code);
     /*ls_property_purpose        :=  TRIM(ps_property_purpose);*/
     ls_prpttp_code             :=  TRIM(ps_prpttp_code);
     ls_prptyp_code             :=  TRIM(ps_prptyp_code);
     ls_purtpe_code             :=  TRIM(ps_purtpe_code);
     ls_registered_ind          :=  TRIM(ps_registered_ind);
     ls_specialist_rep_req      :=  TRIM(ps_specialist_rep_req);
     ls_title_number            :=  TRIM(ps_title_number);
     ls_update_id               :=  TRIM(ps_update_id);
     
     ln_loan_part_count         :=  CARDINALITY(pt_loan_part_details);
     ln_address_count           :=  CARDINALITY(pt_addr_dtls);
     ln_party_count             :=  CARDINALITY(pt_party_details);
 
     --Validating mandatory parameters
     IF  ls_application_type IS NULL THEN
       ls_parameter := 'Application Type';
       RAISE exp_param_mandatory;
     ELSIF ls_brand_code IS NULL THEN
       ls_parameter := 'Brand Code';
       RAISE exp_param_mandatory;
     ELSIF ls_bsac_stats_code IS NULL THEN
       ls_parameter := 'BSAC Stats Code';
       RAISE exp_param_mandatory;
     ELSIF ls_business_source IS NULL THEN
       ls_parameter := 'Business Source';
       RAISE exp_param_mandatory;
     ELSIF ls_declaration_completed IS NULL THEN
       ls_parameter := 'Declaration Completed';
       RAISE exp_param_mandatory;
     ELSIF ls_first_time_buyer IS NULL THEN
       ls_parameter := 'First Time Buyer';
       RAISE exp_param_mandatory;
     ELSIF ls_pbuset_code IS NULL THEN
       ls_parameter := 'PBUSET Code';
       RAISE exp_param_mandatory;
     ELSIF ls_pct_code IS NULL THEN
       ls_parameter := 'PCT Code';
       RAISE exp_param_mandatory;
     ELSIF ls_property_purpose IS NULL THEN
       ls_parameter := 'Property Purpose';
       RAISE exp_param_mandatory;
     ELSIF ls_prpttp_code IS NULL THEN
       ls_parameter := 'PRPTTP Code';
       RAISE exp_param_mandatory;
     ELSIF ls_prptyp_code IS NULL THEN
       ls_parameter := 'PRPTYP Code';
       RAISE exp_param_mandatory;
     ELSIF ls_purtpe_code IS NULL THEN
       ls_parameter := 'PURTPE Code';
       RAISE exp_param_mandatory;
     ELSIF ls_registered_ind IS NULL THEN
       ls_parameter := 'Registered Indicator';
       RAISE exp_param_mandatory;
     ELSIF ls_specialist_rep_req IS NULL THEN
       ls_parameter := 'Specialist Report Required';
       RAISE exp_param_mandatory;
     ELSIF ls_title_number IS NULL THEN
       ls_parameter := 'Title Number';
       RAISE exp_param_mandatory;
     ELSIF ls_update_id IS NULL THEN
       ls_parameter := 'Update Id';
       RAISE exp_param_mandatory;
     ELSIF ln_loan_part_count <= 0 THEN
       ls_parameter := 'Loan Part Details';
       RAISE exp_param_mandatory;
     ELSIF ln_address_count <= 0 THEN
       ls_parameter := 'Address Details';
       RAISE exp_param_mandatory;
     ELSIF ln_party_count <= 0 THEN
       ls_parameter := 'Party Details';
       RAISE exp_param_mandatory;
     ELSIF (pn_account_number <= 0 OR pn_account_number IS NULL) THEN
       ls_parameter := 'Account Number';
       RAISE exp_param_mandatory;
     ELSIF (pn_agreed_adv < 0 OR pn_agreed_adv IS NULL) THEN
       ls_parameter := 'Agreed Advance';
       RAISE exp_param_mandatory;
     ELSIF (pn_num_of_bedrooms < 0 OR pn_num_of_bedrooms IS NULL) THEN
       ls_parameter := 'Number Of Bedrooms';
       RAISE exp_param_mandatory;
     ELSIF (pn_other_rooms < 0 OR pn_other_rooms IS NULL) THEN
       ls_parameter := 'Number Of Other Rooms';
       RAISE exp_param_mandatory;
     ELSIF (pn_purch_price < 0 OR pn_purch_price IS NULL) THEN
       ls_parameter := 'Purchase Price';
       RAISE exp_param_mandatory;
     ELSIF (pn_regd_pay_day <= 0 OR pn_regd_pay_day IS NULL) THEN
       ls_parameter := 'Registered Pay Day';
       RAISE exp_param_mandatory;
     ELSIF (pn_year_built <= 0 OR pn_year_built IS NULL) THEN
       ls_parameter := 'Year Built';
       RAISE exp_param_mandatory;
     ELSIF (pd_update_date IS NULL) THEN
       ls_parameter := 'Update Date';
       RAISE exp_param_mandatory;
     ELSIF (pd_application_date IS NULL) THEN
       ls_parameter := 'Application Date';
       RAISE exp_param_mandatory;
     ELSIF (pd_orig_purch_date IS NULL) THEN
       ls_parameter := 'Original Purchase Date';
       RAISE exp_param_mandatory;
     END IF;
    
  -- Calling the Private Procedure to insert data into the Loan Account Tables tables.        
         pr_account_setup(pn_account_number
                          ,pt_party_details
                          ,pd_application_date
                          ,pn_regd_pay_day
                          ,ls_brand_code
                          ,ps_intermediary_id  
                          ,ps_payment_route_id 
                          ,ps_payment_route_name 
                          ,ls_error_text
                          );

   -- Calling the Private Procedure to insert data into the Loan Parts related tables.        
         pr_loan_parts_setup(pn_account_number           
                             ,ln_loan_app_sysid           
                             ,gn_loanac_latype_code       
                             ,pt_loan_part_details        
                             ,ps_update_id                
                             ,ls_error_text               
                             );

   -- Calling the Private Procedure to insert data into the Properties related tables.        
         pr_create_property_details(pn_account_number           
                                    ,ls_update_id                                                       
                                    ,pt_addr_dtls                
                                    ,ps_bsac_stats_code          
                                    ,ps_prptyp_code              
                                    ,ps_new_build_indicator             
                                    ,ps_registered_ind           
                                    ,pn_other_rooms       
                                    ,pd_orig_purch_date          
                                    ,ps_pct_code                 
                                    ,pn_num_of_bedrooms          
                                    ,pn_year_built               
                                    ,pn_purch_price              
                                    --,pn_shared_percentage 
                                    ,0             
                                    --,ps_shared_type 
                                    ,'A'             
                                    ,ps_roof_construction_code                
                                    ,ps_prpttp_code              
                                    ,ps_title_number             
                                    ,ps_pbuset_code                                                     
                                    ,ln_property_id              
                                    ,ls_error_text
                                    );                                           
        
  -- Calling private procedures to insert data into account_group_arrears_action and invoking 
  -- pr_update_corr_address,
          pr_others_setup(pn_account_number
                          ,gn_loanac_latype_code   
                          ,ls_update_id
                          ,ps_bsac_stats_code 
                          ,pt_loan_part_details 
                          ,pt_party_details
                          ,pt_tbl_fee_details
                          ,ps_purtpe_code              
                          ,ps_valuation_type            
                          ,pn_valuation_amount          
                          ,ps_payment_route_name        
                          ,ps_payment_route_id          
                          ,ps_intermediary_id                       
                          ,pn_procuration_fee_amount                   
                          ,pd_completion_date
                          ,ps_equity_share_scheme                   
                          ,ls_error_text);
 
  EXCEPTION
    WHEN exp_param_mandatory THEN
        ybs_application_error(-20022, 'E00013# Mandatory Parameters - '|| ls_parameter);
    WHEN OTHERS THEN
        ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_create_loan_account_dtls - ' ||SQLERRM);
                                                                                  
  END pr_create_loan_account_dtls;
                                      

  
PROCEDURE pr_process_additional_details(pn_loanac_accgrp_num    IN NUMBER,
                                        ps_update_id            IN VARCHAR2
                                        ) IS 
/* ********************************************************************************
  Name            : pr_process_additional_details
  Purpose         : Procedure to process additional loan account details in CORE
  Developer       : Ekta Garg (TCS)
  Date            : 10-Aug-2018
  ----------------------------------------------------------------------------------
   Update_Log
   Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
   1.0      Ekta Garg(TCS)    10-Aug-2018  FETR0016324:
                                          
  ----------------------------------------------------------------------------------*/
     -- Local variable declaration
     ls_parameter          VARCHAR2(30);
     ls_regression_ind     VARCHAR2(1):= 'N';
       
     -- Exceptions
     exp_param_mandatory         EXCEPTION;

  BEGIN
      IF TRIM(ps_update_id) IS NULL THEN
         ls_parameter:='Update Id';
         RAISE exp_param_mandatory;
     ELSIF pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0 THEN
         ls_parameter:='Loan Account Group Number';
         RAISE exp_param_mandatory;
     END IF;      
  
   --To update the Loan Account status against the Mortgage Account post Release of Funds.
     pr_set_loanacc_status(pn_loanac_accgrp_num);
   --To create Lendings transactions against the mortgage account.
     pr_create_len_transactions(pn_loanac_accgrp_num , 
                                ps_update_id);
   --To to post cashback lendings transaction
     pack_cashback.pr_post_bank_trans(pn_loanac_accgrp_num,
                                      ls_regression_ind);
   --To link offset account with the loan account and activate it.
     pr_activate_offset_account(pn_loanac_accgrp_num,
                                ps_update_id);  
   --To process accrued interest  
     pack_rof.pr_process_accrued_interest(pn_loanac_accgrp_num,
                                          fn_check_rof_status(pn_loanac_accgrp_num),
                                          'Y');
   --To insert expected payments entries (CMI) for Loan Account.                                        
     pr_create_expected_payments(pn_loanac_accgrp_num,
                                 ps_update_id);  
 EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,'E00013# Mandatory Parameters Missing - '|| ls_parameter);
    WHEN OTHERS THEN
      ybs_application_error(-20002,'E10791# Error in soa_mortgagecompletions.pr_process_additional_details');
  
END pr_process_additional_details;                                         
  

PROCEDURE pr_create_len_transactions    (pn_loanac_accgrp_num    IN NUMBER,
                                         ps_update_id            IN VARCHAR2
                                         )IS     
  /* ********************************************************************************
  Name            : pr_create_len_transactions
  Purpose         : Procedure to create/post transactions against the loan account in CORE
  Developer       : Ekta Garg(TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Ekta Garg(TCS)    14-Aug-2018  FETR0016324:
                                          Procedure to create/post transactions 
                                          (Loan Advance, Fees etc.) against the loan 
                                          account in CORE using the existing procedure
                                          PACK_TXN.POSTTRAN 
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
     --Local variable declaration
     ln_party_sysid        activity_players.party_sysid%TYPE;
     ln_sysid              lendings_transactions.sysid%TYPE;
     ln_pay_sysid          release_of_funds.pay_sysid%TYPE;
     ln_mtge_fee_amount    mtge_application_fees.fee_amt%TYPE;
     ln_post_gl_branded    number;
     ln_gl_sundry_trans    number;
          
     ld_day                DATE := SYSDATE;
     ld_today   CONSTANT   DATE := TRUNC(ld_day);
         
     ls_parameter          VARCHAR2(30);
     ls_cost_centre_code   cost_centres.code%TYPE;
     ls_feedef_code        mtge_application_fees.feedef_code%TYPE; 
     ls_brand_code         cross_reference_external_ids.attribute_cval%TYPE;
  
     --To process party sysid for processing branch
     CURSOR c_party_sysid_prdcbr IS
     SELECT party_sysid
     FROM activity_players
     WHERE acttyp_code IN ('PRDCBR')
     AND table_id = 'ACCGRP'
     AND table_sysid = pn_loanac_accgrp_num;
        
     CURSOR c_cost_centre(party_sysid NUMBER) IS 
     SELECT SUBSTR(cc.CODE,2,3) 
     FROM COST_CENTRES cc
     JOIN activity_players ap 
     ON cc.party_luw_sysid = party_sysid;

    --To retrieve fee transaction code
     CURSOR c_fee_amount IS 
     SELECT mtapf.fee_amt ,mtapf.feedef_code
     FROM mtge_application_fees mtapf
     WHERE mtapf.application_sysid = pn_loanac_accgrp_num;
   
    --To retrieve loan amount and part number
     CURSOR c_loan_part IS
     SELECT lp.original_advance, lp.part_num
     FROM loan_parts lp
     WHERE lp.loanac_accgrp_num = pn_loanac_accgrp_num
     AND lp.lapur_code = gs_loaptp_code 
     AND lp.end_date IS NULL;
     
    --To retrieve brand code corresponding to loan account number 
     CURSOR c_brand_code IS
     SELECT xref2.attribute_cval
     FROM cross_reference_external_ids xref1
     JOIN cross_reference_external_ids xref2
     ON xref1.source_unique_id = xref2.source_unique_id
     AND xref1.source_system = xref2.source_system 
     WHERE xref2.attribute_name =
            (select pack_header.fn_get_global('GS_MSO_BRAND_ATTRIBUTE_NAME')from dual)
     AND xref1.attribute_name = (select pack_header.fn_get_global('GS_TABLE_ID_LOANAC')from dual)
     AND xref1.attribute_nval = pn_loanac_accgrp_num
     AND xref1.source_system = gs_mso_source_system_value
     AND xref1.ended_date IS NULL
     AND xref2.ended_date IS NULL; 
    
     typ_loanamount_partnum          c_loan_part%ROWTYPE;
     TYPE tab_loanamount_partnum     IS TABLE OF typ_loanamount_partnum%TYPE;
    
     lt_loanamount_partnum           tab_loanamount_partnum;
    
    --To retrieve payment sysid 
     CURSOR c_rof IS
     SELECT rof.pay_sysid
     FROM release_of_funds rof
     WHERE rof.account_number = pn_loanac_accgrp_num
     AND rof.end_date IS NULL;  
 
   -- Exceptions declaration
     exp_param_mandatory         EXCEPTION;
     exp_posting_failed          EXCEPTION;
     exp_txn_code_not_exists     EXCEPTION;
           
BEGIN
     --Validating mandatory parameters
     IF ps_update_id IS NULL THEN
       ls_parameter:='Update Id';
       RAISE exp_param_mandatory;
     ELSIF pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0 THEN
       ls_parameter:='Loan Account Group Number';
       RAISE exp_param_mandatory;
     END IF;
     
       OPEN c_party_sysid_prdcbr;
       FETCH c_party_sysid_prdcbr INTO ln_party_sysid;
       CLOSE c_party_sysid_prdcbr;
       
       OPEN c_cost_centre(ln_party_sysid) ;
       FETCH c_cost_centre INTO ls_cost_centre_code;
       CLOSE c_cost_centre;
      
       OPEN c_fee_amount;
       FETCH c_fee_amount INTO ln_mtge_fee_amount,ls_feedef_code;
       CLOSE c_fee_amount;
       
       OPEN c_loan_part;
       FETCH c_loan_part BULK COLLECT INTO lt_loanamount_partnum;
       CLOSE c_loan_part;
       
       OPEN c_rof;
       FETCH c_rof INTO ln_pay_sysid;
       CLOSE c_rof;
       
       OPEN c_brand_code;
       FETCH c_brand_code INTO ls_brand_code;
       CLOSE c_brand_code;
       
   
   --To post lending transaction
     FOR i IN lt_loanamount_partnum.FIRST..lt_loanamount_partnum.LAST 
      LOOP 
        --Entries to create Loan Advance
              pack_txn.posttran(ln_party_sysid,
                                ln_party_sysid,
                                lt_loanamount_partnum(i).original_advance,
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                NULL,
                                'N',
                                pn_loanac_accgrp_num,
                                gn_loanac_latype_code,
                                lt_loanamount_partnum(i).part_num,
                                NULL,
                                NULL,
                                lt_loanamount_partnum(i).part_num,
                                NULL,
                                'CHP',
                                'MOR',
                                '60',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                '4',
                                NULL,
                                NULL,
                                ls_cost_centre_code,
                                ln_sysid  
                                );
       
        --Transaction to create period start balance
              pack_txn.posttran(NULL,
                                NULL,
                                '0',
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                NULL,
                                'N',
                                pn_loanac_accgrp_num,
                                gn_loanac_latype_code,
                                lt_loanamount_partnum(i).part_num,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                'JNL',
                                'MOR',
                                '503',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                '2',
                                NULL,
                                NULL,
                                gs_mor_admin_branch,
                                ln_sysid 
                                  );
       
        END LOOP;
        -- Loan completion fee   
              pack_txn.posttran(ln_party_sysid,
                                ln_party_sysid,
                                ln_mtge_fee_amount,
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                NULL,
                                'N',
                                pn_loanac_accgrp_num,
                                gn_loanac_latype_code,
                                '1',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                'JNL',
                                'MOR',
                                '447',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                '6',
                                NULL,
                                NULL,
                                ls_cost_centre_code,
                                ln_sysid 
                                );
                                      
   IF (ls_feedef_code = 'FTRFR')THEN                                      
         --Funds transfer fee FINTRM_FNTRTP_CODE = 0140
              pack_txn.posttran(ln_party_sysid,
                                ln_party_sysid,
                                ln_mtge_fee_amount,
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                NULL,
                                'N',
                                pn_loanac_accgrp_num,
                                gn_loanac_latype_code,
                                '1',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                'JNL',
                                'MOR',
                                '0140',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                '1',
                                NULL,
                                NULL,
                                ls_cost_centre_code,
                                ln_sysid  
                                );
        
        --Funds transfer fee FINTRM_FNTRTP_CODE = 0141
              pack_txn.posttran(ln_party_sysid,
                                ln_party_sysid,
                                ln_mtge_fee_amount,
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                TRUNC(SYSDATE),
                                NULL,
                                'N',
                                pn_loanac_accgrp_num,
                                gn_loanac_latype_code,
                                '1',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                'JNL',
                                'MOR',
                                '0141',
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                '1',
                                NULL,
                                NULL,
                                ls_cost_centre_code,
                                ln_sysid  
                                );                                   
       
       
       ln_post_gl_branded := bnk3_pack3.fn_post_gl_branded ('1'
                                       ,ln_mtge_fee_amount 
                                       ,pn_loanac_accgrp_num
                                       ,ls_cost_centre_code
                                       ,'257003'
                                       ,ls_cost_centre_code
                                       ,ld_today
                                       ,ld_today
                                       ,'N'
                                       ,ls_brand_code
                                       );
                                       
      IF (ln_post_gl_branded = 0) THEN
      ln_gl_sundry_trans := pack_central.fn_accum_trans_branded(ls_cost_centre_code
                                           ,TRUNC(SYSDATE)
                                           ,TRUNC(SYSDATE)
                                           ,'SUN'
                                           ,'1'
                                           ,'JNL'
                                           ,ls_cost_centre_code
                                           ,'0'
                                           ,ln_mtge_fee_amount
                                           ,ls_brand_code
                                           );        
       ELSE
       RAISE exp_posting_failed;
       END IF;
    ELSE
       RAISE exp_txn_code_not_exists;
    END IF;

  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,'E00013# Mandatory Parameters Missing - '|| ls_parameter);
    WHEN exp_txn_code_not_exists THEN
      ybs_application_error(-20022,'E56# Fee definition code');
    WHEN exp_posting_failed THEN
      ybs_application_error(-20022,'E14304# Funds transer fees posting');
    WHEN OTHERS THEN
      ybs_application_error(-20022,'E10791# Error in soa_mortgagecompletions.pr_create_len_transactions - ' ||SQLERRM);
         
END pr_create_len_transactions;  


PROCEDURE pr_activate_offset_account(pn_loanac_accgrp_num    IN NUMBER,
                                     ps_update_id            IN VARCHAR2
                                     )IS       
  /* ********************************************************************************
  Name            : pr_activate_offset_account
  Purpose         : Procedure to link offset account with the loan account in CORE
  Developer       : Ekta Garg (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Ekta Garg          30-Aug-2018 To link offset account with the loan account
                                          and activates it.                                                             
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
      -- Local variable declaration
      ls_parameter                 VARCHAR2(30);
      ls_yes           CONSTANT    VARCHAR2(1) := 'Y';
      ls_bundled_flag              loan_part_conditions.bundled_flag%TYPE;
      ls_fatca_rpt                 VARCHAR2(1);
      ls_brand_code                saving_products.brand_code%TYPE;
                
      ld_today         CONSTANT    DATE := SYSDATE;
      ld_date          CONSTANT    DATE := TRUNC(ld_today);
        
      ln_loanac_accgrp_num         loan_applications.loanac_accgrp_num%TYPE;
      ln_savings_acc               account_warnings.accnum_account_number%TYPE;
      ln_party_sysid               activity_players.party_sysid%TYPE;
       
   --To check whether offset account
     CURSOR c_check_bundled_flag_lpc IS
      SELECT lpc.bundled_flag 
      FROM loan_part_conditions lpc
      WHERE lpc.loanac_accgrp_num  = pn_loanac_accgrp_num
      AND lpc.end_date IS NULL;
     
   --To retrieve savings account number  
     CURSOR c_get_savings_acc IS
     SELECT xref2.attribute_nval
     FROM cross_reference_external_ids xref1
     JOIN cross_reference_external_ids xref2
     ON xref1.source_unique_id = xref2.source_unique_id
     AND xref1.source_system = xref2.source_system 
     WHERE xref2.attribute_name =
            (select pack_header.fn_get_global('GS_TABLEID_SAVACC')from dual)
     AND xref1.attribute_name = (select pack_header.fn_get_global('GS_TABLE_ID_LOANAC')from dual)
     AND xref1.attribute_nval = pn_loanac_accgrp_num
     AND xref1.source_system = gs_mso_source_system_value
     AND xref1.ended_date IS NULL
     AND xref2.ended_date IS NULL;
         
     --To check fatca reportable and other related fields
     CURSOR c_fatca_reportable IS
     SELECT sp.fatca_reportable, sp.brand_code
     FROM saving_products sp
     JOIN loan_part_conditions lpc
     ON sp.sysid = lpc.lenprd_product_code
     WHERE lpc.loanac_accgrp_num = pn_loanac_accgrp_num
     AND lpc.loanac_latype_code = gn_loanac_latype_code
     AND lpc.end_date IS NULL
     AND sp.ended_date IS NULL;
        
     --To retrieve all parties to the loan account
     CURSOR c_act_players IS
     SELECT ap.party_sysid
     FROM activity_players ap
     WHERE ap.table_sysid = pn_loanac_accgrp_num
     AND ap.loanac_latype_code = gn_loanac_latype_code
     AND ap.table_id = gs_actply_table_id
     AND ap.end_date IS NULL
     AND ap.ended_date IS NULL;
        
      -- Exceptions declaration
      exp_param_mandatory      EXCEPTION;
      exp_sav_acc_not_found    EXCEPTION;
      exp_error_occur          EXCEPTION;
      
   BEGIN
      --Local variable declaration
      ln_loanac_accgrp_num:= pn_loanac_accgrp_num;

      -- Validate mandatory input parameters
        IF ln_loanac_accgrp_num IS NULL OR ln_loanac_accgrp_num <= 0 THEN
           ls_parameter:='Loan Account Group Number';
           RAISE exp_param_mandatory;
        ELSIF 
           TRIM(ps_update_id)IS NULL THEN
           ls_parameter:='Update Id';
           RAISE exp_param_mandatory;
        END IF;
     -- Retrieve BUNDLED_FLAG from the Table for the Loan_Account_Accgrp_Num. 
        OPEN c_check_bundled_flag_lpc;
        FETCH c_check_bundled_flag_lpc  INTO ls_bundled_flag;
        CLOSE c_check_bundled_flag_lpc;
        
        IF ls_bundled_flag = ls_yes THEN
     -- Retrieve the savings account number from cross_reference_external_ids table. 
          OPEN c_get_savings_acc;
          FETCH c_get_savings_acc INTO ln_savings_acc;        
           IF c_get_savings_acc%NOTFOUND THEN 
             RAISE exp_sav_acc_not_found;
           END IF;
          CLOSE c_get_savings_acc;  
             
     -- Update the Account_Warnings table and end the OFFRES warning associated with the account.
         
           UPDATE account_warnings aw
             SET aw.end_date = ld_date,
                 aw.ended_date = ld_date,
                 aw.ended_by = USER,
                 aw.ended_at = ps_update_id
             WHERE aw.accnum_account_number = ln_savings_acc;
  
     -- Insert the account information into Bundled_Accounts table.
            BEGIN
              INSERT INTO bundled_accounts  
                  (sysid,                  
                   loanac_accgrp_num,      
                   loanac_latype_code,     
                   savacc_account_number,  
                   start_date,             
                   status_code,            
                   end_date,
                   update_id,              
                   update_time            
                  )  
              VALUES 
                  (bunacc_sysid_seq.NEXTVAL,
                   ln_loanac_accgrp_num,  
                   gn_loanac_latype_code,      
                   ln_savings_acc,
                   ld_date,
                   'VALID',    
                   NULL, 
                   ps_update_id, 
                   ld_today
                   ); 
                    
             EXCEPTION
               WHEN OTHERS THEN
                 ybs_application_error(-20022,'E10230# Insert bundled accounts');
              END ;
    
     --Call to post cashback transaction to savings account. 
          BEGIN
          pack_cashback.pr_post_savings_cashback(ln_loanac_accgrp_num,'Y');
          EXCEPTION
            WHEN OTHERS THEN
              ybs_application_error(-20022,'E10791');
          END ;
          
          OPEN c_fatca_reportable;
          FETCH c_fatca_reportable INTO ls_fatca_rpt,ls_brand_code;
          CLOSE c_fatca_reportable;
  
        IF ls_fatca_rpt =  ls_yes THEN
          OPEN c_act_players;
          LOOP
          FETCH c_act_players INTO ln_party_sysid;
          EXIT WHEN c_act_players%NOTFOUND;
        
          BEGIN
     --  FATCA1 to all parties
          pack_fatca.fatca_letter(pn_party_sysid    => ln_party_sysid
                                 ,ps_mdd_short_name => 'LEN40501'
                                 ,ps_modlab_name    => 'FATCA1'
                                 ,ps_brand          => ls_brand_code);
                                
          EXCEPTION
            WHEN OTHERS THEN
              ybs_application_error(-20022,'E13593'); 
          END ; 
           END LOOP;
           CLOSE c_act_players; 
        END IF; 
      END IF; 
        
  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,'E00013# Mandatory Parameters Missing - '|| ls_parameter);
    WHEN exp_sav_acc_not_found THEN
      ybs_application_error(-20022,'E10420# Savings Account');
    WHEN OTHERS THEN
      ybs_application_error(-20002,'Error in soa_mortgagecompletions.pr_activate_offset_account - ' ||SQLERRM);
         
END pr_activate_offset_account;


PROCEDURE pr_process_accrued_int    (
                                      pn_loanac_accgrp_num    IN NUMBER
                                    ) AS
  /* ********************************************************************************
  Name            : pr_process_accrued_int
  Purpose         : Procedure to process accrued interest in CORE
  Developer       : Soumya Ranjan (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                 Date        Details
  -------- -----------------  ----------- -------------------------------------------
  1.0      Soumya Ranjan(TCS) 26-JUN-2018 FETR0016324:
                                          Procedure to process the accrued interest in CORE 
                                          by calling the procedure 
                                          pack_rof.pr_process_accrued_interest
  ----------------------------------------------------------------------------------
  ********************************************************************************* */
                                          
    -- Local variable declaration
        ls_parameter                 VARCHAR2(30);
    
        ls_rofsta_code               release_of_funds.rofsta_code%TYPE := 'PAID';
        ls_yes                       VARCHAR2(1) := 'Y';
        ld_release_date              release_of_funds.release_date%TYPE;
    -- Getting the Global Values from the database for populating the local variables.
    
    -- Cursors for getting data from database.
        CURSOR c_rof(cs_rofsta_code IN VARCHAR2, cn_loan_account_number IN NUMBER) IS
        SELECT                                   
               rof.release_date 
        FROM   release_of_funds rof
        WHERE  rof.account_number     = cn_loan_account_number AND
               rof.rofsta_code        = cs_rofsta_code AND
               rof.end_date   IS NULL AND
               rof.child_type IS NULL;
    -- Exceptions
    exp_param_mandatory         EXCEPTION;
    BEGIN
        IF (pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0) THEN
          ls_parameter := 'Loan Account Group Number';
          RAISE exp_param_mandatory;
        END IF;
      
        OPEN c_rof( ls_rofsta_code, pn_loanac_accgrp_num);
           FETCH c_rof  INTO ld_release_date; 
    
        IF c_rof%NOTFOUND THEN
        -- A valid date was not returned. So, do nothing
          CLOSE c_rof;
        ELSE
          CLOSE c_rof;
          -- Calling pack_rof.pr_process_accrued_interest to insert data to ROF for Accrued Interest
          pack_rof.pr_process_accrued_interest(pn_mortgage_account_number=> pn_loanac_accgrp_num,
                                               pd_release_date=> ld_release_date,
                                               ps_is_new_borrower=> ls_yes
                                               );
        END IF;
      
      
    EXCEPTION
        WHEN exp_param_mandatory THEN
              ybs_application_error(-20022, 'E00013# Mandatory Parameters - '|| ls_parameter);
    
        WHEN OTHERS THEN
             ybs_application_error(-20002, 'Error in soa_mortgagecompletions.pr_process_accrued_int - ' ||SQLERRM);
                                                                                  
 
END pr_process_accrued_int;

 /* ******************************************************************************
  The following routines are wrappers for SOA services to access standard Core 
  functionality.
  NB: Exception handling is not required for wrappers as exceptions are raised
      appropriately within the called routines.
  -----------------------------------------------------------------------------------
  Version  By                 Date         Details
  -------- -----------------  -----------  ----------------------------
  1.0      Ekta Garg          31-AUG-2018  FETR0016324: Initial versions
  ********************************************************************************** */
PROCEDURE pr_process_release_of_funds
         (ps_brand_code IN VARCHAR2) 
   IS
   BEGIN
       pack_rof.pr_process_release_of_funds
     (ps_brand_code);
 
  END pr_process_release_of_funds;

 
  PROCEDURE pr_insert_payments 
         (pn_mortgage_account_number         IN  NUMBER,
          pn_amount                          IN  NUMBER,
          pd_release_date                    IN  DATE,
          ps_transaction_method              IN  VARCHAR2,
          ps_payment_reason_code             IN  VARCHAR2,
          pn_payment_sysid                   OUT NUMBER
         )            
   IS
   BEGIN
   pack_rof.pr_insert_payments
              (pn_mortgage_account_number, 
               pn_amount,                
               pd_release_date,
               ps_transaction_method,
               ps_payment_reason_code,
               pn_payment_sysid       
              );           

  END pr_insert_payments;

 
  FUNCTION fn_calculate_accrued_interest 
            (pn_amount                          IN  NUMBER,
             pn_product_code                    IN  NUMBER,
             pd_release_date                    IN  DATE,
             pc_is_new_borrower                 IN  VARCHAR2
             )
   RETURN NUMBER 
   IS                                    
   -- Local variable declaration                                     
   ln_accrued_interest     NUMBER;      
   BEGIN
   ln_accrued_interest := pack_rof.fn_calculate_accrued_interest 
                (pn_amount,
                 pn_product_code,
                 pd_release_date,
                 pc_is_new_borrower
                );
   RETURN ln_accrued_interest;                                                                            

  END fn_calculate_accrued_interest;                                                                         


  PROCEDURE pr_insert_chaps               
        (pn_mortgage_account_number         IN  NUMBER,
         pn_amount                          IN  NUMBER,
         pd_sent_date                       IN  DATE,
         ps_branch_userid                   IN  VARCHAR2,
         pn_branch_transmitted              IN  NUMBER,
         ps_primary_applicant_surname       IN  VARCHAR2,
         ps_solicitor_code                  IN  VARCHAR2,
         ps_beneficiary_name                IN  VARCHAR2,
         pn_bank_account_number             IN  NUMBER,
         pn_sort_code                       IN  NUMBER,
         ps_status                          IN  VARCHAR2,
         ps_primary_applicant_forename      IN  VARCHAR2
        )
  IS                                                  
    BEGIN
    pack_rof.pr_insert_chaps 
             (pn_mortgage_account_number,
              pn_amount,
              pd_sent_date,
              ps_branch_userid,
              pn_branch_transmitted,
              ps_primary_applicant_surname,
              ps_solicitor_code,
              ps_beneficiary_name,
              pn_bank_account_number,
              pn_sort_code,
              ps_status,
              ps_primary_applicant_forename
             );                 
  END pr_insert_chaps;       
 
  
  PROCEDURE pr_update_release_of_funds 
          (pn_rof_sysid                       IN NUMBER,
           pn_payments_sysid                  IN NUMBER,
           pd_release_date                    IN DATE,
           ps_rof_status_code                 IN VARCHAR2,
           pd_completion_date                 IN DATE,
           ps_notes                           IN VARCHAR2,
           ps_update_id                       IN VARCHAR2
          ) 
   IS
   BEGIN
    pack_rof.pr_update_release_of_funds          
               (pn_rof_sysid,
                pn_payments_sysid,
                pd_release_date,
                ps_rof_status_code,
                pd_completion_date,
                ps_notes,
                ps_update_id
               );
  END pr_update_release_of_funds; 

  
  PROCEDURE pr_process_accrued_interest 
          (pn_mortgage_account_number     IN NUMBER,
           pd_release_date                IN DATE,
           ps_is_new_borrower             IN VARCHAR2
          )
     IS                                  
     BEGIN 
     pack_rof.pr_process_accrued_interest
               (pn_mortgage_account_number, 
                pd_release_date,                                              
                ps_is_new_borrower
               );         
  END pr_process_accrued_interest;  

 
  PROCEDURE pr_post_savings_cashback  
           (pn_mortgage_account_number IN NUMBER,
            ps_regression_ind          IN VARCHAR2)                      
   IS
   BEGIN                                      
         pack_cashback.pr_post_savings_cashback
           (pn_mortgage_account_number,ps_regression_ind );
  END pr_post_savings_cashback;

                                                                                                                               
PROCEDURE  pr_create_fee_transactions     (pn_loanac_accgrp_num       IN NUMBER,
                                           ps_update_id               IN VARCHAR2
                                           )AS
BEGIN

NULL;

END pr_create_fee_transactions;  


FUNCTION fn_check_rof_status        
                            (pn_loanac_accgrp_num   IN  NUMBER)RETURN DATE IS
  /* ******************************************************************************
      Name            : fn_check_rof_status
      Purpose         : Function to check if the release of funds is completed or
                        not and return release date if ROF already completed.
      Developer       : Rajeev Ranjan (TCS)
--------------------------------------------------------------------------------
      Update Log:

      Version         By               Date              Details
      1.00            Rajeev Ranjan    02/08/18          Orginal Version
  -------------------------------------------------------------------------------- */
  -- Local variable declaration
  ld_rof_date             DATE;
  ls_parameter            VARCHAR2(30);
  
  -- Exception declaration
  exp_param_mandatory     EXCEPTION;

  CURSOR c_rof_completed(pn_loanac_accgrp_num IN NUMBER) IS
    SELECT
          rof.release_date release_date
    FROM release_of_funds rof
    WHERE rof.account_number= pn_loanac_accgrp_num AND
          rof.rofsta_code='PAID' AND
          rof.retfnd_sysid IS NULL AND
          rof.end_date IS NULL ;
  BEGIN
    
  -- Validating input parameter
    IF pn_loanac_accgrp_num IS NULL OR
       nvl(pn_loanac_accgrp_num,0) <=0 THEN
       ls_parameter:='loanac_accgrp_num';
    RAISE exp_param_mandatory;
    END IF;
     
    OPEN c_rof_completed(pn_loanac_accgrp_num);
      FETCH c_rof_completed INTO ld_rof_date;

      IF c_rof_completed%FOUND THEN
         RETURN ld_rof_date;
      END IF;
    CLOSE c_rof_completed;

  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,'E00013# Mandatory parameters missing or invalid : ' ||
                            ls_parameter);

    WHEN OTHERS THEN
      ybs_application_error(-20001,'Error in fn_check_rof_status - ' ||
                            SQLERRM);

END fn_check_rof_status;



PROCEDURE pr_update_corr_address(pn_loanac_accgrp_num IN NUMBER,
                                 pt_party_details     IN soa_tbl_party_details)IS
  /* ********************************************************************************
  Name            : pr_update_corr_address
  Purpose         : Procedure to update the Property address as Correspondence address
                    for customers linked to the mortgage account
  Developer       : Aakash Thakkar (TCS)
  ----------------------------------------------------------------------------------
  Update_Log
  Version  By                  Date        Details
  -------- -----------------   ----------- -------------------------------------------
  1.0      Aakash Thakkar(TCS) 07-Aug-2018 FETR0016324: Original Version
  
  ----------------------------------------------------------------------------------
  ********************************************************************************* */

  -- Local variable declaration
  ln_count          NUMBER;
  ln_adduse_sysid   NUMBER;
  ln_prop_add_sysid NUMBER;
  ls_addfun_code    CONSTANT VARCHAR2(5):='CORR';
  ls_created_at     CONSTANT VARCHAR2(4):='MSO';

  ls_parameter   VARCHAR2(30);

  -- Exceptions declaration
  exp_param_mandatory EXCEPTION;
  exp_add_sysid       EXCEPTION;
  
  CURSOR c_prop_add_sysid IS
  SELECT pstadd_sysid FROM properties
   WHERE accgrp_num = pn_loanac_accgrp_num
   AND end_date IS NULL;
   
BEGIN
  ln_count := cardinality(pt_party_details);
  IF pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0 THEN
    ls_parameter := 'Loan Account Group Number';
    RAISE exp_param_mandatory;
  ELSIF ln_count = 0 OR pt_party_details IS NULL THEN
    ls_parameter := 'Party Details';
    RAISE exp_param_mandatory;
  END IF;

  OPEN c_prop_add_sysid;
  FETCH c_prop_add_sysid INTO ln_prop_add_sysid;
  CLOSE c_prop_add_sysid;


  IF ln_prop_add_sysid = 0 OR ln_prop_add_sysid IS NULL THEN
    RAISE exp_add_sysid;
  END IF;

  FOR i IN 1 .. ln_count LOOP
    UPDATE address_usages
       SET end_date = TRUNC(SYSDATE - 1), ended_date = SYSDATE
     WHERE Party_Sysid = pt_party_details(i).party_sysid
       AND addfun_code = ls_addfun_code
       AND end_date IS NULL;
  
    ln_adduse_sysid := pack_sequence.fn_next_number('ADDUSE_SYSID_SEQ');
  
    INSERT INTO address_usages
      (sysid,
       start_date,
       pstadd_sysid,
       party_sysid,
       addfun_code,
       created_date,
       created_at)
    VALUES
      (ln_adduse_sysid,
       TRUNC(SYSDATE),
       ln_prop_add_sysid,
       pt_party_details(i).party_sysid,
       ls_addfun_code,
       SYSDATE,
       ls_created_at);
  END LOOP;
EXCEPTION
  WHEN exp_param_mandatory THEN
    ybs_application_error(-20022,
                          'E00013# Mandatory Parameters Missing or Invalid-' ||
                          ls_parameter);
  WHEN exp_add_sysid THEN
    ybs_application_error(-20022, 'E10667# Not Found-' || 'PSTADD_SYSID');
  WHEN OTHERS THEN
    ybs_application_error(-20002,
                          'Error in soa_offsetprocessing.pr_update_corr_address - ' ||
                          SQLERRM);
  
END pr_update_corr_address;
                                        


FUNCTION fn_is_mso_mortgage(pn_loanac_accgrp_num IN NUMBER) 
                            RETURN VARCHAR2
                            IS                      
  /**************************************************************************************
    Name            : fn_is_mso_mortgage
    Purpose         : Function to return if the mortgage is MSO originated or not. 
    Developer       : Deependra Kumar Ramawat (TCS)
    -----------------------------------------------------------------------------------
    Update Log:
    Version            By               Date             Details
    -------      ----------------    ------------     -----------------
      1.0        Deependra Kumar     06-Aug-2018      Original version  
                  Ramawat (TCS)      
    ------------------------------------------------------------------------------------
  ****************************************************************************************/
  --Local variable declaration
  
  ls_parameter              VARCHAR2(30);
  ls_is_mso_mortgage        VARCHAR2(1);
  
  -- Exception declaration 
  exp_param_mandatory EXCEPTION;

   CURSOR c_validate_input_mso IS
    SELECT 'Y'
    FROM cross_reference_external_ids creid
    WHERE creid.attribute_name = gs_mso_loanac_attribute_name
    AND creid.source_system = gs_mso_source_system_value
    AND creid.attribute_nval = pn_loanac_accgrp_num
    AND creid.ended_date IS NULL;

BEGIN
  --Validating mandatory input parameter
  IF pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0 THEN
    ls_parameter := 'Loan Account Group Number';
    RAISE exp_param_mandatory;
  END IF;

  -- Validating MSO mortgage
  OPEN c_validate_input_mso;
  FETCH c_validate_input_mso INTO ls_is_mso_mortgage;

  IF c_validate_input_mso%NOTFOUND THEN
    ls_is_mso_mortgage:= 'N';
  END IF;
  CLOSE c_validate_input_mso;
  RETURN ls_is_mso_mortgage;
 
EXCEPTION

  WHEN exp_param_mandatory THEN
    ybs_application_error(-20022,
                          'E00013# Mandatory parameters missing or invalid : ' ||
                          ls_parameter);
  WHEN OTHERS THEN
    ybs_application_error(-20001,
                          'Error in soa_mortgagecompletions.fn_is_mso_mortgage - ' ||
                          SQLERRM);
END fn_is_mso_mortgage;

 
PROCEDURE pr_process_post_rof(pn_loanac_accgrp_num IN NUMBER,
                              ps_update_id IN VARCHAR2
                              )IS
  /**************************************************************************************
    Name            : pr_process_post_rof
    Purpose         : Procedure to check whether the Mortgage is MSO originated or Not. 
    Developer       : Deependra Kumar Ramawat (TCS)
    -----------------------------------------------------------------------------------
    Update Log:
    Version            By               Date             Details
    -------       ---------------    -----------      ----------------
      1.0         Deependra Kumar    06-Aug-2018      Original version  
                  Ramawat (TCS)      
    ------------------------------------------------------------------------------------
  ****************************************************************************************/

  ls_parameter     VARCHAR2(30);
  ld_rof_date      DATE;
  
  -- Exception handling
  exp_param_mandatory EXCEPTION;
  exp_parameter_null  EXCEPTION;

BEGIN
  --Validating input parameter
  IF TRIM(ps_update_id)IS NULL THEN
    ls_parameter := 'Updated By';
    RAISE exp_param_mandatory;
  ELSIF pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0 THEN
    ls_parameter := 'Loan Account Group Number';
    RAISE exp_param_mandatory;
  END IF;

  -- Calling fn_check_rof_status procedure to check whether Release-Of-Funds is complete or not.
  
   ld_rof_date := fn_check_rof_status(pn_loanac_accgrp_num);

  --User defined exception raised, when above function(fn_check_rof_status) returns ld_rof_date as NULL.  
  IF ld_rof_date IS NULL THEN
    RAISE exp_parameter_null;
    
  --If the ROF process is completed then calling pr_process_additional_details                                       
  ELSE 
    pr_process_additional_details(pn_loanac_accgrp_num,
                                  ps_update_id);
  END IF;

EXCEPTION

  WHEN exp_param_mandatory THEN
    ybs_application_error(-20022,
                          'E00013# Mandatory Parameters Missing or invalid : ' ||
                          ls_parameter);
  WHEN exp_parameter_null THEN
    ybs_application_error(-20021, 'E10791# pr_process_post_rof : ');
  WHEN OTHERS THEN
    ybs_application_error(-20001,
                          'Error in soa_mortgagecompletions.pr_process_post_rof - ' ||
                          SQLERRM);
  
END pr_process_post_rof;


PROCEDURE pr_create_identifications(pn_party_sysid     NUMBER,
                                    pt_identifications soa_tbl_identifications,
                                    ps_created_at      VARCHAR2,
                                    ps_created_by      VARCHAR2) IS
  /* ************************************************************************************************
  Name            : pr_create_identifications
  Purpose         : Procedure to Create Identifications details  in SMBP Core
  Developer       : ROHIT SHARMA (TCS)
  ---------------------------------------------------------------------------------------------------
  Update Log:
  Version          By                Date             Details
  1.0             Rohit Sharma      01-SEP-2018      Original version
                 
  ---------------------------------------------------------------------------------------------------
  ************************************************************************************************ */

  --  Local variable declaration
  ls_parameter            VARCHAR2(35);
  ln_count                NUMBER;
  ln_code_count           NUMBER;
  ln_parties_count        NUMBER;
  ls_code                 VARCHAR2(6);
  ln_identification_count NUMBER;
  ln_identification_sysid NUMBER;
  ln_party_sysid          parties.sysid%TYPE;
  ln_addusg_sysid         address_usages.sysid%TYPE;
  
   CURSOR c_validate_party_sysid IS
    SELECT sysid
    FROM   parties p
    WHERE  p.sysid = pn_party_sysid
      AND  p.ended_date IS NULL;

   CURSOR c_validate_address_usage IS
     SELECT sysid
     FROM   address_usages adusg
     WHERE  adusg.party_sysid = pn_party_sysid
       AND  adusg.end_date IS NULL
       AND  adusg.pstadd_sysid IS NOT NULL;
    
    
  -- Exception    
  exp_param_mandatory     EXCEPTION;
  exp_parties_not_found   EXCEPTION;
  exp_add_sysid_not_found EXCEPTION;
  exp_code_not_found      EXCEPTION;

BEGIN
  --Assigning the table type value to local variable
  ln_identification_count := NVL(cardinality(pt_identifications), 0);

  --Checking Mandatory Parameter
  IF pn_party_sysid IS NULL THEN
    ls_parameter := 'Party sysid cannot be null';
    RAISE exp_param_mandatory;
  ELSIF (ln_identification_count = 0) OR pt_identifications IS NULL THEN
    ls_parameter := 'identifications details';
    RAISE exp_param_mandatory;
  ELSIF ps_created_at IS NULL THEN
    ls_parameter := 'created_at cannot be null';
    RAISE exp_param_mandatory;
  ELSIF ps_created_by IS NULL THEN
    ls_parameter := 'created_by cannot be null';
    RAISE exp_param_mandatory;
  END IF;

  --Checking the parties details 
  OPEN c_validate_party_sysid;
  FETCH c_validate_party_sysid INTO ln_party_sysid;

  IF c_validate_party_sysid%NOTFOUND OR ln_party_sysid IS NULL THEN
    RAISE exp_parties_not_found;
  END IF;
  CLOSE c_validate_party_sysid;
/*
  SELECT count(1)
    INTO ln_count
    FROM parties p
   WHERE p.sysid = pn_party_sysid
     AND p.ended_date IS NULL;

  -- If  parties does not exsist . Then raise exception  
  IF ln_count = 0 THEN
    ls_parameter := 'Sysid not found in parties table';
    RAISE exp_parties_not_found;
  END IF;
*/
  FOR idx IN 1 .. ln_identification_count LOOP
  
    -- Checking the address usage sysid  
    IF pt_identifications(idx).use_type = 'A' THEN

        OPEN c_validate_address_usage;
        FETCH c_validate_address_usage INTO ln_addusg_sysid;

        IF c_validate_address_usage%NOTFOUND OR ln_addusg_sysid IS NULL THEN
          RAISE exp_add_sysid_not_found;
        END IF;
        CLOSE c_validate_address_usage;

/*      BEGIN
        SELECT sysid
          INTO ln_addusg_sysid
          FROM address_usages adusg
         WHERE adusg.end_date IS NULL
           AND adusg.party_sysid = pn_party_sysid
           AND adusg.pstadd_sysid IS NOT NULL;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ln_addusg_sysid := NULL;
      END;*/
    END IF;
    -- If  address usage sysid does not exsist . Then raise exception  
    IF ln_addusg_sysid IS NULL AND pt_identifications(idx).use_type = 'A' THEN
      ls_parameter := 'Sysid does not';
      RAISE exp_add_sysid_not_found;
    END IF;
    -- Checking the code exsisting or not in the table
    SELECT COUNT(code), code
      INTO ln_code_count, ls_code
      FROM identification_types
     WHERE idtype_ref = pt_identifications(idx).type_ref
       AND use_type = pt_identifications(idx).use_type
       AND end_date IS NULL
     GROUP BY code;
    -- If  code is not present in identification type table . Then raise exception  
    IF ln_code_count = 0 THEN
      RAISE exp_code_not_found;
    END IF;
    --Checking the parties exsisting or not  
    IF pt_identifications(idx).use_type = 'P' THEN
      SELECT COUNT(party_sysid)
        INTO ln_parties_count
        FROM identifications
       WHERE party_sysid = pn_party_sysid
         AND ended_date IS NULL;
    END IF;
    -- sequence generation for commission_report_trans sysid
    ln_identification_sysid := pack_sequence.fn_next_number('ID_SYSID_SEQ');
    ---Inserting the data in identification table when pt_identifications.identification_use_type is ADDRESS(A)
    IF pt_identifications(idx).use_type = 'A' THEN
      INSERT INTO identifications
        (sysid,
         idtype_code,
         verified_by,
         verified_party_sysid,
         seen_date,
         adduse_sysid,
         party_sysid,
         document_date,
         ref_num,
         created_date,
         created_by,
         created_at,
         ended_date,
         ended_by,
         ended_at,
         notes)
      VALUES
        (ln_identification_sysid,
         ls_code,
         NULL,
         NULL,
         pt_identifications(idx).seen_date,
         ln_addusg_sysid,
         NULL,
         pt_identifications(idx).document_date,
         pt_identifications(idx).ref_num,
         TRUNC(SYSDATE),
         ps_created_by,
         ps_created_at,
         NULL,
         NULL,
         NULL,
         pt_identifications(idx).notes);
    ELSIF pt_identifications(idx).use_type = 'P' AND ln_parties_count = 0 THEN
      ---Inserting the data in identification table when pt_identifications.use_type is ADDRESS(P)
      INSERT INTO identifications
        (sysid,
         idtype_code,
         verified_by,
         verified_party_sysid,
         seen_date,
         adduse_sysid,
         party_sysid,
         document_date,
         ref_num,
         created_date,
         created_by,
         created_at,
         ended_date,
         ended_by,
         ended_at,
         notes)
      VALUES
        (id_sysid_seq.nextval,
         ls_code,
         NULL,
         NULL,
         pt_identifications(idx).seen_date,
         NULL,
         pn_party_sysid,
         pt_identifications(idx).document_date,
         pt_identifications(idx).ref_num,
         TRUNC(SYSDATE),
         ps_created_by,
         ps_created_at,
         NULL,
         NULL,
         NULL,
         pt_identifications(idx).notes);
    END IF;
  END LOOP;

EXCEPTION
  WHEN exp_param_mandatory THEN
    ybs_application_error(-20022,'E00013# Mandatory parameters missing: ' || ls_parameter);
  
  WHEN exp_parties_not_found THEN
    ybs_application_error(-20022,'E10033' );
    
  WHEN exp_add_sysid_not_found THEN
    ybs_application_error(-20022,
                          'E10254# address usages sysid in the table :' ||
                          ls_parameter);
  WHEN exp_code_not_found THEN
    ybs_application_error(-20022, 'E5063');
  WHEN OTHERS THEN
    ybs_application_error(-20001,
                          SQLERRM || ' error in pr_create_identifications');
  
END pr_create_identifications;

PROCEDURE pr_populate_commission_dtls(pn_loanac_accgrp_num      NUMBER,
                                      ps_payment_route_name     VARCHAR2,
                                      ps_payment_route_id       VARCHAR2,
                                      ps_intermediary_id        VARCHAR2,
                                      pn_procuration_fee_amount NUMBER,
                                      pd_completion_date        DATE) IS

  /* ************************************************************************************************
  Name            : pr_populate_commission_dtls
  Purpose         : Procedure to populate Commission tables required for Commission payments.  
  Developer       : ROHIT SHARMA (TCS)
  ---------------------------------------------------------------------------------------------------
  Update Log:
  Version          By                Date             Details
  1.0             Rohit Sharma      01-SEP-2018      Original version                   
  ---------------------------------------------------------------------------------------------------
  ************************************************************************************************ */

  --  Local variable declaration
  ls_lending_partner_code VARCHAR2(30);
  ls_parameter            VARCHAR2(35);
  ln_party_sysid          NUMBER;
  ln_lenpnr_sysid         NUMBER;
  ld_application_dt       DATE;
  ls_remittance_dtl       VARCHAR2(120);
  ln_comtrn_sysid         NUMBER;
  ln_compaid_sysid        NUMBER;
  ln_comrtrn_sysid        NUMBER;
  ln_product_code         NUMBER;

  --Exception
  exp_param_mandatory EXCEPTION;

  -- Cursor to get sysid details 
  CURSOR c_get_sysid_details IS
    SELECT xrefid.attribute_nval, iu.lenpnr_sysid, iu.introd_sysid
      FROM cross_reference_external_ids xrefid
      JOIN introducers i
        ON xrefid.attribute_nval = i.person_party_sysid
      JOIN introducer_usages iu
        ON i.sysid = iu.introd_sysid
     WHERE xrefid.source_unique_id = TO_CHAR(ps_intermediary_id) --32145698
       AND iu.lenpnr_sysid = ps_payment_route_id --12924
       AND xrefid.source_system = gs_mso_source_system_value
       AND iu.ended_date IS NULL;
  row_get_sysid_dtls c_get_sysid_details%ROWTYPE;
  --cursor to get lending partner code details  
  CURSOR c_lenpnr_code_details(ln_lenpnr_sysid NUMBER) IS
    SELECT lp.code
      FROM lending_partnerships lp
     WHERE lp.sysid = row_get_sysid_dtls.lenpnr_sysid
       AND lp.ended_date IS NULL;
  --cursor to get lending transaction details 
  CURSOR c_lentran_details IS
    SELECT lt.transaction_date,
           lt.amt,
           EXTRACT(YEAR FROM lt.transaction_date) as year,
           EXTRACT(MONTH FROM lt.transaction_date) as period
      FROM lendings_transactions lt
     WHERE lt.fintrm_fntrtp_code = '0060'
       AND lt.loanac_accgrp_num = pn_loanac_accgrp_num;
  row_lentran_dtls c_lentran_details%ROWTYPE;
  --cursor to get application date 
  CURSOR c_appdate_details(pn_loanac_accgrp_num NUMBER) IS
    SELECT lap.application_date
      FROM loan_applications lap
     WHERE lap.loanac_accgrp_num = pn_loanac_accgrp_num;
  --cursor to get remmittance details 
  CURSOR c_remittance_dtls(ln_party_sysid NUMBER) IS
    SELECT peo.surname || ', ' || 
     CASE
     WHEN peo.initials IS NOT NULL THEN peo.initials || ' '
     END || peo.title_abbr
      FROM people peo
     WHERE peo.party_sysid = ln_party_sysid;
  --cursor to get lending partner product code details   
  CURSOR c_lenprd_dtls(pn_loanac_accgrp_num NUMBER) IS
    SELECT lpc.lenprd_product_code
      FROM loan_part_conditions lpc
     WHERE lpc.loanac_accgrp_num = pn_loanac_accgrp_num;

BEGIN
  --Checking Mandatory Parameter
  IF pn_loanac_accgrp_num IS NULL OR pn_loanac_accgrp_num <= 0 THEN
    ls_parameter := 'Loan Account Group Num';
    RAISE exp_param_mandatory;
  ELSIF ps_intermediary_id IS NULL THEN
    ls_parameter := 'Intermediary id';
    RAISE exp_param_mandatory;
  ELSIF pn_procuration_fee_amount IS NULL THEN
    ls_parameter := 'Fee Amount';
    RAISE exp_param_mandatory;
  END IF;
  --setting up the Char length for remittance details
  ls_remittance_dtl := SUBSTR(ls_remittance_dtl, 1, 120);
  --Fetching the values to populate Commission tables required for Commission payments. 
  OPEN c_appdate_details(pn_loanac_accgrp_num);
  FETCH c_appdate_details
    INTO ld_application_dt;
  CLOSE c_appdate_details;

  OPEN c_lenprd_dtls(pn_loanac_accgrp_num);
  FETCH c_lenprd_dtls
    INTO ln_product_code;
  CLOSE c_lenprd_dtls;

  OPEN c_get_sysid_details;
  LOOP
  
    FETCH c_get_sysid_details
      INTO row_get_sysid_dtls;
    EXIT WHEN c_get_sysid_details%NOTFOUND;
    OPEN c_lenpnr_code_details(row_get_sysid_dtls.lenpnr_sysid);
    FETCH c_lenpnr_code_details
      INTO ls_lending_partner_code;
    CLOSE c_lenpnr_code_details;
  
    OPEN c_remittance_dtls(row_get_sysid_dtls.attribute_nval);
    FETCH c_remittance_dtls
      INTO ls_remittance_dtl;
    CLOSE c_remittance_dtls;
  
    OPEN c_lentran_details;
  
    LOOP
      FETCH c_lentran_details
        INTO row_lentran_dtls;
      EXIT WHEN c_lentran_details%NOTFOUND;
    
      -- sequence generation for commission_transactions sysid
      ln_comtrn_sysid := pack_sequence.fn_next_number('COMTRN_SEQ');
    
      -- Inserting the data in commission_transactions
      INSERT INTO commission_transactions
        (sysid,
         year,
         period,
         rec_type,
         branch_agent,
         cont_scheme,
         total_bal,
         tot_receipts_owner,
         tot_wdls_owner,
         int_cred,
         trans_bal,
         num_rcpts,
         tot_rcpts_srce,
         account_number,
         tran_code,
         tx_amount,
         product_code,
         commissionable,
         num_sav,
         num_len,
         completion_date,
         mort_advances,
         update_id,
         update_time,
         introd_sysid,
         processed_date,
         payment_frequency,
         application_date,
         borrowing_amt)
      VALUES
        (ln_comtrn_sysid, -- SYSID                 
         row_lentran_dtls.year, --ld_year, --year                 
         row_lentran_dtls.period, --ld_period, --period               
         'LENDIN', --rec_type             
         ls_lending_partner_code, --branch_agent         
         ls_lending_partner_code, --cont_scheme           
         NULL, --as TOTAL_BAL,
         NULL, --as TOT_RECEIPTS_OWNER,
         NULL, --as TOT_WDLS_OWNER,
         NULL, --as INT_CRED,
         NULL, --as TRANS_BAL,
         NULL, --as NUM_RCPTS,
         NULL, --as TOT_RCPTS_SRCE,
         pn_loanac_accgrp_num || 80, --as ACCOUNT_NUMBER,
         0060, --as TRAN_CODE,    
         row_lentran_dtls.amt, --ln_borrowing_amt, --tx_amount             
         ln_product_code, --product_code,         
         'Y', --COMMISSIONABLE      
         NULL, --NUM_SAV               
         NULL, --NUM_LEN               
         pd_completion_date, --completion_date,       
         NULL, --MORT_ADVANCES         
         USER, --UPDATE_ID             
         TRUNC(SYSDATE), --UPDATE_TIME           
         row_get_sysid_dtls.introd_sysid, --ln_introd_sysid, --introd_sysid         
         row_lentran_dtls.transaction_date, --ld_process_date, --PROCESSED_DATE       
         7, --payment_frequency(7(weekly) FOR ACCORD)      
         ld_application_dt, --application_date     
         row_lentran_dtls.amt); --ln_borrowing_amt); --BORROWING_AMT); 
    
      -- sequence generation for commission_paids sysid
      ln_compaid_sysid := pack_sequence.fn_next_number('COMPAID_SEQ');
    
      -- Inserting the data in commission_paids
      INSERT INTO commission_paids
        (sysid,
         posted_flag,
         branch_agent,
         year,
         period,
         gl_acc_div,
         description,
         amount,
         comrl_id,
         adjustment,
         update_id,
         update_time,
         processed_date,
         payment_frequency)
      VALUES
        (ln_compaid_sysid, --sysid               
         'Y', --posted_flag        
         ls_lending_partner_code, --branch_agent       
         row_lentran_dtls.year, --ld_year, --year               
         row_lentran_dtls.period, --ld_period, --period             
         276001, --gl_acc_div (276001 code define(MORTGAGE COMMISSION))        
         NULL, --description         
         pn_procuration_fee_amount, --amount             
         NULL, --comrl_id           
         NULL, --adjustment         
         USER, --update_id           
         TRUNC(SYSDATE), --update_time        
         row_lentran_dtls.transaction_date, --ld_process_date, --processed_date     
         7); --payment_frequency(7(weekly) FOR ACCORD) 
    
      -- sequence generation for commission_report_trans sysid
      ln_comrtrn_sysid := pack_sequence.fn_next_number('COMRTRN_SEQ');
    
      -- Inserting the data in commission_report_trans
      INSERT INTO commission_report_trans
        (sysid,
         year,
         period,
         branch_agent,
         cont_scheme,
         compaid_sysid,
         account_number,
         tran_code,
         tx_amount,
         product_code,
         commissionable,
         completion_date,
         update_id,
         update_time,
         commission_paid,
         adjustment,
         introd_sysid,
         lp_code,
         remittance_detail,
         processed_date,
         payment_frequency,
         comments)
      VALUES
        (ln_comrtrn_sysid, --SYSID                  
         row_lentran_dtls.year, --ld_year, --YEAR                  
         row_lentran_dtls.period, --ld_period, --PERIOD                
         ls_lending_partner_code, --BRANCH_AGENT          
         ls_lending_partner_code, --CONT_SCHEME            
         ln_compaid_sysid, --COMPAID_SYSID          
         pn_loanac_accgrp_num || 80, --ACCOUNT_NUMBER,        
         0060, --TRAN_CODE              
         row_lentran_dtls.amt, --ln_borrowing_amt, --TX_AMOUNT              
         ln_product_code, --PRODUCT_CODE,          
         'Y', --COMMISSIONABLE        
         pd_completion_date, --COMPLETION_DATE        
         USER, --UPDATE_ID              
         TRUNC(SYSDATE), --UPDATE_TIME            
         pn_procuration_fee_amount, --COMMISSION_PAID        
         NULL, --ADJUSTMENT            
         row_get_sysid_dtls.introd_sysid, --INTROD_SYSID          
         NULL, --LP_CODE                
         ls_remittance_dtl, --REMITTANCE_DETAIL      
         row_lentran_dtls.transaction_date, --ld_process_date, --PROCESSED_DATE        
         7, --payment_frequency(7(weekly) FOR ACCORD)       
         NULL); --COMMENTS )  
    
    END LOOP;
    CLOSE c_lentran_details;
  
  END LOOP;
  CLOSE c_get_sysid_details;

EXCEPTION
  WHEN exp_param_mandatory THEN
    ybs_application_error(-20022,
                          'E00013# Mandatory parameters missing or invalid : ' ||
                          ls_parameter);
  WHEN OTHERS THEN
    ybs_application_error(-20001,
                          SQLERRM ||
                          ' error in pr_populate_commission_dtls');
  
END pr_populate_commission_dtls;

PROCEDURE pr_create_events(pn_loanac_accgrp_num         IN  NUMBER,
                           ps_valuation_type            IN  VARCHAR2,
                           ps_update_id                 IN  VARCHAR2) IS
/* ************************************************************************************************
  Name            : pr_create_events
  Purpose         : Procedure to create Loan Account events and Property event for a Loan Account
                    in SMBP Core
  Developer       : Rajeev Ranjan (TCS)
  ---------------------------------------------------------------------------------------------------
  Update Log:
  Version                By                      Date                Details
  1.0                    Rajeev Ranjan           27-AUG-2018         Original version
  ---------------------------------------------------------------------------------------------------
  ************************************************************************************************ */

  --Local variable declaration
    ls_parameter                    VARCHAR2(50);
    ls_laccet_code                  loan_account_events.laccet_code%TYPE;
    ls_proval_type                  property_events.proval_type%TYPE;
    ls_pvrtyp_code                  property_events.pvrtyp_code%TYPE;
    ls_pbuset_code                  prp_bus_uses.pbuset_code%TYPE;
    ls_accommodation_ind            prp_bus_uses.accommodation_ind%TYPE;
    ls_lestyp_code                  loan_event_statuses.lestyp_code%TYPE;
    ls_pbuset_code1                 prp_bus_uses.pbuset_code%TYPE;
    ls_accommodation_ind1           prp_bus_uses.accommodation_ind%TYPE;
    ls_laccet_codes                 loan_account_events.laccet_code%TYPE;
  
    ln_sysid_lae                    loan_account_events.sysid%TYPE;
    ln_prpty_sysid                  properties.sysid%TYPE;
    ln_perc                         prp_bus_uses.perc%TYPE;  
    ln_perc1                        prp_bus_uses.perc%TYPE;    

  --Exception variable declaration
    exp_param_mandatory             EXCEPTION;
    exp_events_for_prpval           EXCEPTION;

  -- Cursors For Getting Data From Database.
    --To retrieve ln_sysid_lae
    CURSOR c_lnacc_event_exist(pn_loanac_accgrp_num IN NUMBER)IS
    SELECT lae.sysid
    FROM loan_account_events lae
    WHERE lae.accgrp_num = pn_loanac_accgrp_num AND
          lae.laccet_code= ls_laccet_code;
          
    --To check ln_sysid_lae exist in loan_event_statuses table
    CURSOR c_lnevent_stats_exist(ln_sysid_lae IN NUMBER)IS
    SELECT les.laceve_sysid
    FROM loan_event_statuses les
    WHERE les.laceve_sysid = ln_sysid_lae;
    
    --To retrieve ln_prpty_sysid from property_events table
    CURSOR c_prpty_event_exist(ln_sysid_lae IN NUMBER)IS
    SELECT pe.laceve_sysid
    FROM property_events pe
    WHERE pe.laceve_sysid = ln_sysid_lae;
    
    --To retrieve ln_prpty_sysid from properties table
    CURSOR c_sysid_prpty (pn_loanac_accgrp_num IN NUMBER)IS
    SELECT prpty.sysid
    FROM properties prpty
    WHERE prpty.accgrp_num = pn_loanac_accgrp_num;
    
    --To retrieve ls_pbuset_code1, ls_accommodation_ind1, ln_perc1 
    CURSOR c_prp_bus_uses(ln_prpty_sysid IN NUMBER)IS
    SELECT pbu.pbuset_code, pbu.accommodation_ind, pbu.perc
    FROM prp_bus_uses pbu
    WHERE pbu.prpty_sysid = ln_prpty_sysid;

  BEGIN

    -- Validating input parameters
    IF pn_loanac_accgrp_num IS NULL THEN
     ls_parameter := 'pn_loanac_accgrp_num';
    RAISE exp_param_mandatory;
    ELSIF ps_valuation_type IS NULL THEN
     ls_parameter := 'ps_valuation_type';
    RAISE exp_param_mandatory;
    ELSIF ps_update_id IS NULL THEN
     ls_parameter := 'ps_update_id';
    RAISE exp_param_mandatory;
    END IF;

  -- Creation of Loan Account events for a Loan Account in SMBP Core
    -- Insert and update table loan_account_events 
    FOR i in 1..3 LOOP
      IF i=1 THEN
      ls_laccet_codes := 'PRPVAL';
      ls_lestyp_code  := 'VALSCL';
      ls_proval_type  := ps_valuation_type;                 
      ls_pvrtyp_code  := 'NMORTG';            
      ls_pbuset_code  := NULL;            
      ls_accommodation_ind := NULL;
      ln_perc := NULL;
      END IF;
        
      IF i=2 THEN
      ls_laccet_codes := 'PRPALT';
      ls_lestyp_code  := 'ALTCPL';
      ls_proval_type  := NULL;             
      ls_pvrtyp_code  := NULL;             
      ls_pbuset_code  := NULL;             
      ls_accommodation_ind := NULL;
      ln_perc := NULL;         
      END IF;
   
      IF i=3 THEN
      OPEN c_prp_bus_uses(ln_prpty_sysid);
      FETCH c_prp_bus_uses
      INTO ls_pbuset_code1, ls_accommodation_ind1, ln_perc1;    
      CLOSE c_prp_bus_uses; 
      ls_laccet_codes := 'PRPBUS';
      ls_lestyp_code  := 'BUSCPL';
      ls_proval_type  := NULL;               
      ls_pvrtyp_code  := NULL;       
      ls_pbuset_code  := ls_pbuset_code1;             
      ls_accommodation_ind := ls_accommodation_ind1;
      ln_perc := ln_perc1;                   
      END IF;
      
      ls_laccet_code := ls_laccet_codes;
      OPEN c_lnacc_event_exist(pn_loanac_accgrp_num);
      FETCH c_lnacc_event_exist
      INTO ln_sysid_lae;
        IF c_lnacc_event_exist %NOTFOUND THEN
          
          ln_sysid_lae := LACEVE_SYSID_SEQ.nextval;
          INSERT INTO loan_account_events(sysid,
                                          accgrp_num,
                                          loanac_latype_code,
                                          laccet_code,
                                          start_date,
                                          update_id,
                                          update_time
                                         )
                                   VALUES(ln_sysid_lae,
                                          pn_loanac_accgrp_num,
                                          80,
                                          ls_laccet_code,
                                          TRUNC(SYSDATE),
                                          ps_update_id,
                                          SYSDATE
                                          );
        END IF;
        IF c_lnacc_event_exist %FOUND THEN          
          UPDATE loan_account_events lae                           
          SET lae.loanac_latype_code = 80,
              lae.end_date = TRUNC(SYSDATE),
              lae.update_id = ps_update_id,
              lae.update_time = SYSDATE
          WHERE sysid = ln_sysid_lae;
        END IF;
      CLOSE c_lnacc_event_exist;  

      -- Insert and update table loan_event_statuses 
      OPEN  c_lnevent_stats_exist(ln_sysid_lae);
      FETCH c_lnevent_stats_exist
      INTO ln_sysid_lae ;
        IF c_lnevent_stats_exist %NOTFOUND THEN          
          INSERT INTO loan_event_statuses(laceve_sysid,
                                          lestyp_code,
                                          start_date,
                                          update_id,
                                          update_time
                                         )
                                   VALUES(ln_sysid_lae,
                                          ls_lestyp_code,
                                          TRUNC(SYSDATE),
                                          ps_update_id,
                                          SYSDATE
                                         );
        END IF;
        IF c_lnevent_stats_exist %FOUND THEN          
          UPDATE loan_event_statuses les
          SET les.lestyp_code = ls_lestyp_code,
              end_date = TRUNC(SYSDATE),
              update_id = ps_update_id,
              update_time= SYSDATE
          WHERE les.laceve_sysid = ln_sysid_lae;
        END IF;
      CLOSE c_lnevent_stats_exist;  
      
-- Creation of property events for a Loan Account in SMBP Core
      -- Insert and update table property_events 
      OPEN c_prpty_event_exist(ln_sysid_lae);
      FETCH c_prpty_event_exist
      INTO ln_prpty_sysid;
      
      OPEN c_sysid_prpty(pn_loanac_accgrp_num);
      FETCH c_sysid_prpty
      INTO ln_prpty_sysid;    
        IF c_prpty_event_exist %NOTFOUND THEN          
          INSERT INTO property_events(laceve_sysid,
                                      prpevt_type,
                                      prpty_sysid,
                                      proval_type,
                                      pvrtyp_code,
                                      start_date,
                                      pbuset_code,
                                      accommodation_ind,
                                      perc
                                     )
                               VALUES(ln_sysid_lae,
                                      ls_laccet_code,
                                      ln_prpty_sysid,
                                      ls_proval_type,
                                      ls_pvrtyp_code,
                                      TRUNC(SYSDATE),
                                      ls_pbuset_code,
                                      ls_accommodation_ind,
                                      ln_perc
                                     );
        END IF;
        IF c_prpty_event_exist %FOUND THEN       
          UPDATE property_events pe
          SET pe.prpevt_type = ls_laccet_code,
              pe.prpty_sysid = ln_prpty_sysid,
              pe.proval_type = ls_proval_type,
              pe.pvrtyp_code = ls_pvrtyp_code,
              pe.end_date = TRUNC(SYSDATE),
              pe.pbuset_code = ls_pbuset_code,
              pe.accommodation_ind = ls_accommodation_ind,
              pe.perc = ln_perc
          WHERE pe.laceve_sysid = ln_sysid_lae ;
        END IF;      
      CLOSE c_sysid_prpty;
      CLOSE c_prpty_event_exist;      
    END LOOP;

  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022, 'E00013# Mandatory Parameters Missing - '
                            || ls_parameter);
    WHEN OTHERS THEN
      ybs_application_error(-20002, 'Error in pr_create_events - ' ||SQLERRM);

END pr_create_events;
                                            
PROCEDURE pr_create_hastening_schedule(pn_loanac_accgrp_num     IN  NUMBER,
                                       ps_bsac_stats_code       IN  VARCHAR2,
                                       ps_update_id             IN  VARCHAR2) IS
 /* ************************************************************************************************
  Name            : pr_create_hastening_schedule
  Purpose         : Procedure to handle Savings Cashback postings for Return of Funds Process.
  Developer       : Rajeev Ranjan (TCS)
  ---------------------------------------------------------------------------------------------------
  Update Log:
  Version          By                Date             Details
  1.0              Rajeev Ranjan     24-AUG-2018      Original version
  ---------------------------------------------------------------------------------------------------
  ************************************************************************************************ */
  -- Local variable declaration
      ls_wsch_code              work_steps.wsch_code%TYPE;
      ls_output_status          VARCHAR2(1);
      ls_message_code           VARCHAR2(7);
      ls_param1                 VARCHAR2(7);
      ls_param2                 VARCHAR2(7);
      ls_parameter              VARCHAR2(30);
      ln_row_count              NUMBER(10);    
      ln_rank                   work_steps.rank%TYPE;
      ln_new_wsa_sysid          NUMBER(10);

  -- Exception variable declaration
      exp_param_mandatory       EXCEPTION;
      exp_wsch_code             EXCEPTION;
      exp_wst_delay             EXCEPTION;

  
      --To retrive wsch code from property_location_rules table
      CURSOR c_get_wsch_code(ps_bsac_stats_code IN VARCHAR2)IS
      SELECT DISTINCT(plr.wsch_code)
      FROM property_location_rules plr
      WHERE plr.bsac_stats_code = ps_bsac_stats_code;
      
      --To retrive wst_delay for min rank corresponding to the retrived wsch_code
      CURSOR c_get_wst_delay(ls_wsch_code IN VARCHAR2)IS
      SELECT w.wst_delay
      FROM work_steps w
      WHERE w.rank = (SELECT MIN(ws.rank)FROM work_steps ws WHERE ws.wsch_code = ls_wsch_code);

      typ_c_get_wsch_code       c_get_wsch_code%ROWTYPE;
      TYPE tab_c_get_wsch_code  IS TABLE OF typ_c_get_wsch_code.wsch_code%TYPE;
      lc_c_get_wsch_code        tab_c_get_wsch_code;

      typ_c_get_wst_delay       c_get_wst_delay%ROWTYPE;
      TYPE tab_c_get_wst_delay  IS TABLE OF typ_c_get_wst_delay.wst_delay%TYPE;
      lc_c_get_wst_delay        tab_c_get_wst_delay;

  BEGIN
      -- Validating input parameters
      IF pn_loanac_accgrp_num IS NULL THEN
        ls_parameter := 'loanac_accgrp_num';
      RAISE exp_param_mandatory;
      ELSIF ps_bsac_stats_code IS NULL THEN
        ls_parameter := 'bsac_stats_code';
      RAISE exp_param_mandatory;
      ELSIF ps_update_id IS NULL THEN
        ls_parameter := 'update_id';
      RAISE exp_param_mandatory;
      END IF;
      OPEN c_get_wsch_code(ps_bsac_stats_code);
      FETCH c_get_wsch_code BULK COLLECT INTO lc_c_get_wsch_code;
        IF c_get_wsch_code %ROWCOUNT=0 THEN      
          RAISE exp_wsch_code;
        END IF;
        FOR i IN lc_c_get_wsch_code.FIRST..lc_c_get_wsch_code.LAST LOOP
        ls_wsch_code := lc_c_get_wsch_code(i); 
          
          OPEN c_get_wst_delay(ls_wsch_code);
          FETCH c_get_wst_delay BULK COLLECT INTO lc_c_get_wst_delay;
            ln_row_count := c_get_wst_delay %ROWCOUNT;
            IF c_get_wst_delay %ROWCOUNT=0 THEN
              ls_parameter := ls_wsch_code;
              RAISE exp_wst_delay;
            END IF;
            FOR j IN lc_c_get_wst_delay.FIRST..lc_c_get_wst_delay.LAST LOOP  
              /* Calling WRK0490K.WRK0070D to create deeds hastening work schedule 
              for the loan account.*/
              WRK0490k.WRK0070D ('LOANAC',
                                 pn_loanac_accgrp_num,
                                 80,
                                 NULL,
                                 NULL,
                                 NULL,
                                 NULL,
                                 NULL,
                                 NULL,
                                 ps_update_id,
                                 lc_c_get_wsch_code(i),
                                 ln_rank,
                                 TRUNC(SYSDATE) + lc_c_get_wst_delay(j),
                                 ls_output_status,
                                 ls_message_code,
                                 ls_param1,
                                 ls_param2,
                                 ln_new_wsa_sysid );
            END LOOP;
          CLOSE c_get_wst_delay;       
        END LOOP;
      CLOSE c_get_wsch_code; 

  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022, 'E00013# Mandatory Parameters Missing - '
                                      || ls_parameter);

    WHEN exp_wsch_code THEN
      ybs_application_error(-20002, 'E10254# work schedule code # property location.');

    WHEN exp_wst_delay THEN
      ybs_application_error(-20002, 'E10667# work step delay # work schedule code.');

    WHEN OTHERS THEN
      ybs_application_error(-20002, 'E10229# Any other error in
                            pr_create_hastening_schedule - ' ||SQLERRM);
END pr_create_hastening_schedule;


PROCEDURE pr_set_loanacc_status (pn_loanac_accgrp_num   IN  NUMBER)
  /* ******************************************************************************
      Name            : pr_set_loanacc_status
      Purpose         : Procedure to set the Loan Account status to OPEN and LOAN App
                        status to complete post Release of funds.
      Developer       : Rajeev Ranjan (TCS)
    --------------------------------------------------------------------------------
      Update Log:

      Version         By               Date              Details
      1.00            Rajeev Ranjan    17/09/18          Orginal Version
    -------------------------------------------------------------------------------- */
    IS
  -- Local variable declaration
    ls_parameter            VARCHAR2(30);
    ln_loanpt_latype_code   loan_part_statuses.loanpt_latype_code%TYPE;
    ln_loanpt_part_num      loan_part_statuses.loanpt_part_num%TYPE;
    ls_update_id            loan_part_statuses.update_id%TYPE;
    ls_lasr_code            loan_appl_statuses.lasr_code%TYPE;
    ln_loanap_sysid         loan_appl_statuses.loanap_sysid%TYPE;

  -- Exception declaration
    exp_param_mandatory     EXCEPTION;

  
    CURSOR c_loan_part_statuses IS
    SELECT lps.loanpt_latype_code, lps.loanpt_part_num, lps.update_id
    FROM loan_part_statuses lps
    WHERE lps.loanpt_accgrp_num = pn_loanac_accgrp_num;
    
    CURSOR c_loan_applications IS
    SELECT la.sysid
    FROM loan_applications la
    WHERE la.loanac_accgrp_num = pn_loanac_accgrp_num;

    CURSOR c_loan_appl_statuses IS
    SELECT las.lasr_code, las.update_id
    FROM loan_appl_statuses las
    WHERE las.loanap_sysid = ln_loanap_sysid;
    
  BEGIN
  -- Validating input parameter
    IF pn_loanac_accgrp_num IS NULL OR
       nvl(pn_loanac_accgrp_num,0) <=0 THEN
       ls_parameter:='loanac_accgrp_num';
    RAISE exp_param_mandatory;
    END IF;
  --Update table account_groups with loaags_code = 'OPEN',
    UPDATE account_groups ag
    SET ag.loaags_code = 'OPEN',
        ag.update_time = TRUNC(SYSDATE)
    WHERE ag.num = pn_loanac_accgrp_num;

    /*Update table loan_part_statuses end_date as SYSDATE and create new 
    record into the table*/
    UPDATE loan_part_statuses lps
    SET lps.end_date = TRUNC(SYSDATE),
        lps.update_time = SYSDATE
    WHERE lps.loanpt_accgrp_num =  pn_loanac_accgrp_num AND 
          lps.end_date IS NULL;

    OPEN c_loan_part_statuses; 
    FETCH c_loan_part_statuses
    INTO ln_loanpt_latype_code, ln_loanpt_part_num, ls_update_id;

    INSERT INTO loan_part_statuses(loanpt_accgrp_num,
                                   loanpt_latype_code,
                                   loanpt_part_num,
                                   lpst_code,
                                   start_date,
                                   end_date,
                                   update_id,
                                   update_time
                                  )
                            VALUES(pn_loanac_accgrp_num,
                                   ln_loanpt_latype_code,
                                   ln_loanpt_part_num,
                                   'OPEN',
                                   TRUNC(SYSDATE),
                                   NULL,
                                   ls_update_id,
                                   SYSDATE
                                   );
    CLOSE c_loan_part_statuses;
    
    /*Update table loan_appl_statuses end_date as SYSDATE and create new 
    record into the table.  */
    OPEN c_loan_applications;
    LOOP
    FETCH c_loan_applications INTO ln_loanap_sysid;
    EXIT WHEN c_loan_applications%NOTFOUND;

    OPEN c_loan_appl_statuses;
    FETCH c_loan_appl_statuses
    INTO ls_lasr_code, ls_update_id;    

    UPDATE loan_appl_statuses las
    SET las.end_date = TRUNC(SYSDATE),
        las.update_time = SYSDATE
    WHERE las.loanap_sysid = ln_loanap_sysid AND
          las.end_date IS NULL;

    INSERT INTO loan_appl_statuses(loanap_sysid,
                                   lasttp_code,
                                   start_date,
                                   lasr_code,
                                   end_date,
                                   update_id,
                                   update_time
                                  )
                            VALUES(ln_loanap_sysid,
                                   'CMPLET',
                                   TRUNC(SYSDATE),
                                   ls_lasr_code,
                                   NULL,
                                   ls_update_id,
                                   SYSDATE
                                  );
    CLOSE c_loan_appl_statuses;                                  
    END LOOP;                                  
    CLOSE c_loan_applications;

  EXCEPTION
    WHEN exp_param_mandatory THEN
      ybs_application_error(-20022,'E00013# Mandatory parameters missing or invalid : ' ||
                            ls_parameter);

    WHEN OTHERS THEN
      ybs_application_error(-20001,'Error in pr_set_loanacc_status - ' ||
                            SQLERRM);

END pr_set_loanacc_status;

BEGIN
    -- Assigining the Global Values from the database to the local variables.
    gn_loanac_accgrp_type        := pack_header.fn_get_global('GS_LACCGP_LACCGP');
    gn_loanac_latype_code        := pack_header.fn_get_global('GN_LATYPE_MORTG');
    gs_ept_sysmor                := pack_header.fn_get_global('GS_EPT_SYSMOR');
    gs_epcr_inlrof               := pack_header.fn_get_global('GS_EPCR_INLROF');
    gs_epcr_prmfrq_monthly       := pack_header.fn_get_global('GS_PRMFRQ_MONTHLY');
    gs_actply_table_id           := pack_header.fn_get_global('GS_TABLE_ID_ACCGRP');
    gs_lasttp_cmplet             := pack_header.fn_get_global('GS_LASTTP_CMPLET');
    gs_loaptp_code               := pack_header.fn_get_global('GS_APP_MORTG');
    gs_pertyp_socyr              := pack_header.fn_get_global('GS_PERTYP_SOCYR');
    gs_lps_open                  := pack_header.fn_get_global('GS_LPS_OPEN');
    gs_mso_loanac_attribute_name := pack_header.fn_get_global('GS_MSO_LOANAC_ATTRIBUTE_NAME');
    gs_mso_brand_attribute_name  := pack_header.fn_get_global('GS_MSO_BRAND_ATTRIBUTE_NAME');
    gs_mor_admin_branch          := pack_header.fn_get_global('GS_MOR_ADMIN_BRN');
    gs_lasttp_rofpen             := pack_header.fn_get_global('GS_LASTTP_ROFPEN');
    gs_lps_rofpen                := pack_header.fn_get_global('GS_LPS_ROFPEN');
    gs_mso_source_system_value   := pack_header.fn_get_global('GS_MSO_SOURCE_SYSTEM_VALUE');

END soa_mortgage_Soumya_wip;
/
